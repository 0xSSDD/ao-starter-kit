{"documentCount":47,"nextId":47,"documentIds":{"0":"docs/pages/getting-started.mdx#getting-started","1":"docs/pages/getting-started.mdx#project-setup","2":"docs/pages/getting-started.mdx#enter-the-name-of-your-project","3":"docs/pages/getting-started.mdx#what-should-we-name-the-backend-process","4":"docs/pages/getting-started.mdx#pick-a-process-type-within-myprocess","5":"docs/pages/getting-started.mdx#select-the-features-you-want-to-include","6":"docs/pages/getting-started.mdx#pick-a-frontend-framework-within-my-project","7":"docs/pages/getting-started.mdx#project-structure","8":"docs/pages/getting-started.mdx#preconfigured-scripts","9":"docs/pages/getting-started.mdx#next-steps","10":"docs/pages/introduction.mdx#create-ao-dapp","11":"docs/pages/introduction.mdx#features","12":"docs/pages/project-structure.mdx#project-structure","13":"docs/pages/frontend-development/architecture.mdx#frontend-development","14":"docs/pages/frontend-development/architecture.mdx#directory-structure","15":"docs/pages/frontend-development/building.mdx#building-the-frontend","16":"docs/pages/frontend-development/connecting-to-backend.mdx#connecting-to-backend","17":"docs/pages/frontend-development/connecting-to-backend.mdx#arweave-wallet-kit","18":"docs/pages/frontend-development/connecting-to-backend.mdx#tanstack-query","19":"docs/pages/frontend-development/connecting-to-backend.mdx#interacting-with-backend-processes","20":"docs/pages/frontend-development/connecting-to-backend.mdx#reading-data-from-backend-process","21":"docs/pages/frontend-development/connecting-to-backend.mdx#sending-data-to-backend-process","22":"docs/pages/frontend-development/permaweb-deployment.mdx#permaweb-deployment","23":"docs/pages/frontend-development/permaweb-deployment.mdx#arns-domain","24":"docs/pages/frontend-development/permaweb-deployment.mdx#ardrive-account","25":"docs/pages/frontend-development/permaweb-deployment.mdx#deploying-the-frontend","26":"docs/pages/process-development/architecture.mdx#developing-ao-processes","27":"docs/pages/process-development/architecture.mdx#process-directory-structure","28":"docs/pages/process-development/building-with-amalg.mdx#building-the-process-using-amalglua","29":"docs/pages/process-development/building-with-amalg.mdx#configuring-build-script","30":"docs/pages/process-development/building-with-amalg.mdx#building-the-process","31":"docs/pages/process-development/building-with-squish.mdx#building-the-process-using-squishy","32":"docs/pages/process-development/building-with-squish.mdx#configuring-squish","33":"docs/pages/process-development/building-with-squish.mdx#building-the-process","34":"docs/pages/process-development/deployment.mdx#process-deployment","35":"docs/pages/process-development/deployment.mdx#configuring-aoform","36":"docs/pages/process-development/deployment.mdx#deploying-the-process","37":"docs/pages/process-development/process-design.mdx#process-design","38":"docs/pages/process-development/process-design.mdx#process-design-principles","39":"docs/pages/process-development/process-design.mdx#1-modularity","40":"docs/pages/process-development/process-design.mdx#2-separation-of-concerns","41":"docs/pages/process-development/testing.mdx#ao-process-testing","42":"docs/pages/process-development/testing.mdx#process-testing-directory-structure","43":"docs/pages/process-development/testing.mdx#test-directory","44":"docs/pages/process-development/testing.mdx#writing-tests","45":"docs/pages/process-development/testing.mdx#writing-a-test-case","46":"docs/pages/process-development/testing.mdx#running-the-tests"},"fieldIds":{"title":0,"titles":1,"text":2},"fieldLength":{"0":[2,1,19],"1":[2,2,18],"2":[6,4,17],"3":[8,4,35],"4":[6,4,17],"5":[7,4,31],"6":[7,4,16],"7":[2,2,79],"8":[2,2,35],"9":[2,2,43],"10":[3,1,40],"11":[1,3,49],"12":[2,1,1],"13":[2,1,63],"14":[2,2,88],"15":[3,1,75],"16":[3,1,14],"17":[3,3,102],"18":[2,3,110],"19":[4,3,61],"20":[5,3,111],"21":[5,3,118],"22":[2,1,38],"23":[2,2,11],"24":[2,2,15],"25":[3,2,88],"26":[3,1,56],"27":[3,3,107],"28":[6,1,50],"29":[3,6,33],"30":[3,6,32],"31":[5,1,42],"32":[2,5,47],"33":[3,5,32],"34":[2,1,40],"35":[2,2,55],"36":[3,2,45],"37":[2,1,157],"38":[3,2,27],"39":[2,3,158],"40":[4,3,192],"41":[3,1,45],"42":[4,3,67],"43":[2,3,39],"44":[2,3,20],"45":[4,5,134],"46":[3,5,66]},"averageFieldLength":[3.2340425531914887,2.617021276595745,58.255319148936174],"storedFields":{"0":{"href":"/getting-started#getting-started","html":"</header>\n<p>To get started with the create-ao-dapp, you can run the following command:</p>\n<div class=\"code-group\"><div data-title=\"bun\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"bun\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">bun</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> create</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ao-dapp</span></span></code></pre></div><div data-title=\"pnpm\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"pnpm\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">pnpm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> create</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ao-dapp</span></span></code></pre></div><div data-title=\"yarn\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"yarn\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">yarn</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> create</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ao-dapp</span></span></code></pre></div><div data-title=\"npm\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"npm\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> init</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ao-dapp</span></span></code></pre></div></div>\n","isPage":true,"text":"\nTo get started with the create-ao-dapp, you can run the following command:\nbun create ao-dapppnpm create ao-dappyarn create ao-dappnpm init ao-dapp\n","title":"Getting Started","titles":[]},"1":{"href":"/getting-started#project-setup","html":"\n<p>Running the above command will prompt you to complete multiple steps to set up your project. The steps include:</p>\n<div data-vocs-steps=\"true\"><div data-depth=\"3\">","isPage":false,"text":"\nRunning the above command will prompt you to complete multiple steps to set up your project. The steps include:\n","title":"Project Setup","titles":["Getting Started"]},"2":{"href":"/getting-started#enter-the-name-of-your-project","html":"<p>This will be used as the root directory for your project, relative to the current directory. (eg: my-project)</p></div><div data-depth=\"3\">","isPage":false,"text":"This will be used as the root directory for your project, relative to the current directory. (eg: my-project)","title":"Enter the name of your project","titles":["Getting Started","Project Setup"]},"3":{"href":"/getting-started#what-should-we-name-the-backend-process","html":"<p>You can name your backend process anything you like. The name you provide will be used to create the process\ndirectory and files. (eg: myprocess)</p><aside data-callout=\"warning\"><p>Naming your process is important, as it will be used to create the process directory and files. Only valid lua identifier names are allowed.</p></aside></div><div data-depth=\"3\">","isPage":false,"text":"You can name your backend process anything you like. The name you provide will be used to create the process\ndirectory and files. (eg: myprocess)Naming your process is important, as it will be used to create the process directory and files. Only valid lua identifier names are allowed.","title":"What should we name the backend process?","titles":["Getting Started","Project Setup"]},"4":{"href":"/getting-started#pick-a-process-type-within-myprocess","html":"<p>You can choose from the following process types:</p><ul>\n<li><code>lua</code>: A simple Lua process.</li>\n<li><code>teal</code>: Lua process using the <a href=\"https://github.com/teal-language/tl\">Teal language</a>.</li>\n</ul></div><div data-depth=\"3\">","isPage":false,"text":"You can choose from the following process types:\nlua: A simple Lua process.\nteal: Lua process using the Teal language.\n","title":"Pick a process type within myprocess","titles":["Getting Started","Project Setup"]},"5":{"href":"/getting-started#select-the-features-you-want-to-include","html":"<p>You can choose from the following features:</p><ul>\n<li><code>testing</code>: Include AO Process Testing suite for your process. <a href=\"https://github.com/Autonomous-Finance/ao-process-testing\">AO Process Testing</a></li>\n<li><code>squishy</code>: Tool for combining multiple files into a single one. <a href=\"https://github.com/LuaDist/squish\">Squish</a></li>\n<li><code>aoform</code>: Include AO Form for deploying your process. <a href=\"https://github.com/Autonomous-Finance/aoform\">AOForm</a></li>\n</ul></div><div data-depth=\"3\">","isPage":false,"text":"You can choose from the following features:\ntesting: Include AO Process Testing suite for your process. AO Process Testing\nsquishy: Tool for combining multiple files into a single one. Squish\naoform: Include AO Form for deploying your process. AOForm\n","title":"Select the features you want to include","titles":["Getting Started","Project Setup"]},"6":{"href":"/getting-started#pick-a-frontend-framework-within-my-project","html":"<p>You can choose from the following frontend frameworks:</p><ul>\n<li><code>vite-react</code>: A React application using Vite.</li>\n</ul></div></div>\n","isPage":false,"text":"You can choose from the following frontend frameworks:\nvite-react: A React application using Vite.\n\n","title":"Pick a frontend framework within my-project","titles":["Getting Started","Project Setup"]},"7":{"href":"/getting-started#project-structure","html":"\n<p>By selecting all the options, you will have a project structure similar to the following:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed has-focused has-highlighted\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>project-name/             # Your project&#x27;s root directory.</span></span>\n<span class=\"line focused highlighted\"><span>├── ao/                   # The root directory of your ao processes.</span></span>\n<span class=\"line focused highlighted\"><span>│   └── process-name/          # Process Directory.</span></span>\n<span class=\"line focused highlighted\"><span>│       ├── scripts/           # Utility scripts for the process.</span></span>\n<span class=\"line focused highlighted\"><span>│       ├── src/               # Source code for the process.</span></span>\n<span class=\"line focused highlighted\"><span>│       │   ├── test/                   # Entry point for the process.</span></span>\n<span class=\"line focused highlighted\"><span>│       │   │   └── process_test.lua    # Test script for the process.</span></span>\n<span class=\"line focused highlighted\"><span>│       │   └── process.lua             # Entry point for the process.</span></span>\n<span class=\"line focused highlighted\"><span>│       ├── aoform.yaml        # Configuration for ao-form deployment.</span></span>\n<span class=\"line focused highlighted\"><span>│       └── squishy            # Squishy configuration for build.</span></span>\n<span class=\"line focused highlighted\"><span>├── apps/             # The root directory of your frontend applications.</span></span>\n<span class=\"line focused highlighted\"><span>│   └── frontend/     # React Vite App connected to ao process.</span></span>\n<span class=\"line focused highlighted\"><span>├── utils             # Directory for utility functions.</span></span>\n<span class=\"line focused highlighted\"><span>│   └── inject-process.ts # Script to inject process Ids from ao to frontend</span></span>\n<span class=\"line\"><span>├── node_modules/</span></span>\n<span class=\"line\"><span>├── .gitignore</span></span>\n<span class=\"line\"><span>├── package.json</span></span>\n<span class=\"line\"><span>├── README.md</span></span>\n<span class=\"line\"><span>└── tsconfig.json</span></span></code></pre>\n<p>This structure includes the following directories:</p>\n<ul>\n<li><code>ao/</code>: The root directory of your ao processes.</li>\n<li><code>apps/</code>: The root directory of your frontend applications.</li>\n<li><code>utils/</code>: Directory for utility functions.</li>\n</ul>\n","isPage":false,"text":"\nBy selecting all the options, you will have a project structure similar to the following:\nproject-name/             # Your project&#x27;s root directory.\n├── ao/                   # The root directory of your ao processes.\n│   └── process-name/          # Process Directory.\n│       ├── scripts/           # Utility scripts for the process.\n│       ├── src/               # Source code for the process.\n│       │   ├── test/                   # Entry point for the process.\n│       │   │   └── process_test.lua    # Test script for the process.\n│       │   └── process.lua             # Entry point for the process.\n│       ├── aoform.yaml        # Configuration for ao-form deployment.\n│       └── squishy            # Squishy configuration for build.\n├── apps/             # The root directory of your frontend applications.\n│   └── frontend/     # React Vite App connected to ao process.\n├── utils             # Directory for utility functions.\n│   └── inject-process.ts # Script to inject process Ids from ao to frontend\n├── node_modules/\n├── .gitignore\n├── package.json\n├── README.md\n└── tsconfig.json\nThis structure includes the following directories:\n\nao/: The root directory of your ao processes.\napps/: The root directory of your frontend applications.\nutils/: Directory for utility functions.\n\n","title":"Project Structure","titles":["Getting Started"]},"8":{"href":"/getting-started#preconfigured-scripts","html":"\n<p>The <code>package.json</code> file in the root directory of your project includes the following preconfigured scripts:</p>\n<ul>\n<li><code>myprocess:deploy</code>: Deploys the process using aoform.</li>\n<li><code>myprocess:test</code>: Runs the test script for the process.</li>\n<li><code>myprocess:build</code>: Builds the process using squishy.</li>\n<li><code>frontend:dev</code>: Starts the development server for the frontend application.</li>\n<li><code>frontend:build</code>: Builds the frontend application.</li>\n</ul>\n","isPage":false,"text":"\nThe package.json file in the root directory of your project includes the following preconfigured scripts:\n\nmyprocess:deploy: Deploys the process using aoform.\nmyprocess:test: Runs the test script for the process.\nmyprocess:build: Builds the process using squishy.\nfrontend:dev: Starts the development server for the frontend application.\nfrontend:build: Builds the frontend application.\n\n","title":"Preconfigured Scripts","titles":["Getting Started"]},"9":{"href":"/getting-started#next-steps","html":"\n<p>You can now start developing your ao processes and frontend applications. For more information on how to use the create-ao-dapp, follow along with the rest of the documentation. If you have any questions or need help, feel free to reach out to us on dedicated channels.</p>","isPage":false,"text":"\nYou can now start developing your ao processes and frontend applications. For more information on how to use the create-ao-dapp, follow along with the rest of the documentation. If you have any questions or need help, feel free to reach out to us on dedicated channels.","title":"Next Steps","titles":["Getting Started"]},"10":{"href":"/introduction#create-ao-dapp","html":"</header>\n<p>The create-ao-dapp provides a comprehensive boilerplate for setting up an AO process, including testing, modules, and amalgamation alongside a React application. This starter kit aims to simplify the development and deployment of AO processes by providing pre-configured setups and example processes.</p>\n","isPage":true,"text":"\nThe create-ao-dapp provides a comprehensive boilerplate for setting up an AO process, including testing, modules, and amalgamation alongside a React application. This starter kit aims to simplify the development and deployment of AO processes by providing pre-configured setups and example processes.\n","title":"Create Ao dApp","titles":[]},"11":{"href":"/introduction#features","html":"\n<ul>\n<li><strong>Modular</strong>: The create-ao-dapp is designed to be modular, allowing you to easily add and remove modules as needed.</li>\n<li><strong>Testing</strong>: The create-ao-dapp includes a comprehensive testing suite, allowing you to test your AO processes with ease.</li>\n<li><strong>Amalgamation</strong>: The create-ao-dapp includes an amalgamation tool, allowing you to easily combine multiple AO processes into a single process.</li>\n<li><strong>Permaweb Deployment</strong>: The create-ao-dapp includes a deployment script that allows you to deploy your AO processes to the Permaweb with ease.</li>\n</ul>","isPage":false,"text":"\n\nModular: The create-ao-dapp is designed to be modular, allowing you to easily add and remove modules as needed.\nTesting: The create-ao-dapp includes a comprehensive testing suite, allowing you to test your AO processes with ease.\nAmalgamation: The create-ao-dapp includes an amalgamation tool, allowing you to easily combine multiple AO processes into a single process.\nPermaweb Deployment: The create-ao-dapp includes a deployment script that allows you to deploy your AO processes to the Permaweb with ease.\n","title":"Features","titles":["Create Ao dApp"]},"12":{"href":"/project-structure#project-structure","html":"</header>","isPage":true,"text":"","title":"Project Structure","titles":[]},"13":{"href":"/frontend-development/architecture#frontend-development","html":"</header>\n<p>The provided frontend is a Vite React application. It is a single-page application (SPA) that provides a user interface for the backend services. The frontend is built using the following technologies:</p>\n<ul>\n<li><a href=\"https://reactjs.org/\">React</a></li>\n<li><a href=\"https://vitejs.dev/\">Vite</a></li>\n<li><a href=\"https://www.typescriptlang.org/\">TypeScript</a></li>\n</ul>\n<p>Extra libraries used in the frontend that we recommend you use:</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/@permaweb/aoconnect\">Permaweb AoConnect</a></li>\n<li><a href=\"https://github.com/labscommunity/arweave-wallet-kit\">Arweave Wallet Kit</a></li>\n<li><a href=\"https://tanstack.com/query/latest\">TanStack Query</a></li>\n</ul>\n<aside data-callout=\"tip\"><strong data-callout-title=\"true\">Handy Tip</strong><p>TanStack Query is a powerful and flexible data fetching library for React. It is highly recommended to use TanStack Query for data fetching in your frontend. This will enable caching, pagination, and other features out of the box.</p></aside>\n","isPage":true,"text":"\nThe provided frontend is a Vite React application. It is a single-page application (SPA) that provides a user interface for the backend services. The frontend is built using the following technologies:\n\nReact\nVite\nTypeScript\n\nExtra libraries used in the frontend that we recommend you use:\n\nPermaweb AoConnect\nArweave Wallet Kit\nTanStack Query\n\nHandy TipTanStack Query is a powerful and flexible data fetching library for React. It is highly recommended to use TanStack Query for data fetching in your frontend. This will enable caching, pagination, and other features out of the box.\n","title":"Frontend Development","titles":[]},"14":{"href":"/frontend-development/architecture#directory-structure","html":"\n<p>The frontend codebase is present in the <code>apps/frontend</code> directory. The frontend codebase is structured as follows:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>apps/frontend/         # Your frontend application.</span></span>\n<span class=\"line\"><span>├──public/             # Your project&#x27;s public assets.</span></span>\n<span class=\"line\"><span>├──src/                # Your project&#x27;s source code.</span></span>\n<span class=\"line\"><span>│  ├── components/    # React components.</span></span>\n<span class=\"line\"><span>│  │  └── counter.tsx # Example of a React component.</span></span>\n<span class=\"line\"><span>│  ├── constants/         # Constants used in the frontend. This will include injected backend process.</span></span>\n<span class=\"line\"><span>|  |   └── counter_process.ts # Example of a backend process.</span></span>\n<span class=\"line\"><span>|  ├── App.css       # CSS file for the App component.</span></span>\n<span class=\"line\"><span>│  ├── App.tsx       # The main React component.</span></span>\n<span class=\"line\"><span>│  ├── index.css     # CSS file for the index.html file.</span></span>\n<span class=\"line\"><span>│  ├── main.tsx     # The main entry point for the React application.</span></span>\n<span class=\"line\"><span>|  └── vite-env.d.ts    # Vite environment types.</span></span>\n<span class=\"line\"><span>├── .eslintrc.cjs</span></span>\n<span class=\"line\"><span>├── .gitignore</span></span>\n<span class=\"line\"><span>├── index.html        # The main HTML file.</span></span>\n<span class=\"line\"><span>├── package.json</span></span>\n<span class=\"line\"><span>├── README.md</span></span>\n<span class=\"line\"><span>├── vite.config.ts   # Vite configuration file.</span></span>\n<span class=\"line\"><span>└── tsconfig.json</span></span></code></pre>\n<aside data-callout=\"info\"><p>The frontend codebase comes with a sample <code>counter</code> component that demonstrates how to use the backend process in the frontend. You can use this as a reference to build your own components.</p></aside>","isPage":false,"text":"\nThe frontend codebase is present in the apps/frontend directory. The frontend codebase is structured as follows:\napps/frontend/         # Your frontend application.\n├──public/             # Your project&#x27;s public assets.\n├──src/                # Your project&#x27;s source code.\n│  ├── components/    # React components.\n│  │  └── counter.tsx # Example of a React component.\n│  ├── constants/         # Constants used in the frontend. This will include injected backend process.\n|  |   └── counter_process.ts # Example of a backend process.\n|  ├── App.css       # CSS file for the App component.\n│  ├── App.tsx       # The main React component.\n│  ├── index.css     # CSS file for the index.html file.\n│  ├── main.tsx     # The main entry point for the React application.\n|  └── vite-env.d.ts    # Vite environment types.\n├── .eslintrc.cjs\n├── .gitignore\n├── index.html        # The main HTML file.\n├── package.json\n├── README.md\n├── vite.config.ts   # Vite configuration file.\n└── tsconfig.json\nThe frontend codebase comes with a sample counter component that demonstrates how to use the backend process in the frontend. You can use this as a reference to build your own components.","title":"Directory Structure","titles":["Frontend Development"]},"15":{"href":"/frontend-development/building#building-the-frontend","html":"</header>\n<p>The frontend is a Vite React application. It is a single-page application (SPA) that provides a user interface for the backend services.</p>\n<p>Building the vite frontend is a simple process. You can learn more about building in the official Vite documentation <a href=\"https://vitejs.dev/guide/build.html\">here</a>.</p>\n<p>To build the frontend, run the following command:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> frontend:build</span></span></code></pre>\n<p>You can deploy your frontend to a static hosting service like Vercel, Netlify, or GitHub Pages.</p>\n<aside data-callout=\"tip\"><strong data-callout-title=\"true\">Handy Tip</strong><p>Wouldn&#x27;t it be awesome if your frontend could be deployed to the Permaweb? You can do that with permaweb deployment tool that Create Ao dApp provides.</p><p>Check out the <a href=\"/frontend-development/permaweb-deployment\">Deploying to Permaweb</a> guide to learn more.</p></aside>","isPage":true,"text":"\nThe frontend is a Vite React application. It is a single-page application (SPA) that provides a user interface for the backend services.\nBuilding the vite frontend is a simple process. You can learn more about building in the official Vite documentation here.\nTo build the frontend, run the following command:\nnpm run frontend:build\nYou can deploy your frontend to a static hosting service like Vercel, Netlify, or GitHub Pages.\nHandy TipWouldn&#x27;t it be awesome if your frontend could be deployed to the Permaweb? You can do that with permaweb deployment tool that Create Ao dApp provides.Check out the Deploying to Permaweb guide to learn more.","title":"Building the frontend","titles":[]},"16":{"href":"/frontend-development/connecting-to-backend#connecting-to-backend","html":"<div role=\"doc-subtitle\">In this section, we will learn how to connect the frontend to the backend processes.</div></header>\n","isPage":true,"text":"In this section, we will learn how to connect the frontend to the backend processes.\n","title":"Connecting to Backend","titles":[]},"17":{"href":"/frontend-development/connecting-to-backend#arweave-wallet-kit","html":"\n<ul>\n<li><a href=\"https://github.com/labscommunity/arweave-wallet-kit\">Arweave Wallet Kit</a></li>\n</ul>\n<p>React Hooks and Components for better interaction with Arweave wallets. Modular, can support any Arweave-based wallet.</p>\n<p>By default, Create Ao dApp comes with Arweave Wallet Kit pre-installed. You can use it to interact with Arweave wallets in your frontend.</p>\n<p>Configuration of the Arweave Wallet Kit is present in <code>apps/frontend/src/main.tsx</code>. You can modify the configuration as per your requirements.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed has-focused has-highlighted\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"apps/frontend/src/main.tsx\" data-lang=\"tsx\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { QueryClient, QueryClientProvider } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;@tanstack/react-query&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { ArweaveWalletKit } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;arweave-wallet-kit&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> React </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;react&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ReactDOM </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;react-dom/client&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> App </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;./App.tsx&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;./index.css&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create a React Query client </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> queryClient</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> QueryClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// biome-ignore lint/style/noNonNullAssertion: &lt;explanation&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ReactDOM.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createRoot</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(document.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getElementById</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;root&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">render</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t&lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">React.StrictMode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t&lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">ArweaveWalletKit</span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">\t\t\tconfig</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t\tpermissions: [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;SIGN_TRANSACTION&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ACCESS_ADDRESS&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">], </span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t\tensurePermissions: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t}</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">\t\t\ttheme</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{ </span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t\tdisplayTheme: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;light&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t}</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t&lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">QueryClientProvider</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">queryClient</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t\t&lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">App</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t&lt;/</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">QueryClientProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t&lt;/</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">ArweaveWalletKit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t&lt;/</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">React.StrictMode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\n\nArweave Wallet Kit\n\nReact Hooks and Components for better interaction with Arweave wallets. Modular, can support any Arweave-based wallet.\nBy default, Create Ao dApp comes with Arweave Wallet Kit pre-installed. You can use it to interact with Arweave wallets in your frontend.\nConfiguration of the Arweave Wallet Kit is present in apps/frontend/src/main.tsx. You can modify the configuration as per your requirements.\nimport { QueryClient, QueryClientProvider } from &quot;@tanstack/react-query&quot;;\nimport { ArweaveWalletKit } from &quot;arweave-wallet-kit&quot;; \nimport React from &quot;react&quot;;\nimport ReactDOM from &quot;react-dom/client&quot;;\nimport App from &quot;./App.tsx&quot;;\nimport &quot;./index.css&quot;;\n \n// Create a React Query client \nconst queryClient = new QueryClient();\n \n// biome-ignore lint/style/noNonNullAssertion: &lt;explanation&gt;\nReactDOM.createRoot(document.getElementById(&quot;root&quot;)!).render(\n\t&lt;React.StrictMode&gt;\n\t\t&lt;ArweaveWalletKit\n\t\t\tconfig={{\n\t\t\t\tpermissions: [&quot;SIGN_TRANSACTION&quot;, &quot;ACCESS_ADDRESS&quot;], \n\t\t\t\tensurePermissions: true, \n\t\t\t}}\n\t\t\ttheme={{ \n\t\t\t\tdisplayTheme: &quot;light&quot;, \n\t\t\t}}\n\t\t&gt;\n\t\t\t&lt;QueryClientProvider client={queryClient}&gt;\n\t\t\t\t&lt;App /&gt;\n\t\t\t&lt;/QueryClientProvider&gt;\n\t\t&lt;/ArweaveWalletKit&gt;\n\t&lt;/React.StrictMode&gt;,\n);\n","title":"Arweave Wallet Kit","titles":["Connecting to Backend"]},"18":{"href":"/frontend-development/connecting-to-backend#tanstack-query","html":"\n<p><a href=\"https://tanstack.com/query/latest\">TanStack Query</a> is a powerful and flexible data fetching library for React. It is highly recommended to use TanStack Query for data fetching in your frontend. This will enable caching, pagination, and other features out of the box.</p>\n<p>By default, Create Ao dApp comes with TanStack Query pre-installed. You can use it to fetch data from the backend processes.</p>\n<p>Configuration of the QueryClient is present in <code>apps/frontend/src/main.tsx</code>. You can modify the configuration as per your requirements.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed has-focused has-highlighted\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"apps/frontend/src/main.tsx\" data-lang=\"tsx\"><code><span class=\"line focused highlighted\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { QueryClient, QueryClientProvider } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;@tanstack/react-query&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { ArweaveWalletKit } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;arweave-wallet-kit&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> React </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;react&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ReactDOM </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;react-dom/client&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> App </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;./App.tsx&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;./index.css&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line focused highlighted\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create a React Query client</span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> queryClient</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> QueryClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(); </span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// biome-ignore lint/style/noNonNullAssertion: &lt;explanation&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ReactDOM.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createRoot</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(document.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getElementById</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;root&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">render</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t&lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">React.StrictMode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t&lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">ArweaveWalletKit</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">\t\t\tconfig</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t\tpermissions: [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;SIGN_TRANSACTION&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ACCESS_ADDRESS&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t\tensurePermissions: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t}</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">\t\t\ttheme</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t\tdisplayTheme: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;light&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t}</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t&gt;</span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t&lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">QueryClientProvider</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">queryClient</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t\t&lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">App</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> /&gt;</span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t&lt;/</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">QueryClientProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t&lt;/</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">ArweaveWalletKit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t&lt;/</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">React.StrictMode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nTanStack Query is a powerful and flexible data fetching library for React. It is highly recommended to use TanStack Query for data fetching in your frontend. This will enable caching, pagination, and other features out of the box.\nBy default, Create Ao dApp comes with TanStack Query pre-installed. You can use it to fetch data from the backend processes.\nConfiguration of the QueryClient is present in apps/frontend/src/main.tsx. You can modify the configuration as per your requirements.\nimport { QueryClient, QueryClientProvider } from &quot;@tanstack/react-query&quot;; \nimport { ArweaveWalletKit } from &quot;arweave-wallet-kit&quot;;\nimport React from &quot;react&quot;;\nimport ReactDOM from &quot;react-dom/client&quot;;\nimport App from &quot;./App.tsx&quot;;\nimport &quot;./index.css&quot;;\n \n// Create a React Query client\nconst queryClient = new QueryClient(); \n \n// biome-ignore lint/style/noNonNullAssertion: &lt;explanation&gt;\nReactDOM.createRoot(document.getElementById(&quot;root&quot;)!).render(\n\t&lt;React.StrictMode&gt;\n\t\t&lt;ArweaveWalletKit\n\t\t\tconfig={{\n\t\t\t\tpermissions: [&quot;SIGN_TRANSACTION&quot;, &quot;ACCESS_ADDRESS&quot;],\n\t\t\t\tensurePermissions: true,\n\t\t\t}}\n\t\t\ttheme={{\n\t\t\t\tdisplayTheme: &quot;light&quot;,\n\t\t\t}}\n\t\t&gt;\n\t\t\t&lt;QueryClientProvider client={queryClient}&gt;\n\t\t\t\t&lt;App /&gt;\n\t\t\t&lt;/QueryClientProvider&gt;\n\t\t&lt;/ArweaveWalletKit&gt;\n\t&lt;/React.StrictMode&gt;,\n);\n","title":"TanStack Query","titles":["Connecting to Backend"]},"19":{"href":"/frontend-development/connecting-to-backend#interacting-with-backend-processes","html":"\n<aside data-callout=\"tip\"><strong data-callout-title=\"true\">Handy Tip</strong><p>The backend processes are injected into the frontend as constants. You can access these processes in the frontend by importing them from the <code>constants</code> directory.</p></aside>\n<p>By default the Create Ao dApp comes with a sample <code>counter</code> component that demonstrates how to use the backend process in the frontend. You can use this as a reference to build your own components.</p>\n<ul>\n<li>\n<p>The backend process address is present in <code>apps/frontend/src/constants/counter_process.ts</code>. You can import this process in your components and use it as per your requirements.</p>\n</li>\n<li>\n<p>The counter component is present in <code>apps/frontend/src/components/counter.tsx</code>. You can check out this component to understand how to use the backend process in the frontend.</p>\n</li>\n</ul>\n","isPage":false,"text":"\nHandy TipThe backend processes are injected into the frontend as constants. You can access these processes in the frontend by importing them from the constants directory.\nBy default the Create Ao dApp comes with a sample counter component that demonstrates how to use the backend process in the frontend. You can use this as a reference to build your own components.\n\n\nThe backend process address is present in apps/frontend/src/constants/counter_process.ts. You can import this process in your components and use it as per your requirements.\n\n\nThe counter component is present in apps/frontend/src/components/counter.tsx. You can check out this component to understand how to use the backend process in the frontend.\n\n\n","title":"Interacting with Backend Processes","titles":["Connecting to Backend"]},"20":{"href":"/frontend-development/connecting-to-backend#reading-data-from-backend-process","html":"\n<ul>\n<li>It imports the backend process from the <code>constants</code> directory.</li>\n<li>It uses the <code>useQuery</code> hook from TanStack Query to fetch the counter value from the backend process.</li>\n</ul>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"apps/frontend/src/components/counter.tsx\" data-lang=\"tsx\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { COUNTER } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;../constants/counter_process&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { useMutation, useQuery, useQueryClient } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;@tanstack/react-query&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">\t\tdata</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">counter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">\t\terror</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">\t\tisLoading</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">\t\tisFetching</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> useQuery</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tqueryKey: [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;counter&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">],</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">\t\tqueryFn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\t\t\tconst</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> dryrunResult</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> dryrun</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t\tprocess: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">COUNTER</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t\ttags: [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t\t\t{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t\t\t\tname: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Action&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t\t\t\tvalue: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Info&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t\t\t},</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t\t],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t});</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\t\t\tif</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (dryrunResult.Messages[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].Data) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\t\t\t\treturn</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> JSON</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parse</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(dryrunResult.Messages[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].Data);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\t\t\treturn</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> undefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t},</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t});</span></span></code></pre>\n<p>Using react-query hooks, you can fetch data from the backend processes and update the UI based on the fetched data. The <code>queryFn</code> function is calling the <code>dryrun</code> function from the <code>@permaweb/aoconnect</code> library to fetch the counter value from the backend process and then returns the counter value.</p>\n<aside data-callout=\"tip\"><strong data-callout-title=\"true\">Handy Tip</strong><p>Some cool features of TanStack Query:</p><ul>\n<li><strong>Caching</strong>: Automatically cache data and keep it up to date.</li>\n<li><strong>isLoading</strong>: A boolean that is <code>true</code> when the query is in a loading state.</li>\n<li><strong>isFetching</strong>: A boolean that is <code>true</code> when the query is fetching data.</li>\n<li><strong>error</strong>: An error object if the query failed.</li>\n</ul></aside>\n","isPage":false,"text":"\n\nIt imports the backend process from the constants directory.\nIt uses the useQuery hook from TanStack Query to fetch the counter value from the backend process.\n\nimport { COUNTER } from &quot;../constants/counter_process&quot;;\nimport { useMutation, useQuery, useQueryClient } from &quot;@tanstack/react-query&quot;;\n \nconst {\n\t\tdata: counter,\n\t\terror,\n\t\tisLoading,\n\t\tisFetching,\n\t} = useQuery({\n\t\tqueryKey: [&quot;counter&quot;],\n\t\tqueryFn: async () =&gt; {\n\t\t\tconst dryrunResult = await dryrun({\n\t\t\t\tprocess: COUNTER,\n\t\t\t\ttags: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: &quot;Action&quot;,\n\t\t\t\t\t\tvalue: &quot;Info&quot;,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n \n\t\t\tif (dryrunResult.Messages[0].Data) {\n\t\t\t\treturn JSON.parse(dryrunResult.Messages[0].Data);\n\t\t\t}\n \n\t\t\treturn undefined;\n\t\t},\n\t});\nUsing react-query hooks, you can fetch data from the backend processes and update the UI based on the fetched data. The queryFn function is calling the dryrun function from the @permaweb/aoconnect library to fetch the counter value from the backend process and then returns the counter value.\nHandy TipSome cool features of TanStack Query:\nCaching: Automatically cache data and keep it up to date.\nisLoading: A boolean that is true when the query is in a loading state.\nisFetching: A boolean that is true when the query is fetching data.\nerror: An error object if the query failed.\n\n","title":"Reading Data from Backend Process","titles":["Connecting to Backend"]},"21":{"href":"/frontend-development/connecting-to-backend#sending-data-to-backend-process","html":"\n<p>You can always send messages using <code>useMutation</code> hook provided by TanStack Query. The <code>useMutation</code> hook is used to send messages to the backend processes. You can use this hook to send messages to the backend processes and update the UI based on the response.</p>\n<p>An example is the Increase button in the <code>counter</code> component. When the Increase button is clicked, it sends a message to the backend process to increase the counter value.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"apps/frontend/src/components/counter.tsx\" data-lang=\"tsx\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> increaseCounter</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> useMutation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\tmutationKey: [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;IncreaseCounter&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">],</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">\t\tmutationFn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\t\t\tconst</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> messageId</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> message</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t\tprocess: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">COUNTER</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t\ttags: [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t\t\t{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t\t\t\tname: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Action&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t\t\t\tvalue: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;IncreaseCounter&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t\t\t},</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t\t],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t\tdata: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t\tsigner: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createDataItemSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(window.arweaveWallet),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t});</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\t\t\tconst</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> messageResult</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t\tprocess: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">COUNTER</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t\tmessage: messageId,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t});</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\t\t\tif</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (messageResult.Messages[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].Data) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\t\t\t\treturn</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> JSON</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parse</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(messageResult.Messages[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].Data);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\t}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">\t\t\treturn</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> undefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t},</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">\t\tonSuccess</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t\tqueryClient.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">invalidateQueries</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t\t},</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\t});</span></span></code></pre>\n<p>The <code>mutationFn</code> function is calling the <code>message</code> function from the <code>@permaweb/aoconnect</code> library to send a message to the backend process to increase the counter value. The <code>onSuccess</code> function is used to invalidate the query cache so that the UI can be updated with the new counter value.</p>\n<aside data-callout=\"tip\"><strong data-callout-title=\"true\">Handy Tip</strong><p>Some cool features of TanStack Query:</p><ul>\n<li><strong>mutationFn</strong>: A function that sends a message to the backend process.</li>\n<li><strong>onSuccess</strong>: A function that is called when the mutation is successful.</li>\n<li><strong>invalidateQueries</strong>: A function that invalidates the query cache and re-fetches the data.</li>\n</ul></aside>","isPage":false,"text":"\nYou can always send messages using useMutation hook provided by TanStack Query. The useMutation hook is used to send messages to the backend processes. You can use this hook to send messages to the backend processes and update the UI based on the response.\nAn example is the Increase button in the counter component. When the Increase button is clicked, it sends a message to the backend process to increase the counter value.\nconst increaseCounter = useMutation({\n\t\tmutationKey: [&quot;IncreaseCounter&quot;],\n\t\tmutationFn: async () =&gt; {\n\t\t\tconst messageId = await message({\n\t\t\t\tprocess: COUNTER,\n\t\t\t\ttags: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: &quot;Action&quot;,\n\t\t\t\t\t\tvalue: &quot;IncreaseCounter&quot;,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdata: &quot;&quot;,\n\t\t\t\tsigner: createDataItemSigner(window.arweaveWallet),\n\t\t\t});\n \n\t\t\tconst messageResult = await result({\n\t\t\t\tprocess: COUNTER,\n\t\t\t\tmessage: messageId,\n\t\t\t});\n \n\t\t\tif (messageResult.Messages[0].Data) {\n\t\t\t\treturn JSON.parse(messageResult.Messages[0].Data);\n\t\t\t}\n \n\t\t\treturn undefined;\n\t\t},\n\t\tonSuccess: () =&gt; {\n\t\t\tqueryClient.invalidateQueries();\n\t\t},\n\t});\nThe mutationFn function is calling the message function from the @permaweb/aoconnect library to send a message to the backend process to increase the counter value. The onSuccess function is used to invalidate the query cache so that the UI can be updated with the new counter value.\nHandy TipSome cool features of TanStack Query:\nmutationFn: A function that sends a message to the backend process.\nonSuccess: A function that is called when the mutation is successful.\ninvalidateQueries: A function that invalidates the query cache and re-fetches the data.\n","title":"Sending Data to Backend Process","titles":["Connecting to Backend"]},"22":{"href":"/frontend-development/permaweb-deployment#permaweb-deployment","html":"</header>\n<p>The frontend is a Vite React application. It is a single-page application (SPA) that provides a user interface for the backend services.</p>\n<p>Deploying the frontend to the Permaweb requires the following steps:</p>\n<ul>\n<li>Own a arns domain.</li>\n<li>Have a wallet with enough AR to deploy the frontend.</li>\n<li>Have a funded ArDrive account to deploy the frontend.</li>\n</ul>\n","isPage":true,"text":"\nThe frontend is a Vite React application. It is a single-page application (SPA) that provides a user interface for the backend services.\nDeploying the frontend to the Permaweb requires the following steps:\n\nOwn a arns domain.\nHave a wallet with enough AR to deploy the frontend.\nHave a funded ArDrive account to deploy the frontend.\n\n","title":"Permaweb Deployment","titles":[]},"23":{"href":"/frontend-development/permaweb-deployment#arns-domain","html":"\n<p>You can purchase an arNS domain from the <a href=\"https://arns.app/\">arns website</a>.</p>\n","isPage":false,"text":"\nYou can purchase an arNS domain from the arns website.\n","title":"arNS Domain","titles":["Permaweb Deployment"]},"24":{"href":"/frontend-development/permaweb-deployment#ardrive-account","html":"\n<p>You can learn more about how to create an ArDrive account from the <a href=\"https://docs.ardrive.io/\">ArDrive documentation</a>.</p>\n","isPage":false,"text":"\nYou can learn more about how to create an ArDrive account from the ArDrive documentation.\n","title":"ArDrive Account","titles":["Permaweb Deployment"]},"25":{"href":"/frontend-development/permaweb-deployment#deploying-the-frontend","html":"\n<p>After building your static frontend, you can deploy it to permaweb by using the provided deploy script.</p>\n<p>Learn more about deploying to the Permaweb from the <a href=\"https://docs.ardrive.io/docs/misc/deploy/deploy.html\">ArDrive documentation</a>.</p>\n<p>Also, you can learn more about Permaweb deploy here: <a href=\"https://github.com/permaweb/permaweb-deploy\">https://github.com/permaweb/permaweb-deploy</a></p>\n<p>In order to deploy the frontend to the Permaweb, you need to provide the following environment variables:</p>\n<ul>\n<li><code>DEPLOY_KEY</code>: The key to deploy the frontend. This is the wallet key that owns the arNS domain and has enough AR.</li>\n</ul>\n<aside data-callout=\"warning\"><p>Make sure your DEPLOY_KEY contains the wallet encrypted in base64 format.</p><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">base64</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -i</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> wallet.json</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> pbcopy</span></span></code></pre></aside>\n<ul>\n<li><code>ANT_PROCESS</code>: The ANT process that the frontend will connect to (This is provided by the arNS domain).</li>\n<li><code>UNDERNAME</code>: The undername of the arNS domain that the frontend will be deployed to.</li>\n</ul>\n<p>To deploy the frontend to the Permaweb, you need to run the following command:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> frontend:deploy</span></span></code></pre>\n<p>You can now access the frontend using the arNS domain that you own.</p>\n<aside data-callout=\"tip\"><strong data-callout-title=\"true\">Handy Tip</strong><p>You can use undernames of your arNS domain to deploy multiple environments of the frontend.</p></aside>","isPage":false,"text":"\nAfter building your static frontend, you can deploy it to permaweb by using the provided deploy script.\nLearn more about deploying to the Permaweb from the ArDrive documentation.\nAlso, you can learn more about Permaweb deploy here: https://github.com/permaweb/permaweb-deploy\nIn order to deploy the frontend to the Permaweb, you need to provide the following environment variables:\n\nDEPLOY_KEY: The key to deploy the frontend. This is the wallet key that owns the arNS domain and has enough AR.\n\nMake sure your DEPLOY_KEY contains the wallet encrypted in base64 format.base64 -i wallet.json | pbcopy\n\nANT_PROCESS: The ANT process that the frontend will connect to (This is provided by the arNS domain).\nUNDERNAME: The undername of the arNS domain that the frontend will be deployed to.\n\nTo deploy the frontend to the Permaweb, you need to run the following command:\nnpm run frontend:deploy\nYou can now access the frontend using the arNS domain that you own.\nHandy TipYou can use undernames of your arNS domain to deploy multiple environments of the frontend.","title":"Deploying the Frontend","titles":["Permaweb Deployment"]},"26":{"href":"/process-development/architecture#developing-ao-processes","html":"<div role=\"doc-subtitle\">This section provides an overview of the architecture of AO processes and how they are developed.</div></header>\n<p>In order to develop AO processes and start using Create Ao dApp, you need to have a basic understanding of the following:</p>\n<ul>\n<li><strong>Lua programming language</strong> - AO processes are written in Lua. If you are not familiar with Lua, you can learn the basics from the <a href=\"https://www.lua.org/manual/5.1/\">official Lua documentation</a>.</li>\n<li><strong>ao + aos</strong> - AO processes are executed by the AO. You need to have a basic understanding of how to use the <code>ao</code>. You can learn more about <code>ao</code> from the <a href=\"https://cookbook_ao.g8way.io/welcome/index.html\">official documentation</a></li>\n</ul>\n","isPage":true,"text":"This section provides an overview of the architecture of AO processes and how they are developed.\nIn order to develop AO processes and start using Create Ao dApp, you need to have a basic understanding of the following:\n\nLua programming language - AO processes are written in Lua. If you are not familiar with Lua, you can learn the basics from the official Lua documentation.\nao + aos - AO processes are executed by the AO. You need to have a basic understanding of how to use the ao. You can learn more about ao from the official documentation\n\n","title":"Developing AO Processes","titles":[]},"27":{"href":"/process-development/architecture#process-directory-structure","html":"\n<p>A recommended project structure for developing AO processes is as follows:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed has-focused has-highlighted\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>project-name/             # Your project&#x27;s root directory.</span></span>\n<span class=\"line\"><span>├── ao/                   # The root directory of your ao processes.</span></span>\n<span class=\"line focused highlighted\"><span>│   └── process-name/          # Process Directory.</span></span>\n<span class=\"line focused highlighted\"><span>│       ├── scripts/           # Utility scripts for the process.</span></span>\n<span class=\"line focused highlighted\"><span>|       |   ├── build.sh       # Build script for the process.</span></span>\n<span class=\"line focused highlighted\"><span>│       │   ├── deploy.sh      # Deploy script for the process.</span></span>\n<span class=\"line focused highlighted\"><span>|       |   └── test.sh        # Test script for the process.</span></span>\n<span class=\"line focused highlighted\"><span>│       ├── src/               # Source code for the process.</span></span>\n<span class=\"line focused highlighted\"><span>│       │   ├── test/                   # Entry point for the process.</span></span>\n<span class=\"line focused highlighted\"><span>│       │   │   ├── mocked-env          # Mocked env files to test the process.</span></span>\n<span class=\"line focused highlighted\"><span>|       |   |   ├── setup.lua           # AO Testing Suite setup file.</span></span>\n<span class=\"line focused highlighted\"><span>│       │   │   └── process_test.lua    # Test script for the process.</span></span>\n<span class=\"line focused highlighted\"><span>│       |   ├── process_lib.lua         # Library for the process.</span></span>\n<span class=\"line focused highlighted\"><span>│       |   ├── process.lua             # Entry point for the process.</span></span>\n<span class=\"line focused highlighted\"><span>│       │   └── reset_modules.lua       # Reset preloaded modules</span></span>\n<span class=\"line focused highlighted\"><span>│       ├── aoform.yaml        # Configuration for ao-form deployment.</span></span>\n<span class=\"line focused highlighted\"><span>│       └── squishy            # Squishy configuration for build.</span></span>\n<span class=\"line\"><span>├── apps/             # The root directory of your frontend applications.</span></span>\n<span class=\"line\"><span>│   └── frontend/     # React Vite App connected to ao process.</span></span>\n<span class=\"line\"><span>├── utils             # Directory for utility functions.</span></span>\n<span class=\"line\"><span>│   └── inject-process.ts # Script to inject process Ids from ao to frontend </span></span>\n<span class=\"line\"><span>├── node_modules/</span></span>\n<span class=\"line\"><span>├── .gitignore</span></span>\n<span class=\"line\"><span>├── package.json</span></span>\n<span class=\"line\"><span>├── README.md</span></span>\n<span class=\"line\"><span>└── tsconfig.json</span></span></code></pre>\n<p>Don&#x27;t be overwhelmed by the structure. We will go through each of the directories and files in detail in the following sections.</p>","isPage":false,"text":"\nA recommended project structure for developing AO processes is as follows:\nproject-name/             # Your project&#x27;s root directory.\n├── ao/                   # The root directory of your ao processes.\n│   └── process-name/          # Process Directory.\n│       ├── scripts/           # Utility scripts for the process.\n|       |   ├── build.sh       # Build script for the process.\n│       │   ├── deploy.sh      # Deploy script for the process.\n|       |   └── test.sh        # Test script for the process.\n│       ├── src/               # Source code for the process.\n│       │   ├── test/                   # Entry point for the process.\n│       │   │   ├── mocked-env          # Mocked env files to test the process.\n|       |   |   ├── setup.lua           # AO Testing Suite setup file.\n│       │   │   └── process_test.lua    # Test script for the process.\n│       |   ├── process_lib.lua         # Library for the process.\n│       |   ├── process.lua             # Entry point for the process.\n│       │   └── reset_modules.lua       # Reset preloaded modules\n│       ├── aoform.yaml        # Configuration for ao-form deployment.\n│       └── squishy            # Squishy configuration for build.\n├── apps/             # The root directory of your frontend applications.\n│   └── frontend/     # React Vite App connected to ao process.\n├── utils             # Directory for utility functions.\n│   └── inject-process.ts # Script to inject process Ids from ao to frontend \n├── node_modules/\n├── .gitignore\n├── package.json\n├── README.md\n└── tsconfig.json\nDon&#x27;t be overwhelmed by the structure. We will go through each of the directories and files in detail in the following sections.","title":"Process Directory Structure","titles":["Developing AO Processes"]},"28":{"href":"/process-development/building-with-amalg#building-the-process-using-amalglua","html":"</header>\n<p>This section will guide you through the process of building the process. The process is built using the <code>build</code> script in the <code>process</code> directory. The <code>build</code> script is a simple shell script that uses the <code>amalg.lua</code> script to build the process.</p>\n<aside data-callout=\"info\"><p>Deploying a Lua application that is split among multiple modules is a challenge. A tool that can package a Lua script and its modules into a single file is a valuable help. This is such a tool.</p></aside>\n<p>Learn more about <a href=\"https://github.com/siffiejoe/lua-amalg/\">amalg.lua</a>.</p>\n","isPage":true,"text":"\nThis section will guide you through the process of building the process. The process is built using the build script in the process directory. The build script is a simple shell script that uses the amalg.lua script to build the process.\nDeploying a Lua application that is split among multiple modules is a challenge. A tool that can package a Lua script and its modules into a single file is a valuable help. This is such a tool.\nLearn more about amalg.lua.\n","title":"Building the process using amalg.lua","titles":[]},"29":{"href":"/process-development/building-with-amalg#configuring-build-script","html":"\n<p>Create AO dApp provides a script to build the process using <code>amalg.lua</code>. The configuration for <code>amalg.lua</code> is stored in the <code>scripts/build.sh</code> file in the process directory.</p>\n<p>The configuration specifies the entry point for the process, the modules to include, the minify level, and the output file.</p>\n","isPage":false,"text":"\nCreate AO dApp provides a script to build the process using amalg.lua. The configuration for amalg.lua is stored in the scripts/build.sh file in the process directory.\nThe configuration specifies the entry point for the process, the modules to include, the minify level, and the output file.\n","title":"Configuring build script","titles":["Building the process using amalg.lua"]},"30":{"href":"/process-development/building-with-amalg#building-the-process","html":"\n<p>To build the process, run the following command in the process directory:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">cd</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ao/process-name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> &amp;&amp; </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">./scripts/build.sh</span></span></code></pre>\n<aside data-callout=\"tip\"><strong data-callout-title=\"true\">Handy Tip</strong><p>Create Ao dApp provides a script to build the process from the root of the project. You can run the following command to build the process:</p><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> myprocess:build</span></span></code></pre></aside>","isPage":false,"text":"\nTo build the process, run the following command in the process directory:\ncd ao/process-name &amp;&amp; ./scripts/build.sh\nHandy TipCreate Ao dApp provides a script to build the process from the root of the project. You can run the following command to build the process:npm run myprocess:build","title":"Building the Process","titles":["Building the process using amalg.lua"]},"31":{"href":"/process-development/building-with-squish#building-the-process-using-squishy","html":"</header>\n<p>This section will guide you through the process of building the process. The process is built using the <code>build</code> script in the <code>process</code> directory. The <code>build</code> script is a simple shell script that uses the <code>docker</code> command to build the process.</p>\n<aside data-callout=\"info\"><p>Building processes is done using Squish via Docker. Ensure you have Docker installed on your machine.</p></aside>\n<p>Learn more about <a href=\"https://github.com/LuaDist/squish\">Squish</a>.</p>\n","isPage":true,"text":"\nThis section will guide you through the process of building the process. The process is built using the build script in the process directory. The build script is a simple shell script that uses the docker command to build the process.\nBuilding processes is done using Squish via Docker. Ensure you have Docker installed on your machine.\nLearn more about Squish.\n","title":"Building the process using Squishy","titles":[]},"32":{"href":"/process-development/building-with-squish#configuring-squish","html":"\n<p>Squish is a tool for combining multiple files into a single one. It is used to build the process into a single file. The configuration for Squish is stored in the <code>squishy</code> file in the process directory.</p>\n<p>The basic configuration for Squish is as follows:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"./ao/my-process/squishy\" data-lang=\"lua\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">Main</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;src/process.lua&quot;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">Module</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;process_lib&quot; &quot;./src/process_lib.lua&quot;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">Option</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;minify-level&quot; &quot;none&quot;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">Output</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;build/process.lua&#x27;</span></span></code></pre>\n<p>The configuration specifies the entry point for the process, the modules to include, the minify level, and the output file.</p>\n","isPage":false,"text":"\nSquish is a tool for combining multiple files into a single one. It is used to build the process into a single file. The configuration for Squish is stored in the squishy file in the process directory.\nThe basic configuration for Squish is as follows:\nMain &quot;src/process.lua&quot;\n \nModule &quot;process_lib&quot; &quot;./src/process_lib.lua&quot;\n \nOption &quot;minify-level&quot; &quot;none&quot;\nOutput &#x27;build/process.lua&#x27;\nThe configuration specifies the entry point for the process, the modules to include, the minify level, and the output file.\n","title":"Configuring Squish","titles":["Building the process using Squishy"]},"33":{"href":"/process-development/building-with-squish#building-the-process","html":"\n<p>To build the process, run the following command in the process directory:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">cd</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ao/process-name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> &amp;&amp; </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">./scripts/build.sh</span></span></code></pre>\n<aside data-callout=\"tip\"><strong data-callout-title=\"true\">Handy Tip</strong><p>Create Ao dApp provides a script to build the process from the root of the project. You can run the following command to build the process:</p><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> myprocess:build</span></span></code></pre></aside>","isPage":false,"text":"\nTo build the process, run the following command in the process directory:\ncd ao/process-name &amp;&amp; ./scripts/build.sh\nHandy TipCreate Ao dApp provides a script to build the process from the root of the project. You can run the following command to build the process:npm run myprocess:build","title":"Building the Process","titles":["Building the process using Squishy"]},"34":{"href":"/process-development/deployment#process-deployment","html":"<div role=\"doc-subtitle\">using aoform</div></header>\n<p>This section will guide you through the process of deploying the process using <code>aoform</code>. <code>aoform</code> is a tool for deploying AO processes to the AO Network. The configuration for <code>aoform</code> is stored in the <code>aoform.yaml</code> file in the process directory.</p>\n<aside data-callout=\"info\"><p>Deploying processes is done using <code>aoform</code>. Ensure you have <code>aoform</code> installed on your project.</p><p>Learn more about <a href=\"https://github.com/Autonomous-Finance/aoform\">AOForm</a></p></aside>\n","isPage":true,"text":"using aoform\nThis section will guide you through the process of deploying the process using aoform. aoform is a tool for deploying AO processes to the AO Network. The configuration for aoform is stored in the aoform.yaml file in the process directory.\nDeploying processes is done using aoform. Ensure you have aoform installed on your project.Learn more about AOForm\n","title":"Process deployment","titles":[]},"35":{"href":"/process-development/deployment#configuring-aoform","html":"\n<p>The <code>aoform.yaml</code> file in the process directory contains the configuration for deploying the process using <code>aoform</code>. The basic configuration for <code>aoform</code> is as follows:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"./ao/my-process/aoform.yaml\" data-lang=\"yaml\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">## AoForm Configuration</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">## This file is used to configure the AoForm package</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">## For more information, visit</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- </span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">my-process</span></span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">  file</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">build/process.lua</span></span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">  prerun</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">./src/reset_modules.lua</span></span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">  scheduler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">_GQ33BkPtZrqxA84vM8Zk-N2aO0toNNu_C-l-rawrBA</span></span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">  module</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">GYrbbe0VbHim_7Hi6zrOpHQXrSQz07XNtwCnfbFo2I0</span></span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">  tags</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    - </span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">Name</span></span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">      value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">my-process</span></span></code></pre>\n<p>The configuration specifies the name of the process, the entry point for the process, the prerun script, the scheduler, the module, and the tags for the process.</p>\n","isPage":false,"text":"\nThe aoform.yaml file in the process directory contains the configuration for deploying the process using aoform. The basic configuration for aoform is as follows:\n## AoForm Configuration\n## This file is used to configure the AoForm package\n## For more information, visit\n \n- name: my-process\n  file: build/process.lua\n  prerun: ./src/reset_modules.lua\n  scheduler: _GQ33BkPtZrqxA84vM8Zk-N2aO0toNNu_C-l-rawrBA\n  module: GYrbbe0VbHim_7Hi6zrOpHQXrSQz07XNtwCnfbFo2I0\n  tags:\n    - name: Name\n      value: my-process\nThe configuration specifies the name of the process, the entry point for the process, the prerun script, the scheduler, the module, and the tags for the process.\n","title":"Configuring AOForm","titles":["Process deployment"]},"36":{"href":"/process-development/deployment#deploying-the-process","html":"\n<p>To deploy the process, run the following command in the process directory:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Export the wallet JSON</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">export</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> WALLET_JSON</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;$(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cat</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ~/.aos.json)&quot;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Deploy the process</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">cd</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ao/process-name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> &amp;&amp; </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npx</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> aoform</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> deploy</span></span></code></pre>\n<aside data-callout=\"tip\"><strong data-callout-title=\"true\">Handy Tip</strong><p>Create Ao dApp provides a script to deploy the process from the root of the project. You can run the following command to deploy the process:</p><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> myprocess:deploy</span></span></code></pre></aside>","isPage":false,"text":"\nTo deploy the process, run the following command in the process directory:\n# Export the wallet JSON\nexport WALLET_JSON=&quot;$(cat ~/.aos.json)&quot;\n \n# Deploy the process\ncd ao/process-name &amp;&amp; npx aoform deploy\nHandy TipCreate Ao dApp provides a script to deploy the process from the root of the project. You can run the following command to deploy the process:npm run myprocess:deploy","title":"Deploying the Process","titles":["Process deployment"]},"37":{"href":"/process-development/process-design#process-design","html":"<div role=\"doc-subtitle\">This section provides an overview of the process design and best practices for writing AO processes.</div></header>\n<p>In this section, we will discuss the design principles and best practices for writing AO processes. AO processes are written in Lua, a lightweight, high-level, multi-paradigm programming language. Lua is designed to be embedded in other applications, making it an ideal choice for writing AO processes.</p>\n<p>An over simplified AO token process could look like this, however, try and follow along with the code below. It&#x27;s not really easy to comprehend and follow, but we will break it down and explain how things can be improved in the following sections.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"process.lua\" data-lang=\"lua\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">local</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ao </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> require</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;ao&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Version </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;1.0.0&quot;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">-- token should be idempotent and not change previous state updates</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Balances </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Balances </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">or</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { [ao.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">id</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">TotalSupply </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TotalSupply </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">or</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1000</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Name </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;test token&quot;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Handlers.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;info&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, Handlers.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">utils</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">hasMatchingTag</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Action&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Info&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(msg)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ao.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">send</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Target </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">From</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Tags </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        Name </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Name,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        TotalSuppy </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TotalSupply</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">end</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Handlers.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;balance&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, Handlers.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">utils</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">hasMatchingTag</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Action&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Balance&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(msg)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  local</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> bal </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  -- If not Recipient is provided, then return the Senders balance</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Tags</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Recipient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">then</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (Balances[msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Tags</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Recipient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">then</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      bal </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Balances[msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Tags</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Recipient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    end</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  elseif</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Balances[msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">From</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">then</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    bal </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Balances[msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">From</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  end</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ao.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">send</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Target </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">From</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Tags </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        Balance </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> bal,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        Account </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Tags</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Recipient</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> or</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">From</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> bal</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">end</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Handlers.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;mint&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, Handlers.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">utils</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">hasMatchingTag</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Action&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Mint&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(msg)</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  assert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Quantity</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;string&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Quantity is required!&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  assert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tonumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Quantity</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Quantity must be greater than zero!&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  if</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> not</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Balances[ao.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">id</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">then</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Balances[ao.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">id</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> end</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  -- Add tokens to the token pool, according to Quantity</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  Balances[msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">From</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Balances[msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">From</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tonumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Quantity</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  TotalSupply </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TotalSupply </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tonumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Quantity</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ao.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">send</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Target </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">From</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Colors.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">gray</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ..</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;Successfully minted &quot; </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">..</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Colors.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">blue</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ..</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Quantity</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ..</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Colors.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">reset</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">end</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Handlers.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;burn&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, Handlers.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">utils</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">hasMatchingTag</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Action&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Burn&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(msg)</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  assert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Quantity</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;string&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Quantity is required!&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  assert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">tonumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Quantity</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tonumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Balances[msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">From</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]), </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Quantity must be less than or equal to the current balance!&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  Balances[msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">From</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Balances[msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">From</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tonumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Quantity</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  TotalSupply </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TotalSupply </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tonumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Quantity</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ao.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">send</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Target </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">From</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Colors.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">gray</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ..</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;Successfully burned &quot; </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">..</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Colors.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">blue</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ..</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Quantity</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ..</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Colors.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">reset</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">end</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":true,"text":"This section provides an overview of the process design and best practices for writing AO processes.\nIn this section, we will discuss the design principles and best practices for writing AO processes. AO processes are written in Lua, a lightweight, high-level, multi-paradigm programming language. Lua is designed to be embedded in other applications, making it an ideal choice for writing AO processes.\nAn over simplified AO token process could look like this, however, try and follow along with the code below. It&#x27;s not really easy to comprehend and follow, but we will break it down and explain how things can be improved in the following sections.\nlocal ao = require(&#x27;ao&#x27;)\n \nVersion = &quot;1.0.0&quot;\n \n-- token should be idempotent and not change previous state updates\nBalances = Balances or { [ao.id] = 1000 }\nTotalSupply = TotalSupply or 1000\nName = &quot;test token&quot;\n \nHandlers.add(&#x27;info&#x27;, Handlers.utils.hasMatchingTag(&#x27;Action&#x27;, &#x27;Info&#x27;), function(msg)\n  ao.send({\n    Target = msg.From,\n    Tags = [\n        Name = Name,\n        TotalSuppy = TotalSupply\n    ]\n  })\nend)\n \nHandlers.add(&#x27;balance&#x27;, Handlers.utils.hasMatchingTag(&#x27;Action&#x27;, &#x27;Balance&#x27;), function(msg)\n  local bal = 0\n \n  -- If not Recipient is provided, then return the Senders balance\n  if (msg.Tags.Recipient) then\n    if (Balances[msg.Tags.Recipient]) then\n      bal = Balances[msg.Tags.Recipient]\n    end\n  elseif Balances[msg.From] then\n    bal = Balances[msg.From]\n  end\n \n  ao.send({\n    Target = msg.From,\n    Tags = [\n        Balance = bal,\n        Account = msg.Tags.Recipient or msg.From,\n    ]\n    Data = bal\n  })\nend)\n \nHandlers.add(&#x27;mint&#x27;, Handlers.utils.hasMatchingTag(&#x27;Action&#x27;, &#x27;Mint&#x27;), function(msg)\n  assert(type(msg.Quantity) == &#x27;string&#x27;, &#x27;Quantity is required!&#x27;)\n  assert(0 &lt; tonumber(msg.Quantity), &#x27;Quantity must be greater than zero!&#x27;)\n \n  if not Balances[ao.id] then Balances[ao.id] = 0 end\n \n  -- Add tokens to the token pool, according to Quantity\n  Balances[msg.From] = Balances[msg.From] + tonumber(msg.Quantity)\n  TotalSupply = TotalSupply + tonumber(msg.Quantity)\n \n  ao.send({\n    Target = msg.From,\n    Data = Colors.gray .. &quot;Successfully minted &quot; .. Colors.blue .. msg.Quantity .. Colors.reset\n  })\nend)\n \nHandlers.add(&#x27;burn&#x27;, Handlers.utils.hasMatchingTag(&#x27;Action&#x27;, &#x27;Burn&#x27;), function(msg)\n  assert(type(msg.Quantity) == &#x27;string&#x27;, &#x27;Quantity is required!&#x27;)\n  assert(tonumber(msg.Quantity) &lt;= tonumber(Balances[msg.From]), &#x27;Quantity must be less than or equal to the current balance!&#x27;)\n \n  Balances[msg.From] = Balances[msg.From] - tonumber(msg.Quantity)\n  TotalSupply = TotalSupply - tonumber(msg.Quantity)\n \n  ao.send({\n    Target = msg.From,\n    Data = Colors.gray .. &quot;Successfully burned &quot; .. Colors.blue .. msg.Quantity .. Colors.reset\n  })\nend)\n","title":"Process Design","titles":[]},"38":{"href":"/process-development/process-design#process-design-principles","html":"\n<p>When designing AO processes, it is essential to follow certain design principles to ensure that the processes are efficient, maintainable, and scalable. Here are some key design principles to keep in mind:</p>\n","isPage":false,"text":"\nWhen designing AO processes, it is essential to follow certain design principles to ensure that the processes are efficient, maintainable, and scalable. Here are some key design principles to keep in mind:\n","title":"Process Design Principles","titles":["Process Design"]},"39":{"href":"/process-development/process-design#1-modularity","html":"\n<p>Modularity is the practice of breaking down a system into smaller, independent modules that can be developed, tested, and maintained separately. In the context of AO processes, it is essential to break down the process logic into smaller, reusable components that can be easily combined to create complex processes.</p>\n<p>What we can do is to break down the process into smaller modules, such as <code>balance</code>, <code>transfer</code>, <code>mint</code>, <code>burn</code>, etc. This will make the code more organized and easier to maintain and test.</p>\n<aside data-callout=\"tip\"><strong data-callout-title=\"true\">Handy Tip</strong><p>That&#x27;s why in create-ao-dapp the <code>process.lua</code> file is broken down into <code>process_lib.lua</code> and the entry point file only contains the <code>Handlers</code> and the global variables.</p></aside>\n<p>For displaying porposes we will only break things into <code>process_lib.lua</code> and <code>process.lua</code>.</p>\n<div class=\"code-group\"><div data-title=\"process.lua\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed has-focused has-highlighted\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"process.lua\" data-lang=\"lua\"><code><span class=\"line focused highlighted\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">local</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> process_lib </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> require</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;process_lib&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Version </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;1.0.0&quot;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">-- token should be idempotent and not change previous state updates</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Balances </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Balances </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">or</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { [ao.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">id</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">TotalSupply </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TotalSupply </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">or</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1000</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Name </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;test token&quot;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Handlers.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;info&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Handlers.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">utils</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">hasMatchingTag</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Action&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Info&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    process_lib.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">getInfo</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Handlers.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;balance&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Handlers.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">utils</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">hasMatchingTag</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Action&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Balance&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    process_lib.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">getBalance</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Handlers.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;mint&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Handlers.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">utils</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">hasMatchingTag</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Action&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Mint&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    process_lib.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">mint</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Handlers.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;burn&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Handlers.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">utils</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">hasMatchingTag</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Action&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Burn&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    process_lib.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">burn</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre></div><div data-title=\"process_lib.lua\"><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"process_lib.lua\" data-lang=\"lua\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">local</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ao </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> require</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;ao&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">local</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> process_lib </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> process_lib</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getInfo</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(msg)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ao.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">send</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        Target </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">From</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        Tags </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            Name </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Name,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            TotalSuppy </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TotalSupply</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">end</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> process_lib</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBalance</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(msg)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    local</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> bal </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    -- If not Recipient is provided, then return the Senders balance</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Tags</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Recipient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">then</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (Balances[msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Tags</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Recipient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">then</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            bal </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Balances[msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Tags</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Recipient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        end</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    elseif</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Balances[msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">From</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">then</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        bal </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Balances[msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">From</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    end</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ao.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">send</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        Target </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">From</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        Tags </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            Balance </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> bal,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            Account </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Tags</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Recipient</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> or</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">From</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        Data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> bal</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">end</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> process_lib</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">mint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(msg)</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    assert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Quantity</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;string&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Quantity is required!&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    assert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tonumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Quantity</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Quantity must be greater than zero!&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> not</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Balances[ao.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">id</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">then</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Balances[ao.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">id</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> end</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    -- Add tokens to the token pool, according to Quantity</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Balances[msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">From</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Balances[msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">From</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tonumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Quantity</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    TotalSupply </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TotalSupply </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tonumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Quantity</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ao.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">send</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        Target </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">From</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        Data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Colors.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">gray</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ..</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;Successfully minted &quot; </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">..</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Colors.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">blue</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ..</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Quantity</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ..</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Colors.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">reset</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">end</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> process_lib</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">burn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(msg)</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    assert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Quantity</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;string&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Quantity is required!&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    assert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">tonumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Quantity</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tonumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Balances[msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">From</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]), </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Quantity must be less than or equal to the current balance!&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Balances[msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">From</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Balances[msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">From</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tonumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Quantity</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    TotalSupply </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TotalSupply </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tonumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Quantity</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ao.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">send</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        Target </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">From</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        Data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Colors.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">gray</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ..</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;Successfully burned &quot; </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">..</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Colors.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">blue</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ..</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Quantity</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ..</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Colors.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">reset</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">end</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> process_lib</span></span></code></pre></div></div>\n","isPage":false,"text":"\nModularity is the practice of breaking down a system into smaller, independent modules that can be developed, tested, and maintained separately. In the context of AO processes, it is essential to break down the process logic into smaller, reusable components that can be easily combined to create complex processes.\nWhat we can do is to break down the process into smaller modules, such as balance, transfer, mint, burn, etc. This will make the code more organized and easier to maintain and test.\nHandy TipThat&#x27;s why in create-ao-dapp the process.lua file is broken down into process_lib.lua and the entry point file only contains the Handlers and the global variables.\nFor displaying porposes we will only break things into process_lib.lua and process.lua.\nlocal process_lib = require(&#x27;process_lib&#x27;) \n \nVersion = &quot;1.0.0&quot;\n \n-- token should be idempotent and not change previous state updates\nBalances = Balances or { [ao.id] = 1000 }\nTotalSupply = TotalSupply or 1000\nName = &quot;test token&quot;\n \nHandlers.add(&#x27;info&#x27;, \n    Handlers.utils.hasMatchingTag(&#x27;Action&#x27;, &#x27;Info&#x27;),\n    process_lib.getInfo\n)\n \nHandlers.add(&#x27;balance&#x27;, \n    Handlers.utils.hasMatchingTag(&#x27;Action&#x27;, &#x27;Balance&#x27;),\n    process_lib.getBalance\n)\n \nHandlers.add(&#x27;mint&#x27;, \n    Handlers.utils.hasMatchingTag(&#x27;Action&#x27;, &#x27;Mint&#x27;),\n    process_lib.mint\n)\n \nHandlers.add(&#x27;burn&#x27;, \n    Handlers.utils.hasMatchingTag(&#x27;Action&#x27;, &#x27;Burn&#x27;),\n    process_lib.burn\n)local ao = require(&#x27;ao&#x27;)\nlocal process_lib = {}\n \nfunction process_lib.getInfo(msg)\n    ao.send({\n        Target = msg.From,\n        Tags = {\n            Name = Name,\n            TotalSuppy = TotalSupply\n        }\n    })\nend\n \nfunction process_lib.getBalance(msg)\n    local bal = 0\n \n    -- If not Recipient is provided, then return the Senders balance\n    if (msg.Tags.Recipient) then\n        if (Balances[msg.Tags.Recipient]) then\n            bal = Balances[msg.Tags.Recipient]\n        end\n    elseif Balances[msg.From] then\n        bal = Balances[msg.From]\n    end\n \n    ao.send({\n        Target = msg.From,\n        Tags = {\n            Balance = bal,\n            Account = msg.Tags.Recipient or msg.From,\n        },\n        Data = bal\n    })\nend\n \nfunction process_lib.mint(msg)\n    assert(type(msg.Quantity) == &#x27;string&#x27;, &#x27;Quantity is required!&#x27;)\n    assert(0 &lt; tonumber(msg.Quantity), &#x27;Quantity must be greater than zero!&#x27;)\n \n    if not Balances[ao.id] then Balances[ao.id] = 0 end\n \n    -- Add tokens to the token pool, according to Quantity\n    Balances[msg.From] = Balances[msg.From] + tonumber(msg.Quantity)\n    TotalSupply = TotalSupply + tonumber(msg.Quantity)\n \n    ao.send({\n        Target = msg.From,\n        Data = Colors.gray .. &quot;Successfully minted &quot; .. Colors.blue .. msg.Quantity .. Colors.reset\n    })\nend\n \nfunction process_lib.burn(msg)\n    assert(type(msg.Quantity) == &#x27;string&#x27;, &#x27;Quantity is required!&#x27;)\n    assert(tonumber(msg.Quantity) &lt;= tonumber(Balances[msg.From]), &#x27;Quantity must be less than or equal to the current balance!&#x27;)\n \n    Balances[msg.From] = Balances[msg.From] - tonumber(msg.Quantity)\n    TotalSupply = TotalSupply - tonumber(msg.Quantity)\n \n    ao.send({\n        Target = msg.From,\n        Data = Colors.gray .. &quot;Successfully burned &quot; .. Colors.blue .. msg.Quantity .. Colors.reset\n    })\nend\n \nreturn process_lib\n","title":"1. Modularity","titles":["Process Design","Process Design Principles"]},"40":{"href":"/process-development/process-design#2-separation-of-concerns","html":"\n<p>Separation of concerns is the practice of dividing a system into distinct sections, each responsible for a specific aspect of the system&#x27;s functionality. In the context of AO processes, it is essential to separate the process logic from other concerns, such as input/output handling, error handling, and logging. This makes the code more organized and easier to maintain, test, and debug.</p>\n<p>Continuing with the previous example, we can separate the process logic from the input/output handling by creating separate function to handle replying things to the user.</p>\n<aside data-callout=\"tip\"><strong data-callout-title=\"true\">Handy Tip</strong><p>To enable testing and also having a better flow to respond to user messages and sending replies, we can create a <code>sendReply</code> function that will handle the sending of messages to the user.</p></aside>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed has-focused has-highlighted\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"process_lib.lua\" data-lang=\"lua\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">local</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ao </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> require</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;ao&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">local</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> process_lib </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> process_lib</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getInfo</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(msg)</span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    process_lib.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">sendReply</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(msg, { </span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        Name </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Name, </span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        TotalSuppy </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TotalSupply </span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        Name </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Name,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        TotalSuppy </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TotalSupply</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">end</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> process_lib</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBalance</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(msg)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    local</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> bal </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    -- If not Recipient is provided, then return the Senders balance</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Tags</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Recipient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">then</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (Balances[msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Tags</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Recipient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">then</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            bal </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Balances[msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Tags</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Recipient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        end</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    elseif</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Balances[msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">From</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">then</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        bal </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Balances[msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">From</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    end</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line highlighted\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    process_lib.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">sendReply</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(msg, { </span></span>\n<span class=\"line highlighted\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        Balance </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> bal, </span></span>\n<span class=\"line highlighted\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        Account </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Tags</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Recipient</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> or</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">From</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span></span>\n<span class=\"line highlighted\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }, bal) </span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        Balance </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> bal,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        Account </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Tags</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Recipient</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> or</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">From</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">end</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> process_lib</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">mint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(msg)</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    assert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Quantity</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;string&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Quantity is required!&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    assert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tonumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Quantity</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Quantity must be greater than zero!&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> not</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Balances[ao.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">id</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">then</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Balances[ao.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">id</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> end</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    -- Add tokens to the token pool, according to Quantity</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Balances[msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">From</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Balances[msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">From</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tonumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Quantity</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    TotalSupply </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TotalSupply </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tonumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Quantity</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line highlighted\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    process_lib.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">sendReply</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(msg, {}, Colors.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">gray</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ..</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;Successfully minted &quot; </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">..</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Colors.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">blue</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ..</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Quantity</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ..</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Colors.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">reset</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        Balance </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Balances[msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">From</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">],</span></span>\n<span class=\"line highlighted\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    } </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">end</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> process_lib</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">burn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(msg)</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    assert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Quantity</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;string&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Quantity is required!&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    assert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">tonumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Quantity</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tonumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Balances[msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">From</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]), </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Quantity must be less than or equal to the current balance!&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Balances[msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">From</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Balances[msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">From</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tonumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Quantity</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    TotalSupply </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TotalSupply </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tonumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Quantity</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line highlighted\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    process_lib.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">sendReply</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(msg, {}, Colors.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">gray</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ..</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;Successfully burned &quot; </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">..</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Colors.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">blue</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ..</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Quantity</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ..</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Colors.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">reset</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        Balance </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Balances[msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">From</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">],</span></span>\n<span class=\"line highlighted\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    } </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">end</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line focused highlighted\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> process_lib</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendReply</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(msg, tags, data) </span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ao.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">send</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ </span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        Target </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">From</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Response-For&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> msg.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        Tags </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> tags, </span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        Data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data </span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }) </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">end</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> process_lib</span></span></code></pre>\n<p><code>sendReply</code> is basically just a wrapper around the <code>ao.send</code> function, but it makes the code more readable and easier to maintain. It also allows us to easily test the process logic without having to worry about the input/output handling.</p>\n<aside data-callout=\"tip\"><strong data-callout-title=\"true\">Handy Tip</strong><p>It also introduces a new tag <code>[&quot;Response-For&quot;]</code> which will be used to identify the action that the response is for. This will help in identifying the action that the response is for in the frontend.</p></aside>\n<p>In the next section, we will introduce <a href=\"https://github.com/Autonomous-Finance/ao-process-testing\">Ao Process Testing</a> and discuss how to write unit tests for AO processes to ensure that they are working as expected.</p>","isPage":false,"text":"\nSeparation of concerns is the practice of dividing a system into distinct sections, each responsible for a specific aspect of the system&#x27;s functionality. In the context of AO processes, it is essential to separate the process logic from other concerns, such as input/output handling, error handling, and logging. This makes the code more organized and easier to maintain, test, and debug.\nContinuing with the previous example, we can separate the process logic from the input/output handling by creating separate function to handle replying things to the user.\nHandy TipTo enable testing and also having a better flow to respond to user messages and sending replies, we can create a sendReply function that will handle the sending of messages to the user.\nlocal ao = require(&#x27;ao&#x27;)\nlocal process_lib = {}\n \nfunction process_lib.getInfo(msg)\n    process_lib.sendReply(msg, { \n        Name = Name, \n        TotalSuppy = TotalSupply \n    }, &quot;&quot;) \n \n    return {\n        Name = Name,\n        TotalSuppy = TotalSupply\n    }\nend\n \nfunction process_lib.getBalance(msg)\n    local bal = 0\n \n    -- If not Recipient is provided, then return the Senders balance\n    if (msg.Tags.Recipient) then\n        if (Balances[msg.Tags.Recipient]) then\n            bal = Balances[msg.Tags.Recipient]\n        end\n    elseif Balances[msg.From] then\n        bal = Balances[msg.From]\n    end\n \n    process_lib.sendReply(msg, { \n        Balance = bal, \n        Account = msg.Tags.Recipient or msg.From, \n    }, bal) \n \n    return {\n        Balance = bal,\n        Account = msg.Tags.Recipient or msg.From\n    }\nend\n \nfunction process_lib.mint(msg)\n    assert(type(msg.Quantity) == &#x27;string&#x27;, &#x27;Quantity is required!&#x27;)\n    assert(0 &lt; tonumber(msg.Quantity), &#x27;Quantity must be greater than zero!&#x27;)\n \n    if not Balances[ao.id] then Balances[ao.id] = 0 end\n \n    -- Add tokens to the token pool, according to Quantity\n    Balances[msg.From] = Balances[msg.From] + tonumber(msg.Quantity)\n    TotalSupply = TotalSupply + tonumber(msg.Quantity)\n \n    process_lib.sendReply(msg, {}, Colors.gray .. &quot;Successfully minted &quot; .. Colors.blue .. msg.Quantity .. Colors.reset) \n \n    return {\n        Balance = Balances[msg.From],\n    } \nend\n \nfunction process_lib.burn(msg)\n    assert(type(msg.Quantity) == &#x27;string&#x27;, &#x27;Quantity is required!&#x27;)\n    assert(tonumber(msg.Quantity) &lt;= tonumber(Balances[msg.From]), &#x27;Quantity must be less than or equal to the current balance!&#x27;)\n \n    Balances[msg.From] = Balances[msg.From] - tonumber(msg.Quantity)\n    TotalSupply = TotalSupply - tonumber(msg.Quantity)\n \n    process_lib.sendReply(msg, {}, Colors.gray .. &quot;Successfully burned &quot; .. Colors.blue .. msg.Quantity .. Colors.reset) \n \n    return {\n        Balance = Balances[msg.From],\n    } \nend\n \nfunction process_lib.sendReply(msg, tags, data) \n    ao.send({ \n        Target = msg.From, \n        [&quot;Response-For&quot;] = msg.Action, \n        Tags = tags, \n        Data = data \n    }) \nend\n \nreturn process_lib\nsendReply is basically just a wrapper around the ao.send function, but it makes the code more readable and easier to maintain. It also allows us to easily test the process logic without having to worry about the input/output handling.\nHandy TipIt also introduces a new tag [&quot;Response-For&quot;] which will be used to identify the action that the response is for. This will help in identifying the action that the response is for in the frontend.\nIn the next section, we will introduce Ao Process Testing and discuss how to write unit tests for AO processes to ensure that they are working as expected.","title":"2. Separation of Concerns","titles":["Process Design","Process Design Principles"]},"41":{"href":"/process-development/testing#ao-process-testing","html":"<div role=\"doc-subtitle\">This section provides an overview of how to test AO processes.</div></header>\n<p>In order to test AO processes, you need to have a basic understanding of the following:</p>\n<ul>\n<li><strong>busted</strong> - Busted is a unit testing framework for Lua. You can learn more about Busted from the <a href=\"https://lunarmodules.github.io/busted/\">official documentation</a></li>\n<li><strong>Ao Process Testing Suite</strong> - AO processes are tested using the AO Testing Suite. You can learn more about the AO Testing Suite from the <a href=\"https://github.com/Autonomous-Finance/ao-process-testing\">official documentation</a></li>\n</ul>\n","isPage":true,"text":"This section provides an overview of how to test AO processes.\nIn order to test AO processes, you need to have a basic understanding of the following:\n\nbusted - Busted is a unit testing framework for Lua. You can learn more about Busted from the official documentation\nAo Process Testing Suite - AO processes are tested using the AO Testing Suite. You can learn more about the AO Testing Suite from the official documentation\n\n","title":"AO Process Testing","titles":[]},"42":{"href":"/process-development/testing#process-testing-directory-structure","html":"\n<p>If you generate a new process using the Create Ao dApp, the directory structure of the process will look somewhat like this:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed has-focused has-highlighted\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>process-name/             # Your process&#x27;s root directory.</span></span>\n<span class=\"line\"><span>├── scripts/              # Utility scripts for the process.</span></span>\n<span class=\"line\"><span>│   ├── build.sh          # Build script for the process.</span></span>\n<span class=\"line\"><span>│   ├── deploy.sh         # Deploy script for the process.</span></span>\n<span class=\"line focused highlighted\"><span>│   └── test.sh           # Test script for the process.</span></span>\n<span class=\"line\"><span>└── src/                  # Source code for the process.</span></span>\n<span class=\"line focused highlighted\"><span>    ├── test/             # Test directory for the process.</span></span>\n<span class=\"line focused highlighted\"><span>    │   ├── mocked-env    # Mocked env files to test the process.</span></span>\n<span class=\"line focused highlighted\"><span>    │   ├── setup.lua     # AO Testing Suite setup file.</span></span>\n<span class=\"line focused highlighted\"><span>    │   └── process_test.lua # Test script for the process.</span></span>\n<span class=\"line\"><span>    ├── process_lib.lua   # Library for the process.</span></span>\n<span class=\"line\"><span>    ├── process.lua       # Entry point for the process.</span></span>\n<span class=\"line\"><span>    └── reset_modules.lua # Reset preloaded modules.</span></span></code></pre>\n<p>We will now discuss the contents of the <code>test</code> directory in detail.</p>\n","isPage":false,"text":"\nIf you generate a new process using the Create Ao dApp, the directory structure of the process will look somewhat like this:\nprocess-name/             # Your process&#x27;s root directory.\n├── scripts/              # Utility scripts for the process.\n│   ├── build.sh          # Build script for the process.\n│   ├── deploy.sh         # Deploy script for the process.\n│   └── test.sh           # Test script for the process.\n└── src/                  # Source code for the process.\n    ├── test/             # Test directory for the process.\n    │   ├── mocked-env    # Mocked env files to test the process.\n    │   ├── setup.lua     # AO Testing Suite setup file.\n    │   └── process_test.lua # Test script for the process.\n    ├── process_lib.lua   # Library for the process.\n    ├── process.lua       # Entry point for the process.\n    └── reset_modules.lua # Reset preloaded modules.\nWe will now discuss the contents of the test directory in detail.\n","title":"Process Testing Directory Structure","titles":["AO Process Testing"]},"43":{"href":"/process-development/testing#test-directory","html":"\n<p>The <code>test</code> directory contains the following files:</p>\n<ul>\n<li><strong>mocked-env</strong> - This directory contains the mocked environment files that are used to test the process. The mocked environment files are used to mock the environment variables that are used in the process. The mocked environment files are used to test the process in different environments.</li>\n<li><strong>setup.lua</strong> - This file is used to set up the AO Testing Suite. The setup file is used to set up the AO Testing Suite before running the tests. The setup file is used to set up the environment variables that are used in the process.</li>\n<li><strong>process_test.lua</strong> - This file contains the actual test script and cases for the process.</li>\n</ul>\n","isPage":false,"text":"\nThe test directory contains the following files:\n\nmocked-env - This directory contains the mocked environment files that are used to test the process. The mocked environment files are used to mock the environment variables that are used in the process. The mocked environment files are used to test the process in different environments.\nsetup.lua - This file is used to set up the AO Testing Suite. The setup file is used to set up the AO Testing Suite before running the tests. The setup file is used to set up the environment variables that are used in the process.\nprocess_test.lua - This file contains the actual test script and cases for the process.\n\n","title":"Test Directory","titles":["AO Process Testing"]},"44":{"href":"/process-development/testing#writing-tests","html":"\n<p>Now that you have a basic understanding of the directory structure of the process, let&#x27;s write some tests for the process.</p>\n","isPage":false,"text":"\nNow that you have a basic understanding of the directory structure of the process, let&#x27;s write some tests for the process.\n","title":"Writing tests","titles":["AO Process Testing"]},"45":{"href":"/process-development/testing#writing-a-test-case","html":"\n<p>To write a test case for the process, you need to create a new test case in the <code>process_test.lua</code> file. The test case should be written using the Busted syntax.</p>\n<aside data-callout=\"tip\"><p>Create Ao dApp generates a sample test case for the process. You can modify the sample test case to write your own test cases.</p></aside>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed has-focused has-highlighted\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"process-name/src/test/process_test.lua\" data-lang=\"lua\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">---</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">@diagnostic</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> disable:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> duplicate-set-field</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">require</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;test.setup&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">_G</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">IsInUnitTest</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">    =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> true</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> -- set this per test file to keep ao.send() from doing anything</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">_G</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">VerboseTests</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">    =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 2</span><span style=\"color:#6A737D;--shiki-dark:#768390\">    -- how much logging to see (0 - none at all, 1 - important ones, 2 - everything)</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">-- optional logging function that allows for different verbosity levels</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">_G</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">printVerb</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">       =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> function</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(level)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    level </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> level </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">or</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 2</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> function</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(...) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">-- define here as global so we can use it in application code too</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> _G</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">VerboseTests</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &gt;=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> level </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">then</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> print</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">table.unpack</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> })) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">end</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    end</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">end</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">-- Require the process library and the process file</span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">local</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> process      </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> require</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;process_lib&quot; </span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">-- Define initial state</span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">_G</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Version</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;1.0.0&quot; </span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">_G</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Balances</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> _G</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Balances</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> or</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x123&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> } </span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">_G</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">TotalSupply</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> _G</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">TotalSupply</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> or</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1000</span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">_G</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Name</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;test token&quot; </span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">-- This function resets the global variables to their initial state</span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">local</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> resetGlobals</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> function</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  _G</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Version</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;1.0.0&quot; </span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  _G</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Balances</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> _G</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Balances</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> or</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x123&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> } </span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  _G</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">TotalSupply</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> _G</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">TotalSupply</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> or</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1000</span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  _G</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Name</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;test token&quot; </span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">end</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line focused highlighted\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">describe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;token process&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    setup</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        -- Mock the sendReply function</span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        process.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendReply</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> function</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(message) </span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> message </span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        end</span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    end</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line focused highlighted\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    describe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;getBalance&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        it</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;should return correct Balance&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            local</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> message </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                From </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;0x123&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                Action </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;Balance&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                Tags </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {} </span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            } </span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line focused highlighted\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            local</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> response </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> process.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">getBalance</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(message) </span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">            assert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">are</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">same</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, response.</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">Balance</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            -- reset globals</span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">            resetGlobals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        end</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    end</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span></span>\n<span class=\"line focused highlighted\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">end</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span></span></code></pre>\n","isPage":false,"text":"\nTo write a test case for the process, you need to create a new test case in the process_test.lua file. The test case should be written using the Busted syntax.\nCreate Ao dApp generates a sample test case for the process. You can modify the sample test case to write your own test cases.\n---@diagnostic disable: duplicate-set-field\nrequire(&quot;test.setup&quot;)()\n \n_G.IsInUnitTest    = true -- set this per test file to keep ao.send() from doing anything\n_G.VerboseTests    = 2    -- how much logging to see (0 - none at all, 1 - important ones, 2 - everything)\n-- optional logging function that allows for different verbosity levels\n_G.printVerb       = function(level)\n    level = level or 2\n    return function(...) -- define here as global so we can use it in application code too\n        if _G.VerboseTests &gt;= level then print(table.unpack({ ... })) end\n    end\nend\n \n \n-- Require the process library and the process file\nlocal process      = require &quot;process_lib&quot; \n \n-- Define initial state\n_G.Version = &quot;1.0.0&quot; \n_G.Balances = _G.Balances or { [&quot;0x123&quot;] = 1000 } \n_G.TotalSupply = _G.TotalSupply or 1000\n_G.Name = &quot;test token&quot; \n \n-- This function resets the global variables to their initial state\nlocal resetGlobals = function() \n  _G.Version = &quot;1.0.0&quot; \n  _G.Balances = _G.Balances or { [&quot;0x123&quot;] = 1000 } \n  _G.TotalSupply = _G.TotalSupply or 1000\n  _G.Name = &quot;test token&quot; \nend\n \ndescribe(&quot;token process&quot;, function() \n    setup(function() \n        -- Mock the sendReply function\n        process.sendReply = function(message) \n            return message \n        end\n    end) \n \n    describe(&quot;getBalance&quot;, function() \n        it(&quot;should return correct Balance&quot;, function() \n            local message = { \n                From = &quot;0x123&quot;, \n                Action = &quot;Balance&quot;, \n                Tags = {} \n            } \n \n            local response = process.getBalance(message) \n            assert.are.same(1000, response.Balance) \n \n            -- reset globals\n            resetGlobals() \n        end) \n    end) \nend) \n","title":"Writing a test case","titles":["AO Process Testing","Writing tests"]},"46":{"href":"/process-development/testing#running-the-tests","html":"\n<aside data-callout=\"warning\"><strong data-callout-title=\"true\">Busted is required</strong><p>In order to write tests for AO processes, you need to have a basic understanding of Busted. You can learn more about Busted from the <a href=\"https://lunarmodules.github.io/busted/\">official documentation</a>.</p><p>Installing busted can be done using luarocks by running the following command:</p><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">luarocks</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> busted</span></span></code></pre></aside>\n<p>Create Ao dApp provides a test script that can be used to run the tests for the process. The test script is located in the <code>./ao/process-name/scripts</code> directory of the process.</p>\n<p>To run the tests for the process, you need to run the test script using the following command from the project root:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">cd</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ao/process-name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> &amp;&amp; </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">./scripts/test.sh</span></span></code></pre>\n<aside data-callout=\"tip\"><strong data-callout-title=\"true\">Handy Tip</strong><p>Create Ao dApp provides a shortcut to run the tests for the process. You can run the tests for the process using the following command from the project root:</p><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\" data-title=\"Terminal\" data-lang=\"bash\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> myprocess:test</span></span></code></pre></aside>","isPage":false,"text":"\nBusted is requiredIn order to write tests for AO processes, you need to have a basic understanding of Busted. You can learn more about Busted from the official documentation.Installing busted can be done using luarocks by running the following command:luarocks install busted\nCreate Ao dApp provides a test script that can be used to run the tests for the process. The test script is located in the ./ao/process-name/scripts directory of the process.\nTo run the tests for the process, you need to run the test script using the following command from the project root:\ncd ao/process-name &amp;&amp; ./scripts/test.sh\nHandy TipCreate Ao dApp provides a shortcut to run the tests for the process. You can run the tests for the process using the following command from the project root:npm run myprocess:test","title":"Running the tests","titles":["AO Process Testing","Writing tests"]}},"dirtCount":0,"index":[["just",{"2":{"40":1}}],["json=",{"2":{"36":1}}],["json",{"2":{"7":2,"8":1,"14":2,"20":1,"21":1,"25":1,"27":2,"36":2}}],["2",{"0":{"40":1},"2":{"45":3}}],["zero",{"2":{"37":1,"39":1,"40":1}}],["1000",{"2":{"37":2,"39":2,"45":5}}],["1",{"0":{"39":1},"2":{"37":1,"39":1,"45":3}}],["~",{"2":{"36":1}}],["$",{"2":{"36":1}}],["7hi6zrophqxrsqz07xntwcnfbfo2i0",{"2":{"35":1}}],["+",{"2":{"26":1,"37":2,"39":2,"40":2}}],["key",{"2":{"25":4,"38":1}}],["keep",{"2":{"20":1,"38":1,"45":1}}],["kit",{"0":{"17":1},"2":{"10":1,"13":1,"17":4,"18":1}}],["0x123",{"2":{"45":3}}],["0",{"2":{"20":2,"21":2,"37":5,"39":5,"40":3,"45":5}}],["\t\tonsuccess",{"2":{"21":1}}],["\t\tmutationfn",{"2":{"21":1}}],["\t\tmutationkey",{"2":{"21":1}}],["\t\tqueryfn",{"2":{"20":1}}],["\t\tquerykey",{"2":{"20":1}}],["\t\tisfetching",{"2":{"20":1}}],["\t\tisloading",{"2":{"20":1}}],["\t\terror",{"2":{"20":1}}],["\t\tdata",{"2":{"20":1}}],["\t\t\tqueryclient",{"2":{"21":1}}],["\t\t\treturn",{"2":{"20":1,"21":1}}],["\t\t\tif",{"2":{"20":1,"21":1}}],["\t\t\tconst",{"2":{"20":1,"21":2}}],["\t\t\tconfig=",{"2":{"17":1,"18":1}}],["\t\t\ttheme=",{"2":{"17":1,"18":1}}],["\t\t\t",{"2":{"17":4,"18":4,"20":2,"21":3}}],["\t\t\t\tmessage",{"2":{"21":1}}],["\t\t\t\tsigner",{"2":{"21":1}}],["\t\t\t\tdata",{"2":{"21":1}}],["\t\t\t\tdisplaytheme",{"2":{"17":1,"18":1}}],["\t\t\t\treturn",{"2":{"20":1,"21":1}}],["\t\t\t\t\t\tvalue",{"2":{"20":1,"21":1}}],["\t\t\t\t\t\tname",{"2":{"20":1,"21":1}}],["\t\t\t\t\t",{"2":{"20":2,"21":2}}],["\t\t\t\ttags",{"2":{"20":1,"21":1}}],["\t\t\t\tprocess",{"2":{"20":1,"21":2}}],["\t\t\t\tpermissions",{"2":{"17":1,"18":1}}],["\t\t\t\t",{"2":{"17":1,"18":1,"20":1,"21":1}}],["\t\t\t\tensurepermissions",{"2":{"17":1,"18":1}}],["\t\t",{"2":{"17":3,"18":3,"20":1,"21":2}}],["\t",{"2":{"17":2,"18":2,"20":2,"21":1}}],["==",{"2":{"37":2,"39":2,"40":2}}],["=",{"2":{"17":1,"18":1,"20":3,"21":5,"37":28,"39":30,"40":25,"45":23}}],["quantity",{"2":{"37":15,"39":15,"40":15}}],["quot",{"2":{"17":20,"18":20,"20":10,"21":8,"32":10,"36":2,"37":8,"39":8,"40":10,"45":26}}],["queryfn",{"2":{"20":1}}],["queryclientprovider",{"2":{"17":3,"18":3}}],["queryclient",{"2":{"17":4,"18":5}}],["query",{"0":{"18":1},"2":{"13":3,"17":2,"18":5,"20":7,"21":4}}],["questions",{"2":{"9":1}}],["|",{"2":{"14":4,"25":1,"27":9}}],["high",{"2":{"37":1}}],["highly",{"2":{"13":1,"18":1}}],["https",{"2":{"25":1}}],["html",{"2":{"14":3}}],["hook",{"2":{"20":1,"21":3}}],["hooks",{"2":{"17":1,"20":1}}],["hosting",{"2":{"15":1}}],["however",{"2":{"37":1}}],["how",{"2":{"9":1,"14":1,"16":1,"19":2,"24":1,"26":2,"37":1,"40":1,"41":1,"45":1}}],["here",{"2":{"15":1,"25":1,"38":1,"45":1}}],["help",{"2":{"9":1,"28":1,"40":1}}],["having",{"2":{"40":2}}],["have",{"2":{"7":1,"9":1,"22":2,"26":2,"31":1,"34":1,"41":1,"44":1,"46":1}}],["handle",{"2":{"40":2}}],["handlers",{"2":{"37":8,"39":9}}],["handling",{"2":{"40":4}}],["handy",{"2":{"13":1,"15":1,"19":1,"20":1,"21":1,"25":1,"30":1,"33":1,"36":1,"39":1,"40":2,"46":1}}],["hasmatchingtag",{"2":{"37":4,"39":4}}],["has",{"2":{"25":1}}],["g",{"2":{"45":16}}],["generates",{"2":{"45":1}}],["generate",{"2":{"42":1}}],["getbalance",{"2":{"39":2,"40":1,"45":2}}],["getinfo",{"2":{"39":2,"40":1}}],["getelementbyid",{"2":{"17":1,"18":1}}],["get",{"2":{"0":1}}],["getting",{"0":{"0":1},"1":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1}}],["globals",{"2":{"45":1}}],["global",{"2":{"39":1,"45":2}}],["gray",{"2":{"37":2,"39":2,"40":2}}],["greater",{"2":{"37":1,"39":1,"40":1}}],["gyrbbe0vbhim",{"2":{"35":1}}],["gq33bkptzrqxa84vm8zk",{"2":{"35":1}}],["go",{"2":{"27":1}}],["gt",{"2":{"17":8,"18":8,"20":1,"21":2,"45":1}}],["guide",{"2":{"15":1,"28":1,"31":1,"34":1}}],["github",{"2":{"15":1,"25":1}}],["gitignore",{"2":{"7":1,"14":1,"27":1}}],["npx",{"2":{"36":1}}],["npm",{"2":{"15":1,"25":1,"30":1,"33":1,"36":1,"46":1}}],["n2ao0tonnu",{"2":{"35":1}}],["network",{"2":{"34":1}}],["netlify",{"2":{"15":1}}],["new",{"2":{"17":1,"18":1,"21":1,"40":1,"42":1,"45":1}}],["needed",{"2":{"11":1}}],["need",{"2":{"9":1,"25":2,"26":2,"41":1,"45":1,"46":2}}],["next",{"0":{"9":1},"2":{"40":1}}],["none",{"2":{"32":1,"45":1}}],["nononnullassertion",{"2":{"17":1,"18":1}}],["not",{"2":{"26":1,"37":4,"39":3,"40":2}}],["now",{"2":{"9":1,"25":1,"42":1,"44":1}}],["node",{"2":{"7":1,"27":1}}],["naming",{"2":{"3":1}}],["names",{"2":{"3":1}}],["name",{"0":{"2":1,"3":1},"2":{"3":2,"7":2,"27":2,"30":1,"33":1,"35":4,"36":1,"37":3,"39":3,"40":4,"42":1,"45":2,"46":2}}],["yaml",{"2":{"7":1,"27":1,"34":1,"35":1}}],["your",{"0":{"2":1},"2":{"1":1,"2":1,"3":2,"5":2,"7":5,"8":1,"9":1,"11":2,"13":1,"14":4,"15":2,"17":2,"18":2,"19":3,"25":3,"27":3,"31":1,"34":1,"42":1,"45":1}}],["you",{"0":{"5":1},"2":{"0":1,"1":1,"3":3,"4":1,"5":1,"6":1,"7":1,"9":2,"11":4,"13":1,"14":1,"15":3,"17":2,"18":2,"19":4,"20":1,"21":2,"23":1,"24":1,"25":6,"26":5,"28":1,"30":1,"31":2,"33":1,"34":2,"36":1,"41":3,"42":1,"44":1,"45":2,"46":4}}],["└──",{"2":{"7":7,"14":4,"27":8,"42":4}}],["│",{"2":{"7":14,"14":7,"27":21,"42":6}}],["├──src",{"2":{"14":1}}],["├──public",{"2":{"14":1}}],["├──",{"2":{"7":11,"14":12,"27":17,"42":8}}],["x27",{"2":{"7":1,"14":2,"15":1,"27":2,"32":2,"37":39,"39":41,"40":15,"42":1,"44":1}}],["verbosity",{"2":{"45":1}}],["verbosetests",{"2":{"45":2}}],["version",{"2":{"37":1,"39":1,"45":2}}],["vercel",{"2":{"15":1}}],["visit",{"2":{"35":1}}],["via",{"2":{"31":1}}],["vite",{"2":{"6":2,"7":1,"13":2,"14":4,"15":3,"22":1,"27":1}}],["variables",{"2":{"25":1,"39":1,"43":2,"45":1}}],["valuable",{"2":{"28":1}}],["value",{"2":{"20":3,"21":3,"35":1}}],["valid",{"2":{"3":1}}],["pbcopy",{"2":{"25":1}}],["purchase",{"2":{"23":1}}],["public",{"2":{"14":1}}],["per",{"2":{"17":1,"18":1,"19":1,"45":1}}],["permaweb",{"0":{"22":1},"1":{"23":1,"24":1,"25":1},"2":{"11":2,"13":1,"15":3,"20":1,"21":1,"22":1,"25":7}}],["porposes",{"2":{"39":1}}],["pool",{"2":{"37":1,"39":1,"40":1}}],["powerful",{"2":{"13":1,"18":1}}],["point",{"2":{"7":2,"14":1,"27":2,"29":1,"32":1,"35":1,"39":1,"42":1}}],["paradigm",{"2":{"37":1}}],["parse",{"2":{"20":1,"21":1}}],["pagination",{"2":{"13":1,"18":1}}],["pages",{"2":{"15":1}}],["page",{"2":{"13":1,"15":1,"22":1}}],["package",{"2":{"7":1,"8":1,"14":1,"27":1,"28":1,"35":1}}],["print",{"2":{"45":1}}],["printverb",{"2":{"45":1}}],["principles",{"0":{"38":1},"1":{"39":1,"40":1},"2":{"37":1,"38":2}}],["practice",{"2":{"39":1,"40":1}}],["practices",{"2":{"37":2}}],["previous",{"2":{"37":1,"39":1,"40":1}}],["prerun",{"2":{"35":2}}],["preloaded",{"2":{"27":1,"42":1}}],["present",{"2":{"14":1,"17":1,"18":1,"19":2}}],["pre",{"2":{"10":1,"17":1,"18":1}}],["preconfigured",{"0":{"8":1},"2":{"8":1}}],["programming",{"2":{"26":1,"37":1}}],["providing",{"2":{"10":1}}],["provided",{"2":{"13":1,"21":1,"25":2,"37":1,"39":1,"40":1}}],["provides",{"2":{"10":1,"13":1,"15":2,"22":1,"26":1,"29":1,"30":1,"33":1,"36":1,"37":1,"41":1,"46":2}}],["provide",{"2":{"3":1,"25":1}}],["processes",{"0":{"19":1,"26":1},"1":{"27":1},"2":{"7":2,"9":1,"10":2,"11":3,"16":1,"18":1,"19":2,"20":1,"21":2,"26":4,"27":2,"31":1,"34":2,"37":4,"38":2,"39":2,"40":2,"41":3,"46":1}}],["process",{"0":{"3":1,"4":1,"20":1,"21":1,"27":1,"28":1,"30":1,"31":1,"33":1,"34":1,"36":1,"37":1,"38":1,"41":1,"42":1},"1":{"29":1,"30":1,"32":1,"33":1,"35":1,"36":1,"38":1,"39":2,"40":2,"42":1,"43":1,"44":1,"45":1,"46":1},"2":{"3":4,"4":3,"5":4,"7":12,"8":3,"10":1,"11":1,"14":4,"15":1,"19":5,"20":4,"21":3,"25":2,"27":18,"28":5,"29":3,"30":5,"31":5,"32":7,"33":5,"34":3,"35":8,"36":6,"37":2,"39":18,"40":15,"41":1,"42":17,"43":6,"44":2,"45":10,"46":7}}],["prompt",{"2":{"1":1}}],["project",{"0":{"1":1,"2":1,"6":1,"7":1,"12":1},"1":{"2":1,"3":1,"4":1,"5":1,"6":1},"2":{"1":1,"2":2,"7":3,"8":1,"14":2,"27":3,"30":1,"33":1,"34":1,"36":1,"46":2}}],["pick",{"0":{"4":1,"6":1}}],["located",{"2":{"46":1}}],["local",{"2":{"37":2,"39":4,"40":3,"45":4}}],["logging",{"2":{"40":1,"45":2}}],["logic",{"2":{"39":1,"40":3}}],["look",{"2":{"37":1,"42":1}}],["loading",{"2":{"20":1}}],["l",{"2":{"35":1}}],["let",{"2":{"44":1}}],["less",{"2":{"37":1,"39":1,"40":1}}],["levels",{"2":{"45":1}}],["level",{"2":{"29":1,"32":2,"37":1,"45":4}}],["learn",{"2":{"15":2,"16":1,"24":1,"25":2,"26":2,"28":1,"31":1,"34":1,"41":2,"46":1}}],["lt",{"2":{"17":8,"18":8,"37":2,"39":2,"40":2}}],["lib",{"2":{"27":1,"32":2,"39":14,"40":11,"42":1,"45":1}}],["library",{"2":{"13":1,"18":1,"20":1,"21":1,"27":1,"42":1,"45":1}}],["libraries",{"2":{"13":1}}],["lightweight",{"2":{"37":1}}],["light",{"2":{"17":1,"18":1}}],["lint",{"2":{"17":1,"18":1}}],["like",{"2":{"3":1,"15":1,"37":1,"42":1}}],["language",{"2":{"4":1,"26":1,"37":1}}],["luarocks",{"2":{"46":2}}],["lua",{"0":{"28":1},"1":{"29":1,"30":1},"2":{"3":1,"4":3,"7":2,"26":4,"27":5,"28":4,"29":2,"32":3,"35":2,"37":2,"39":4,"41":1,"42":5,"43":2,"45":1}}],["optional",{"2":{"45":1}}],["option",{"2":{"32":1}}],["options",{"2":{"7":1}}],["over",{"2":{"37":1}}],["overwhelmed",{"2":{"27":1}}],["overview",{"2":{"26":1,"37":1,"41":1}}],["object",{"2":{"20":1}}],["owns",{"2":{"25":1}}],["own",{"2":{"14":1,"19":1,"22":1,"25":1,"45":1}}],["other",{"2":{"13":1,"18":1,"37":1,"40":1}}],["output",{"2":{"29":1,"32":2,"40":3}}],["out",{"2":{"9":1,"13":1,"15":1,"18":1,"19":1}}],["organized",{"2":{"39":1,"40":1}}],["order",{"2":{"25":1,"26":1,"41":1,"46":1}}],["or",{"2":{"9":1,"15":1,"37":4,"39":4,"40":3,"45":5}}],["onsuccess",{"2":{"21":2}}],["on",{"2":{"9":2,"20":1,"21":1,"31":1,"34":1}}],["ones",{"2":{"45":1}}],["one",{"2":{"5":1,"32":1}}],["only",{"2":{"3":1,"39":2}}],["official",{"2":{"15":1,"26":2,"41":2,"46":1}}],["of",{"0":{"2":1,"40":1},"2":{"7":4,"8":1,"9":1,"10":1,"13":1,"14":2,"17":1,"18":2,"20":1,"21":1,"25":3,"26":4,"27":3,"28":1,"30":1,"31":1,"33":1,"34":1,"35":1,"36":1,"37":1,"39":2,"40":5,"41":2,"42":2,"44":2,"46":2}}],["improved",{"2":{"37":1}}],["imports",{"2":{"20":1}}],["importing",{"2":{"19":1}}],["import",{"2":{"17":6,"18":6,"19":1,"20":2}}],["important",{"2":{"3":1,"45":1}}],["i",{"2":{"25":1}}],["ignore",{"2":{"17":1,"18":1}}],["if",{"2":{"9":1,"15":1,"20":1,"26":1,"37":4,"39":4,"40":4,"42":1,"45":1}}],["id",{"2":{"37":3,"39":3,"40":2}}],["identifying",{"2":{"40":1}}],["identify",{"2":{"40":1}}],["identifier",{"2":{"3":1}}],["idempotent",{"2":{"37":1,"39":1}}],["ideal",{"2":{"37":1}}],["ids",{"2":{"7":1,"27":1}}],["its",{"2":{"28":1}}],["it",{"2":{"3":1,"13":2,"15":2,"17":1,"18":2,"19":1,"20":3,"21":1,"22":1,"25":1,"32":1,"37":3,"38":1,"39":1,"40":3,"45":2}}],["isinunittest",{"2":{"45":1}}],["isfetching",{"2":{"20":1}}],["isloading",{"2":{"20":1}}],["is",{"2":{"3":1,"11":1,"13":5,"14":2,"15":3,"17":1,"18":3,"19":2,"20":5,"21":7,"22":2,"25":2,"27":1,"28":6,"29":1,"31":3,"32":4,"34":3,"35":2,"37":4,"38":1,"39":7,"40":8,"41":1,"43":3,"46":2}}],["install",{"2":{"46":1}}],["installing",{"2":{"46":1}}],["installed",{"2":{"17":1,"18":1,"31":1,"34":1}}],["input",{"2":{"40":3}}],["independent",{"2":{"39":1}}],["index",{"2":{"14":3,"17":1,"18":1}}],["invalidates",{"2":{"21":1}}],["invalidate",{"2":{"21":1}}],["invalidatequeries",{"2":{"21":2}}],["increasecounter",{"2":{"21":3}}],["increase",{"2":{"21":4}}],["including",{"2":{"10":1}}],["includes",{"2":{"7":1,"8":1,"11":3}}],["include",{"0":{"5":1},"2":{"1":1,"5":2,"14":1,"29":1,"32":1}}],["info",{"2":{"20":1,"37":2,"39":2}}],["information",{"2":{"9":1,"35":1}}],["introduce",{"2":{"40":1}}],["introduces",{"2":{"40":1}}],["interacting",{"0":{"19":1}}],["interaction",{"2":{"17":1}}],["interact",{"2":{"17":1}}],["interface",{"2":{"13":1,"15":1,"22":1}}],["into",{"2":{"5":1,"11":1,"19":1,"28":1,"32":2,"39":5,"40":1}}],["in",{"2":{"8":1,"13":2,"14":3,"15":1,"16":1,"17":2,"18":2,"19":6,"20":1,"21":1,"25":2,"26":2,"27":2,"28":1,"29":2,"30":1,"31":1,"32":2,"33":1,"34":2,"35":1,"36":1,"37":4,"38":1,"39":2,"40":4,"41":1,"42":1,"43":3,"45":2,"46":1}}],["injected",{"2":{"14":1,"19":1}}],["inject",{"2":{"7":2,"27":2}}],["initial",{"2":{"45":2}}],["init",{"2":{"0":1}}],["field",{"2":{"45":1}}],["file",{"2":{"8":1,"14":5,"27":1,"28":1,"29":2,"32":3,"34":1,"35":3,"39":2,"42":1,"43":4,"45":3}}],["files",{"2":{"3":2,"5":1,"27":2,"32":1,"42":1,"43":4}}],["flow",{"2":{"40":1}}],["flexible",{"2":{"13":1,"18":1}}],["familiar",{"2":{"26":1}}],["failed",{"2":{"20":1}}],["funded",{"2":{"22":1}}],["functionality",{"2":{"40":1}}],["function",{"2":{"20":2,"21":6,"37":4,"39":4,"40":8,"45":11}}],["functions",{"2":{"7":2,"27":1}}],["fetches",{"2":{"21":1}}],["fetched",{"2":{"20":1}}],["fetch",{"2":{"18":1,"20":3}}],["fetching",{"2":{"13":2,"18":2,"20":1}}],["feel",{"2":{"9":1}}],["features",{"0":{"5":1,"11":1},"2":{"5":1,"13":1,"18":1,"20":1,"21":1}}],["free",{"2":{"9":1}}],["frameworks",{"2":{"6":1}}],["framework",{"0":{"6":1},"2":{"41":1}}],["frontend",{"0":{"6":1,"13":1,"15":1,"25":1},"1":{"14":1},"2":{"6":1,"7":4,"8":4,"9":1,"13":4,"14":8,"15":6,"16":1,"17":2,"18":2,"19":6,"22":4,"25":9,"27":3,"40":1}}],["from",{"0":{"20":1},"2":{"4":1,"5":1,"6":1,"7":1,"17":5,"18":6,"19":1,"20":8,"21":1,"23":1,"24":1,"25":1,"26":2,"27":1,"30":1,"33":1,"36":1,"37":12,"39":12,"40":14,"41":2,"45":2,"46":3}}],["follows",{"2":{"14":1,"27":1,"32":1,"35":1}}],["follow",{"2":{"9":1,"37":2,"38":1}}],["following",{"2":{"0":1,"4":1,"5":1,"6":1,"7":2,"8":1,"13":1,"15":1,"22":1,"25":2,"26":1,"27":1,"30":2,"33":2,"36":2,"37":1,"41":1,"43":1,"46":3}}],["format",{"2":{"25":1}}],["form",{"2":{"5":1,"7":1,"27":1}}],["for",{"2":{"2":1,"5":3,"7":9,"8":2,"9":1,"10":1,"13":3,"14":3,"15":1,"17":1,"18":2,"22":1,"27":13,"29":2,"32":4,"34":2,"35":5,"37":3,"39":1,"40":6,"41":1,"42":9,"43":1,"44":1,"45":3,"46":5}}],["working",{"2":{"40":1}}],["worry",{"2":{"40":1}}],["wrapper",{"2":{"40":1}}],["write",{"2":{"40":1,"44":1,"45":2,"46":1}}],["writing",{"0":{"44":1,"45":1},"1":{"45":1,"46":1},"2":{"37":3}}],["written",{"2":{"26":1,"37":1,"45":1}}],["which",{"2":{"40":1}}],["why",{"2":{"39":1}}],["when",{"2":{"20":2,"21":2,"38":1}}],["what",{"0":{"3":1},"2":{"39":1}}],["wallets",{"2":{"17":2}}],["wallet",{"0":{"17":1},"2":{"13":1,"17":5,"18":1,"22":1,"25":3,"36":2}}],["want",{"0":{"5":1}}],["website",{"2":{"23":1}}],["we",{"0":{"3":1},"2":{"13":1,"16":1,"27":1,"37":2,"39":2,"40":3,"42":1,"45":1}}],["window",{"2":{"21":1}}],["will",{"2":{"1":1,"2":1,"3":2,"7":1,"13":1,"14":1,"16":1,"18":1,"25":2,"27":1,"28":1,"31":1,"34":1,"37":2,"39":2,"40":4,"42":2}}],["without",{"2":{"40":1}}],["within",{"0":{"4":1,"6":1}}],["with",{"0":{"19":1},"2":{"0":1,"9":1,"11":2,"14":1,"15":1,"17":3,"18":1,"19":1,"21":1,"22":1,"26":1,"37":1,"40":1}}],["mind",{"2":{"38":1}}],["minted",{"2":{"37":1,"39":1,"40":1}}],["mint",{"2":{"37":2,"39":5,"40":1}}],["minify",{"2":{"29":1,"32":2}}],["msg",{"2":{"37":30,"39":30,"40":37}}],["making",{"2":{"37":1}}],["makes",{"2":{"40":2}}],["make",{"2":{"25":1,"39":1}}],["machine",{"2":{"31":1}}],["maintain",{"2":{"39":1,"40":2}}],["maintained",{"2":{"39":1}}],["maintainable",{"2":{"38":1}}],["main",{"2":{"14":4,"17":1,"18":1,"32":1}}],["much",{"2":{"45":1}}],["must",{"2":{"37":2,"39":2,"40":2}}],["multi",{"2":{"37":1}}],["multiple",{"2":{"1":1,"5":1,"11":1,"25":1,"28":1,"32":1}}],["mutation",{"2":{"21":1}}],["mutationfn",{"2":{"21":2}}],["messageresult",{"2":{"21":3}}],["messageid",{"2":{"21":2}}],["message",{"2":{"21":5,"45":4}}],["messages",{"2":{"20":2,"21":5,"40":2}}],["mock",{"2":{"43":1,"45":1}}],["mocked",{"2":{"27":2,"42":2,"43":4}}],["modify",{"2":{"17":1,"18":1,"45":1}}],["module",{"2":{"32":1,"35":2}}],["modules",{"2":{"7":1,"10":1,"11":1,"27":3,"28":2,"29":1,"32":1,"35":1,"39":2,"42":2}}],["modularity",{"0":{"39":1},"2":{"39":1}}],["modular",{"2":{"11":2,"17":1}}],["more",{"2":{"9":1,"15":2,"24":1,"25":2,"26":1,"28":1,"31":1,"34":1,"35":1,"39":1,"40":2,"41":2,"46":1}}],["md",{"2":{"7":1,"14":1,"27":1}}],["myprocess",{"0":{"4":1},"2":{"3":1,"8":3,"30":1,"33":1,"36":1,"46":1}}],["my",{"0":{"6":1},"2":{"2":1,"35":2}}],["everything",{"2":{"45":1}}],["etc",{"2":{"39":1}}],["efficient",{"2":{"38":1}}],["essential",{"2":{"38":1,"39":1,"40":1}}],["eslintrc",{"2":{"14":1}}],["equal",{"2":{"37":1,"39":1,"40":1}}],["elseif",{"2":{"37":1,"39":1,"40":1}}],["embedded",{"2":{"37":1}}],["each",{"2":{"27":1,"40":1}}],["easier",{"2":{"39":1,"40":2}}],["easily",{"2":{"11":2,"39":1,"40":1}}],["easy",{"2":{"37":1}}],["ease",{"2":{"11":2}}],["error",{"2":{"20":2,"40":1}}],["end",{"2":{"37":7,"39":7,"40":8,"45":9}}],["ensure",{"2":{"31":1,"34":1,"38":1,"40":1}}],["encrypted",{"2":{"25":1}}],["enough",{"2":{"22":1,"25":1}}],["environments",{"2":{"25":1,"43":1}}],["environment",{"2":{"14":1,"25":1,"43":5}}],["env",{"2":{"14":1,"27":2,"42":2,"43":1}}],["enable",{"2":{"13":1,"18":1,"40":1}}],["entry",{"2":{"7":2,"14":1,"27":2,"29":1,"32":1,"35":1,"39":1,"42":1}}],["enter",{"0":{"2":1}}],["expected",{"2":{"40":1}}],["explain",{"2":{"37":1}}],["explanation",{"2":{"17":1,"18":1}}],["export",{"2":{"36":2}}],["executed",{"2":{"26":1}}],["extra",{"2":{"13":1}}],["example",{"2":{"10":1,"14":2,"21":1,"40":1}}],["eg",{"2":{"2":1,"3":1}}],["duplicate",{"2":{"45":1}}],["diagnostic",{"2":{"45":1}}],["different",{"2":{"43":1,"45":1}}],["dividing",{"2":{"40":1}}],["disable",{"2":{"45":1}}],["distinct",{"2":{"40":1}}],["displaying",{"2":{"39":1}}],["discuss",{"2":{"37":1,"40":1,"42":1}}],["directories",{"2":{"7":1,"27":1}}],["directory",{"0":{"14":1,"27":1,"42":1,"43":1},"2":{"2":2,"3":2,"7":8,"8":1,"14":1,"19":1,"20":1,"27":5,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"42":4,"43":2,"44":1,"46":1}}],["dryrun",{"2":{"20":2}}],["dryrunresult",{"2":{"20":3}}],["doing",{"2":{"45":1}}],["down",{"2":{"37":1,"39":4}}],["docker",{"2":{"31":3}}],["document",{"2":{"17":1,"18":1}}],["documentation",{"2":{"9":1,"15":1,"24":1,"25":1,"26":2,"41":2,"46":1}}],["done",{"2":{"31":1,"34":1,"46":1}}],["don",{"2":{"27":1}}],["domain",{"0":{"23":1},"2":{"22":1,"23":1,"25":5}}],["dom",{"2":{"17":1,"18":1}}],["do",{"2":{"15":1,"39":1}}],["d",{"2":{"14":1}}],["date",{"2":{"20":1}}],["data",{"0":{"20":1,"21":1},"2":{"13":2,"18":3,"20":6,"21":3,"37":3,"39":3,"40":3}}],["dappnpm",{"2":{"0":1}}],["dappyarn",{"2":{"0":1}}],["dapppnpm",{"2":{"0":1}}],["dapp",{"0":{"10":1},"1":{"11":1},"2":{"0":2,"9":1,"10":1,"11":4,"15":1,"17":1,"18":1,"19":1,"26":1,"29":1,"30":1,"33":1,"36":1,"39":1,"42":1,"45":1,"46":2}}],["describe",{"2":{"45":2}}],["designing",{"2":{"38":1}}],["design",{"0":{"37":1,"38":1},"1":{"38":1,"39":2,"40":2},"2":{"37":2,"38":2}}],["designed",{"2":{"11":1,"37":1}}],["define",{"2":{"45":2}}],["default",{"2":{"17":1,"18":1,"19":1}}],["debug",{"2":{"40":1}}],["detail",{"2":{"27":1,"42":1}}],["demonstrates",{"2":{"14":1,"19":1}}],["dedicated",{"2":{"9":1}}],["develop",{"2":{"26":1}}],["developed",{"2":{"26":1,"39":1}}],["developing",{"0":{"26":1},"1":{"27":1},"2":{"9":1,"27":1}}],["development",{"0":{"13":1},"1":{"14":1},"2":{"8":1,"10":1}}],["dev",{"2":{"8":1}}],["deployed",{"2":{"15":1,"25":1}}],["deploys",{"2":{"8":1}}],["deploy",{"2":{"8":1,"11":1,"15":1,"22":2,"25":11,"27":2,"36":6,"42":2}}],["deployment",{"0":{"22":1,"34":1},"1":{"23":1,"24":1,"25":1,"35":1,"36":1},"2":{"7":1,"10":1,"11":2,"15":1,"27":1}}],["deploying",{"0":{"25":1,"36":1},"2":{"5":1,"15":1,"22":1,"25":1,"28":1,"34":3,"35":1}}],["rawrba",{"2":{"35":1}}],["replies",{"2":{"40":1}}],["replying",{"2":{"40":1}}],["reusable",{"2":{"39":1}}],["return",{"2":{"37":1,"39":2,"40":6,"45":3}}],["returns",{"2":{"20":1}}],["recipient",{"2":{"37":5,"39":5,"40":6}}],["recommended",{"2":{"13":1,"18":1,"27":1}}],["recommend",{"2":{"13":1}}],["requiredin",{"2":{"46":1}}],["required",{"2":{"37":2,"39":2,"40":2}}],["require",{"2":{"37":1,"39":2,"40":1,"45":3}}],["requires",{"2":{"22":1}}],["requirements",{"2":{"17":1,"18":1,"19":1}}],["re",{"2":{"21":1}}],["respond",{"2":{"40":1}}],["responsible",{"2":{"40":1}}],["response",{"2":{"21":1,"40":4,"45":2}}],["resetglobals",{"2":{"45":2}}],["resets",{"2":{"45":1}}],["reset",{"2":{"27":2,"35":1,"37":2,"39":2,"40":2,"42":2,"45":1}}],["result",{"2":{"21":1}}],["rest",{"2":{"9":1}}],["render",{"2":{"17":1,"18":1}}],["reference",{"2":{"14":1,"19":1}}],["remove",{"2":{"11":1}}],["really",{"2":{"37":1}}],["readable",{"2":{"40":1}}],["reading",{"0":{"20":1}}],["readme",{"2":{"7":1,"14":1,"27":1}}],["reach",{"2":{"9":1}}],["reactdom",{"2":{"17":2,"18":2}}],["react",{"2":{"6":2,"7":1,"10":1,"13":3,"14":4,"15":1,"17":8,"18":8,"20":2,"22":1,"27":1}}],["relative",{"2":{"2":1}}],["root",{"2":{"2":1,"7":5,"8":1,"17":1,"18":1,"27":3,"30":1,"33":1,"36":1,"42":1,"46":2}}],["runs",{"2":{"8":1}}],["running",{"0":{"46":1},"2":{"1":1,"43":1,"46":1}}],["run",{"2":{"0":1,"15":2,"25":2,"30":3,"33":3,"36":3,"46":6}}],["unpack",{"2":{"45":1}}],["unit",{"2":{"40":1,"41":1}}],["undernames",{"2":{"25":1}}],["undername",{"2":{"25":2}}],["understanding",{"2":{"26":2,"41":1,"44":1,"46":1}}],["understand",{"2":{"19":1}}],["undefined",{"2":{"20":1,"21":1}}],["ui",{"2":{"20":1,"21":2}}],["utils",{"2":{"7":2,"27":1,"37":4,"39":4}}],["utility",{"2":{"7":3,"27":2,"42":1}}],["us",{"2":{"9":1,"40":1}}],["usemutation",{"2":{"20":1,"21":3}}],["usequeryclient",{"2":{"20":1}}],["usequery",{"2":{"20":3}}],["uses",{"2":{"20":1,"28":1,"31":1}}],["user",{"2":{"13":1,"15":1,"22":1,"40":3}}],["use",{"2":{"9":1,"13":2,"14":2,"17":1,"18":2,"19":4,"21":1,"25":1,"26":1,"45":1}}],["used",{"2":{"2":1,"3":2,"13":1,"14":1,"21":2,"32":1,"35":1,"40":1,"43":8,"46":1}}],["using",{"0":{"28":1,"31":1},"1":{"29":1,"30":1,"32":1,"33":1},"2":{"4":1,"6":1,"8":2,"13":1,"20":1,"21":1,"25":2,"26":1,"28":1,"29":1,"31":2,"34":3,"35":1,"41":1,"42":1,"45":1,"46":3}}],["updates",{"2":{"37":1,"39":1}}],["updated",{"2":{"21":1}}],["update",{"2":{"20":1,"21":1}}],["up",{"2":{"1":1,"10":1,"20":1,"43":3}}],["broken",{"2":{"39":1}}],["breaking",{"2":{"39":1}}],["break",{"2":{"37":1,"39":3}}],["blue",{"2":{"37":2,"39":2,"40":2}}],["biome",{"2":{"17":1,"18":1}}],["bal",{"2":{"37":5,"39":5,"40":6}}],["balance",{"2":{"37":5,"39":6,"40":6,"45":3}}],["balances",{"2":{"37":13,"39":13,"40":13,"45":4}}],["basically",{"2":{"40":1}}],["basics",{"2":{"26":1}}],["basic",{"2":{"26":2,"32":1,"35":1,"41":1,"44":1,"46":1}}],["base64",{"2":{"25":2}}],["based",{"2":{"17":1,"20":1,"21":1}}],["backend",{"0":{"3":1,"16":1,"19":1,"20":1,"21":1},"1":{"17":1,"18":1,"19":1,"20":1,"21":1},"2":{"3":1,"13":1,"14":3,"15":1,"16":1,"18":1,"19":4,"20":4,"21":5,"22":1}}],["boolean",{"2":{"20":2}}],["box",{"2":{"13":1,"18":1}}],["boilerplate",{"2":{"10":1}}],["busted",{"2":{"41":3,"45":1,"46":5}}],["burned",{"2":{"37":1,"39":1,"40":1}}],["burn",{"2":{"37":2,"39":5,"40":1}}],["but",{"2":{"37":1,"40":1}}],["button",{"2":{"21":2}}],["built",{"2":{"13":1,"28":1,"31":1}}],["building",{"0":{"15":1,"28":1,"30":1,"31":1,"33":1},"1":{"29":1,"30":1,"32":1,"33":1},"2":{"15":2,"25":1,"28":1,"31":2}}],["builds",{"2":{"8":2}}],["build",{"0":{"29":1},"2":{"7":1,"8":2,"14":1,"15":2,"19":1,"27":3,"28":3,"29":2,"30":5,"31":3,"32":2,"33":5,"35":1,"42":2}}],["bun",{"2":{"0":1}}],["by",{"2":{"7":1,"10":1,"17":1,"18":1,"19":2,"21":1,"25":2,"26":1,"27":1,"40":1,"46":1}}],["before",{"2":{"43":1}}],["below",{"2":{"37":1}}],["best",{"2":{"37":2}}],["better",{"2":{"17":1,"40":1}}],["be",{"2":{"2":1,"3":2,"11":1,"15":2,"21":1,"25":1,"27":1,"37":5,"39":5,"40":3,"45":1,"46":2}}],["at",{"2":{"45":1}}],["amp",{"2":{"30":2,"33":2,"36":2,"46":2}}],["among",{"2":{"28":1}}],["amalg",{"0":{"28":1},"1":{"29":1,"30":1},"2":{"28":2,"29":2}}],["amalgamation",{"2":{"10":1,"11":2}}],["after",{"2":{"25":1}}],["automatically",{"2":{"20":1}}],["actual",{"2":{"43":1}}],["action",{"2":{"20":1,"21":1,"37":4,"39":4,"40":3,"45":1}}],["according",{"2":{"37":1,"39":1,"40":1}}],["account",{"0":{"24":1},"2":{"22":1,"24":1,"37":1,"39":1,"40":2}}],["access",{"2":{"17":1,"18":1,"19":1,"25":1}}],["await",{"2":{"20":1,"21":2}}],["awesome",{"2":{"15":1}}],["about",{"2":{"15":1,"24":1,"25":2,"26":1,"28":1,"31":1,"34":1,"40":1,"41":2,"46":1}}],["above",{"2":{"1":1}}],["around",{"2":{"40":1}}],["architecture",{"2":{"26":1}}],["ardrive",{"0":{"24":1},"2":{"22":1,"24":2,"25":1}}],["ar",{"2":{"22":1,"25":1}}],["arns",{"0":{"23":1},"2":{"22":1,"23":2,"25":5}}],["arweavewallet",{"2":{"21":1}}],["arweavewalletkit",{"2":{"17":3,"18":3}}],["arweave",{"0":{"17":1},"2":{"13":1,"17":7,"18":1}}],["are",{"2":{"3":1,"19":1,"26":4,"37":1,"38":2,"40":1,"41":1,"43":5,"45":1}}],["address",{"2":{"17":1,"18":1,"19":1}}],["add",{"2":{"11":1,"37":5,"39":5,"40":1}}],["aims",{"2":{"10":1}}],["also",{"2":{"25":1,"40":3}}],["always",{"2":{"21":1}}],["alongside",{"2":{"10":1}}],["along",{"2":{"9":1,"37":1}}],["allows",{"2":{"11":1,"40":1,"45":1}}],["allowing",{"2":{"11":3}}],["allowed",{"2":{"3":1}}],["all",{"2":{"7":1,"45":1}}],["app",{"2":{"7":1,"14":3,"17":3,"18":3,"27":1}}],["apps",{"2":{"7":2,"14":2,"17":1,"18":1,"19":2,"27":1}}],["applications",{"2":{"7":2,"9":1,"27":1,"37":1}}],["application",{"2":{"6":1,"8":2,"10":1,"13":2,"14":2,"15":2,"22":2,"28":1,"45":1}}],["a",{"0":{"4":1,"6":1,"45":1},"2":{"4":1,"5":1,"6":1,"7":1,"10":2,"11":3,"13":4,"14":4,"15":5,"17":1,"18":2,"19":2,"20":3,"21":6,"22":6,"26":2,"27":1,"28":8,"29":1,"30":1,"31":1,"32":3,"33":1,"34":1,"36":1,"37":1,"39":1,"40":6,"41":2,"42":1,"44":1,"45":3,"46":3}}],["ant",{"2":{"25":2}}],["an",{"2":{"10":1,"11":1,"20":1,"21":1,"23":1,"24":1,"26":1,"37":3,"41":1}}],["any",{"2":{"9":1,"17":1}}],["anything",{"2":{"3":1,"45":1}}],["and",{"2":{"3":2,"9":1,"10":3,"11":1,"13":2,"17":1,"18":2,"19":1,"20":3,"21":2,"25":1,"26":2,"27":1,"28":1,"29":1,"32":1,"35":1,"37":6,"38":1,"39":7,"40":7,"43":1,"45":1}}],["aspect",{"2":{"40":1}}],["assert",{"2":{"37":4,"39":4,"40":4,"45":1}}],["assets",{"2":{"14":1}}],["async",{"2":{"20":1,"21":1}}],["as",{"2":{"2":1,"3":1,"11":1,"14":2,"17":1,"18":1,"19":3,"27":1,"32":1,"35":1,"39":1,"40":2,"45":1}}],["aos",{"2":{"26":1,"36":1}}],["aoconnect",{"2":{"13":1,"20":1,"21":1}}],["aoform",{"0":{"35":1},"2":{"5":2,"7":1,"8":1,"27":1,"34":8,"35":5,"36":1}}],["ao",{"0":{"10":1,"26":1,"41":1},"1":{"11":1,"27":1,"42":1,"43":1,"44":1,"45":1,"46":1},"2":{"0":5,"5":3,"7":7,"9":2,"10":3,"11":7,"15":1,"17":1,"18":1,"19":1,"26":9,"27":7,"29":1,"30":2,"33":2,"34":2,"36":2,"37":14,"38":1,"39":11,"40":9,"41":6,"42":2,"43":2,"45":2,"46":5}}],["same",{"2":{"45":1}}],["sample",{"2":{"14":1,"19":1,"45":2}}],["syntax",{"2":{"45":1}}],["system",{"2":{"39":1,"40":2}}],["smaller",{"2":{"39":3}}],["scalable",{"2":{"38":1}}],["scheduler",{"2":{"35":2}}],["script",{"0":{"29":1},"2":{"7":2,"8":1,"11":1,"25":1,"27":5,"28":5,"29":1,"30":1,"31":3,"33":1,"35":1,"36":1,"42":4,"43":1,"46":3}}],["scripts",{"0":{"8":1},"2":{"7":2,"8":1,"27":2,"29":1,"30":1,"33":1,"42":2,"46":2}}],["specific",{"2":{"40":1}}],["specifies",{"2":{"29":1,"32":1,"35":1}}],["split",{"2":{"28":1}}],["spa",{"2":{"13":1,"15":1,"22":1}}],["shortcut",{"2":{"46":1}}],["should",{"0":{"3":1},"2":{"37":1,"39":1,"45":2}}],["shell",{"2":{"28":1,"31":1}}],["sh",{"2":{"27":3,"29":1,"30":1,"33":1,"42":3,"46":1}}],["somewhat",{"2":{"42":1}}],["some",{"2":{"38":1,"44":1}}],["so",{"2":{"21":1,"45":1}}],["source",{"2":{"7":1,"14":1,"27":1,"42":1}}],["such",{"2":{"28":1,"39":1,"40":1}}],["successfully",{"2":{"37":2,"39":2,"40":2}}],["successful",{"2":{"21":1}}],["sure",{"2":{"25":1}}],["support",{"2":{"17":1}}],["suite",{"2":{"5":1,"11":1,"27":1,"41":3,"42":1,"43":2}}],["src",{"2":{"7":1,"17":1,"18":1,"19":2,"27":1,"32":2,"35":1,"42":1}}],["s",{"2":{"7":1,"14":2,"27":1,"37":1,"39":1,"40":1,"42":1,"44":1}}],["squish",{"0":{"32":1},"2":{"5":1,"31":2,"32":3}}],["squishy",{"0":{"31":1},"1":{"32":1,"33":1},"2":{"5":1,"7":2,"8":1,"27":2,"32":1}}],["sign",{"2":{"17":1,"18":1}}],["simplified",{"2":{"37":1}}],["simplify",{"2":{"10":1}}],["simple",{"2":{"4":1,"15":1,"28":1,"31":1}}],["similar",{"2":{"7":1}}],["single",{"2":{"5":1,"11":1,"13":1,"15":1,"22":1,"28":1,"32":2}}],["see",{"2":{"45":1}}],["separate",{"2":{"40":3}}],["separately",{"2":{"39":1}}],["separation",{"0":{"40":1},"2":{"40":1}}],["sendreply",{"2":{"40":7,"45":2}}],["senders",{"2":{"37":1,"39":1,"40":1}}],["sends",{"2":{"21":2}}],["send",{"2":{"21":4,"37":4,"39":4,"40":2,"45":1}}],["sending",{"0":{"21":1},"2":{"40":2}}],["sections",{"2":{"27":1,"37":1,"40":1}}],["section",{"2":{"16":1,"26":1,"28":1,"31":1,"34":1,"37":2,"40":1,"41":1}}],["service",{"2":{"15":1}}],["services",{"2":{"13":1,"15":1,"22":1}}],["server",{"2":{"8":1}}],["selecting",{"2":{"7":1}}],["select",{"0":{"5":1}}],["setting",{"2":{"10":1}}],["set",{"2":{"1":1,"43":3,"45":2}}],["setups",{"2":{"10":1}}],["setup",{"0":{"1":1},"1":{"2":1,"3":1,"4":1,"5":1,"6":1},"2":{"27":2,"42":2,"43":3,"45":2}}],["stored",{"2":{"29":1,"32":1,"34":1}}],["string",{"2":{"37":2,"39":2,"40":2}}],["strictmode",{"2":{"17":2,"18":2}}],["structured",{"2":{"14":1}}],["structure",{"0":{"7":1,"12":1,"14":1,"27":1,"42":1},"2":{"7":2,"27":2,"42":1,"44":1}}],["style",{"2":{"17":1,"18":1}}],["state",{"2":{"20":1,"37":1,"39":1,"45":2}}],["static",{"2":{"15":1,"25":1}}],["starter",{"2":{"10":1}}],["started",{"0":{"0":1},"1":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1},"2":{"0":1}}],["start",{"2":{"9":1,"26":1}}],["starts",{"2":{"8":1}}],["steps",{"0":{"9":1},"2":{"1":2,"22":1}}],["creating",{"2":{"40":1}}],["createdataitemsigner",{"2":{"21":1}}],["createroot",{"2":{"17":1,"18":1}}],["create",{"0":{"10":1},"1":{"11":1},"2":{"0":4,"3":2,"9":1,"10":1,"11":4,"15":1,"17":2,"18":2,"19":1,"24":1,"26":1,"29":1,"39":2,"40":1,"42":1,"45":2,"46":1}}],["certain",{"2":{"38":1}}],["c",{"2":{"35":1}}],["cd",{"2":{"30":1,"33":1,"36":1,"46":1}}],["clicked",{"2":{"21":1}}],["client=",{"2":{"17":1,"18":1}}],["client",{"2":{"17":2,"18":2}}],["cjs",{"2":{"14":1}}],["css",{"2":{"14":4,"17":1,"18":1}}],["case",{"0":{"45":1},"2":{"45":5}}],["cases",{"2":{"43":1,"45":1}}],["cat",{"2":{"36":1}}],["called",{"2":{"21":1}}],["calling",{"2":{"20":1,"21":1}}],["cache",{"2":{"20":1,"21":2}}],["caching",{"2":{"13":1,"18":1,"20":1}}],["can",{"2":{"0":1,"3":1,"4":1,"5":1,"6":1,"9":1,"14":1,"15":3,"17":3,"18":2,"19":4,"20":1,"21":3,"23":1,"24":1,"25":4,"26":2,"28":1,"30":1,"33":1,"36":1,"37":1,"39":3,"40":2,"41":2,"45":2,"46":4}}],["choice",{"2":{"37":1}}],["choose",{"2":{"4":1,"5":1,"6":1}}],["change",{"2":{"37":1,"39":1}}],["channels",{"2":{"9":1}}],["challenge",{"2":{"28":1}}],["check",{"2":{"15":1,"19":1}}],["correct",{"2":{"45":1}}],["colors",{"2":{"37":6,"39":6,"40":6}}],["cool",{"2":{"20":1,"21":1}}],["could",{"2":{"15":1,"37":1}}],["counter",{"2":{"14":3,"19":4,"20":8,"21":6}}],["concerns",{"0":{"40":1},"2":{"40":2}}],["contents",{"2":{"42":1}}],["context",{"2":{"39":1,"40":1}}],["continuing",{"2":{"40":1}}],["contains",{"2":{"25":1,"35":1,"39":1,"43":3}}],["const",{"2":{"17":1,"18":1,"20":1,"21":1}}],["constants",{"2":{"14":2,"19":3,"20":2}}],["connect",{"2":{"16":1,"25":1}}],["connecting",{"0":{"16":1},"1":{"17":1,"18":1,"19":1,"20":1,"21":1}}],["connected",{"2":{"7":1,"27":1}}],["config",{"2":{"14":1}}],["configure",{"2":{"35":1}}],["configured",{"2":{"10":1}}],["configuring",{"0":{"29":1,"32":1,"35":1}}],["configuration",{"2":{"7":2,"14":1,"17":2,"18":2,"27":2,"29":2,"32":3,"34":1,"35":4}}],["codebase",{"2":{"14":3}}],["code",{"2":{"7":1,"14":1,"27":1,"37":1,"39":1,"40":2,"42":1,"45":1}}],["com",{"2":{"25":1}}],["comes",{"2":{"14":1,"17":1,"18":1,"19":1}}],["combined",{"2":{"39":1}}],["combine",{"2":{"11":1}}],["combining",{"2":{"5":1,"32":1}}],["complex",{"2":{"39":1}}],["complete",{"2":{"1":1}}],["comprehend",{"2":{"37":1}}],["comprehensive",{"2":{"10":1,"11":1}}],["component",{"2":{"14":4,"19":3,"21":1}}],["components",{"2":{"14":3,"17":1,"19":3,"39":1}}],["command",{"2":{"0":1,"1":1,"15":1,"25":1,"30":2,"31":1,"33":2,"36":2,"46":3}}],["current",{"2":{"2":1,"37":1,"39":1,"40":1}}],["table",{"2":{"45":1}}],["tag",{"2":{"40":1}}],["tags",{"2":{"35":2,"37":6,"39":6,"40":8,"45":1}}],["target",{"2":{"37":4,"39":4,"40":1}}],["tanstack",{"0":{"18":1},"2":{"13":2,"17":1,"18":4,"20":3,"21":2}}],["transfer",{"2":{"39":1}}],["transaction",{"2":{"17":1,"18":1}}],["try",{"2":{"37":1}}],["true",{"2":{"17":1,"18":1,"20":2,"45":1}}],["t",{"2":{"15":1,"27":1}}],["tipit",{"2":{"40":1}}],["tipcreate",{"2":{"30":1,"33":1,"36":1,"46":1}}],["tipyou",{"2":{"25":1}}],["tipsome",{"2":{"20":1,"21":1}}],["tipto",{"2":{"40":1}}],["tipthat",{"2":{"39":1}}],["tipthe",{"2":{"19":1}}],["tiptanstack",{"2":{"13":1}}],["tipwouldn",{"2":{"15":1}}],["tsx",{"2":{"14":3,"17":2,"18":2,"19":1}}],["tsconfig",{"2":{"7":1,"14":1,"27":1}}],["ts",{"2":{"7":1,"14":3,"19":1,"27":1}}],["technologies",{"2":{"13":1}}],["tests",{"0":{"44":1,"46":1},"1":{"45":1,"46":1},"2":{"40":1,"43":1,"44":1,"46":5}}],["tested",{"2":{"39":1,"41":1}}],["test",{"0":{"43":1,"45":1},"2":{"7":3,"8":2,"11":1,"27":6,"37":1,"39":2,"40":2,"41":2,"42":8,"43":5,"45":11,"46":5}}],["testing",{"0":{"41":1,"42":1},"1":{"42":1,"43":1,"44":1,"45":1,"46":1},"2":{"5":3,"10":1,"11":2,"27":1,"40":2,"41":4,"42":1,"43":2}}],["teal",{"2":{"4":2}}],["typescript",{"2":{"13":1}}],["types",{"2":{"4":1,"14":1}}],["type",{"0":{"4":1},"2":{"37":2,"39":2,"40":2}}],["than",{"2":{"37":2,"39":2,"40":2}}],["that",{"2":{"11":1,"13":2,"14":1,"15":3,"19":1,"20":2,"21":4,"22":1,"25":4,"28":3,"31":1,"38":1,"39":2,"40":4,"43":3,"44":1,"45":1,"46":1}}],["things",{"2":{"37":1,"39":1,"40":1}}],["this",{"2":{"2":1,"7":1,"10":1,"13":1,"14":2,"16":1,"18":1,"19":3,"21":1,"25":2,"26":1,"28":2,"31":1,"34":1,"35":1,"37":3,"39":1,"40":2,"41":1,"42":1,"43":3,"45":2}}],["through",{"2":{"27":1,"28":1,"31":1,"34":1}}],["their",{"2":{"45":1}}],["they",{"2":{"26":1,"40":1}}],["then",{"2":{"20":1,"37":5,"39":5,"40":5,"45":1}}],["them",{"2":{"19":1}}],["these",{"2":{"19":1}}],["the",{"0":{"2":1,"3":1,"5":1,"15":1,"25":1,"28":1,"30":1,"31":1,"33":1,"36":1,"46":1},"1":{"29":1,"30":1,"32":1,"33":1},"2":{"0":2,"1":2,"2":2,"3":3,"4":2,"5":1,"6":1,"7":12,"8":10,"9":3,"10":2,"11":5,"13":6,"14":13,"15":8,"16":2,"17":2,"18":4,"19":10,"20":17,"21":23,"22":7,"23":1,"24":1,"25":23,"26":7,"27":15,"28":8,"29":10,"30":8,"31":8,"32":11,"33":8,"34":6,"35":16,"36":10,"37":7,"38":1,"39":12,"40":24,"41":5,"42":15,"43":18,"44":3,"45":10,"46":18}}],["too",{"2":{"45":1}}],["tool",{"2":{"5":1,"11":1,"15":1,"28":2,"32":1,"34":1}}],["tonumber",{"2":{"37":7,"39":7,"40":7}}],["totalsuppy",{"2":{"37":1,"39":1,"40":2}}],["totalsupply",{"2":{"37":7,"39":7,"40":6,"45":4}}],["tokens",{"2":{"37":1,"39":1,"40":1}}],["token",{"2":{"37":4,"39":3,"40":1,"45":3}}],["to",{"0":{"5":1,"16":1,"21":1},"1":{"17":1,"18":1,"19":1,"20":1,"21":1},"2":{"0":1,"1":2,"2":1,"3":2,"7":4,"9":3,"10":1,"11":6,"13":1,"14":2,"15":5,"16":2,"17":1,"18":2,"19":4,"20":3,"21":11,"22":3,"24":1,"25":12,"26":4,"27":4,"28":1,"29":2,"30":3,"31":1,"32":2,"33":3,"34":1,"35":1,"36":3,"37":5,"38":3,"39":7,"40":16,"41":3,"42":1,"43":6,"45":6,"46":6}}]],"serializationVersion":2}
