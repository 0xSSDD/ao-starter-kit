"[[\"index.3699c5195b09eea09bf8dae244c3ed506d9b301e5ab32f59af1f58a0e065530b\",{\"mdx\":\"# Code Snippets [Including code snippets in Markdown]\\n\\nCode Snippets in Vocs come in two forms:\\n\\n- a virtual file snippet in your Markdown code ([Virtual File Snippets](#virtual-file-snippets)), or\\n- a physical file snippet in your file system ([Physical File Snippets](#physical-file-snippets))\\n\\nWe will show you both approaches below.\\n\\n## Virtual File Snippets\\n\\n::::steps\\n\\n### Create the code snippet\\n\\nWe will create a virtual file snippet called `example.ts`. We can define a virtual file in markdown using the `filename=\\\"example.ts\\\"{:ts}` meta tag.\\n\\n````mdx [example.md]\\n```ts filename=\\\"example.ts\\\" // [!code hl]\\nimport { http, createPublicClient } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n \\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n```\\n````\\n\\n### Import the snippet\\n\\nNext, we will import the snippet into our Markdown file using the `// [!include ...]` marker.\\n\\n````mdx [example.md]\\n#### Create your Client\\n\\n```ts filename=\\\"example.ts\\\"\\nimport { http, createPublicClient } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n \\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n```\\n\\n#### Use Actions\\n\\n```ts // [!code focus]\\n//$ [!include example.ts] // [!code focus] // [!code hl]\\n \\nconst blockNumber = await client.getBlockNumber() //$ [!code focus] // [!code focus]\\n``` // [!code focus]\\n````\\n\\n### Output\\n\\nThe resulting output will look like this:\\n\\n<div>\\n#### Create your Client\\n\\n```ts filename=\\\"example.ts\\\"\\nimport { http, createPublicClient } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n \\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n```\\n\\n#### Use Actions\\n\\n```ts\\n// [!include example.ts]\\n \\nconst blockNumber = await client.getBlockNumber() // [!code focus]\\n```\\n</div>\\n\\n::::\\n\\n\\n## Physical File Snippets\\n\\n::::steps\\n\\n### Create the code snippet\\n\\nWe will create a physical file snippet called `example.ts`. Let's put this under a `snippets/` directory in your codebase.\\n\\n```ts [docs/snippets/example.ts]\\n// [!include ~/snippets/example.ts:import]\\n\\n// [!include ~/snippets/example.ts:setup]\\n```\\n\\n### Import the snippet\\n\\nNext, we will import the snippet into our Markdown file using the `// [!include ...]` marker.\\n\\n````mdx [example.md]\\n#### Create your Client\\n\\n```ts // [!code focus]\\n//$ [!include ~/snippets/example.ts] // [!code focus] // [!code hl]\\n``` // [!code focus]\\n\\n#### Use Actions\\n\\n```ts // [!code focus]\\n//$ [!include ~/snippets/example.ts] // [!code focus] // [!code hl]\\n \\nconst blockNumber = await client.getBlockNumber() //$ [!code focus] // [!code focus]\\n``` // [!code focus]\\n````\\n\\n:::info\\nThe `\\\"~\\\"` in the path refers to the [root (`config.rootDir`) directory](/docs/structure#root-directory) of the project.\\n:::\\n\\n### Output\\n\\nThe resulting output will look like this:\\n\\n<div>\\n#### Create your Client\\n\\n```ts \\n// [!include ~/snippets/example.ts:import]\\n\\n// [!include ~/snippets/example.ts:setup] \\n``` \\n\\n#### Use Actions\\n\\n```ts\\n// [!include ~/snippets/example.ts:import]\\n\\n// [!include ~/snippets/example.ts:setup]\\n \\nconst blockNumber = await client.getBlockNumber() // [!code focus]\\n```\\n</div>\\n\\n::::\\n\\n## Regions\\n\\nYou can also include a specific region of a code snippet by using the `// [!region]` and `// [!endregion]` markers.\\n\\n```ts [docs/snippets/example.ts]\\n//$ [!region import] // [!code focus]\\nimport { http, createPublicClient } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n//$ [!endregion import] // [!code focus]\\n\\n//$ [!region setup] // [!code focus]\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n//$ [!endregion setup] // [!code focus]\\n\\n//$ [!region usage] // [!code focus]\\nconst blockNumber = await client.getBlockNumber()\\n//$ [!endregion usage] // [!code focus]\\n```\\n\\nThen, we can include the regions in the Markdown with the `// [!include]` marker:\\n\\n````md [example.md]\\n```ts\\nimport { writeFileSync } from 'node:fs'\\n//$ [!include ~/snippets/example.ts:import] // [!code focus]\\n\\n//$ [!include ~/snippets/example.ts:setup] // [!code focus]\\n\\n//$ [!include ~/snippets/example.ts:usage] // [!code focus]\\n\\nwriteFileSync('test.txt', blockNumber.toString())\\n```\\n````\\n\\nWhich will result in the snippet being rendered like this:\\n\\n```ts\\nimport { writeFileSync } from 'node:fs'\\n// [!include ~/snippets/example.ts:import] \\n\\n// [!include ~/snippets/example.ts:setup] \\n\\n// [!include ~/snippets/example.ts:usage-1] \\n\\nwriteFileSync('test.txt', blockNumber.toString())\\n```\\n\\n### Duplicate variable declarations\\n\\nWhen writing snippets, you may run into a scenario where you want to define multiple regions that share the same variable name.\\n\\nTo avoid type errors, you can use the `_$` suffix to discriminate the variable name.\\n\\nThe rendered snippet will still use the original variable name (ie. the name before the `_$` suffix).\\n\\n```ts\\n// [!region import]\\nimport { http, createPublicClient } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n// [!endregion import]\\n\\n// [!region setup]\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n// [!endregion setup]\\n\\n// [!region usage-1] // [!code focus]\\nconst block_$1 = await client.getBlock() // [!code focus]\\n// [!endregion usage-1] // [!code focus]\\n\\n// [!region usage-2] // [!code focus]\\nconst block_$2 = await client.getBlock({ blockNumber: 42069n }) // [!code focus]\\n// [!endregion usage-2] // [!code focus]\\n\\n// [!region usage-3] // [!code focus]\\nconst block_$3 = await client.getBlock({ blockTag: 'latest' }) // [!code focus]\\n// [!endregion usage-3] // [!code focus]\\n```\\n\\n## Find and Replace\\n\\nYou can use `/(find)/(replace)/` syntax to find and replace text in the snippet.\\n\\n:::code-group\\n\\n````md [example.md]\\n```ts\\nimport { writeFileSync } from 'node:fs'\\n//$ [!include ~/snippets/example.ts /viem/@viem\\\\/core/ /mainnet/sepolia/] // [!code focus]\\n\\nwriteFileSync('test.txt', blockNumber.toString())\\n```\\n````\\n\\n```ts [docs/snippets/example.ts]\\nimport { http, createPublicClient } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\\nconst blockNumber = await client.getBlockNumber()\\n```\\n\\n:::\\n\\nWhich will result in the snippet being rendered like this:\\n\\n```ts \\nimport { writeFileSync } from 'node:fs'\\n// [!include ~/snippets/example.ts:import /viem/@viem\\\\/core/ /mainnet/sepolia/]\\n\\n// [!include ~/snippets/example.ts:setup /mainnet/sepolia/]\\n\\n// [!include ~/snippets/example.ts:usage-1]\\n\\nwriteFileSync('test.txt', blockNumber.toString())\\n```\\n\\n## Tip: Code Block Markers\\n\\nWe can also include markers like [line highlight (`// [!code hl]`)](/docs/markdown#line-highlights) in our code snippets.\\n\\n:::code-group\\n\\n```ts [docs/snippets/example.ts]\\n// [!include ~/snippets/example.ts:import]\\n\\n// [!include ~/snippets/example.ts:setup]\\n\\n// [!include ~/snippets/example.ts:usage-2-docs]\\n```\\n\\n````md [example.md]\\n```ts\\nimport { writeFileSync } from 'node:fs'\\n//$ [!include ~/snippets/example.ts]\\n\\nwriteFileSync('test.txt', blockNumber.toString())\\n```\\n````\\n\\n:::\\n\\nWhich will result in the snippet being rendered like this:\\n\\n```ts \\nimport { writeFileSync } from 'node:fs'\\n// [!include ~/snippets/example.ts:import]\\n\\n// [!include ~/snippets/example.ts:setup]\\n\\n// [!include ~/snippets/example.ts:usage-2]\\n\\nwriteFileSync('test.txt', blockNumber.toString())\\n```\\n\\n## Tip: Twoslash\\n\\nWe can also include Twoslash markers in our code snippets.\\n\\n:::code-group\\n\\n```ts [docs/snippets/example.ts]\\n// [!include ~/snippets/example.ts:import]\\n\\n// [!include ~/snippets/example.ts:setup]\\n\\n// [!include ~/snippets/example.ts:usage-4]\\n```\\n\\n````md [example.md]\\n```ts twoslash\\n//$ [!include ~/snippets/example.ts]\\n```\\n````\\n\\n:::\\n\\nWhich will result in the snippet being rendered like this:\\n\\n```ts twoslash\\n// [!include ~/snippets/example.ts:import]\\n\\n// [!include ~/snippets/example.ts:setup]\\n\\n// [!include ~/snippets/example.ts:usage-4]\\n```\\n\\n## Tip: Twoslash + Virtual Files\\n\\nWe can also use virtual files with Twoslash code blocks.\\n\\n````md [Markdown]\\n:::code-group\\n\\n```ts twoslash [example.ts] // [!code hl]\\nimport { client } from './client.js'\\n\\nconst blockNumber = await client.getBlockNumber()\\n```\\n\\n```ts twoslash [client.ts] filename=\\\"client.ts\\\" // [!code hl]\\nimport { http, createPublicClient } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n \\nexport const client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n```\\n\\n:::\\n````\\n\\nWhich will result in the snippet being rendered like this:\\n\\n:::code-group\\n\\n```ts twoslash [example.ts]\\nimport { client } from './client.js'\\n\\nconst blockNumber = await client.getBlockNumber()\\n```\\n\\n```ts twoslash [client.ts] filename=\\\"client.ts\\\"\\nimport { http, createPublicClient } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n \\nexport const client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n```\\n\\n:::\\n\",\"document\":[]}],[\"index.c4ad6a24b93dd5cab6b3d3b14d19596e36beba39fce03f83acc58062e8c52197\",{\"mdx\":\"import { Example } from '../../components/Example'\\n\\n# Markdown Reference [Features and syntax of Markdown in Vocs]\\n\\n## Blockquote\\n\\nTo create a blockquote, add a `>` in front of a paragraph.\\n\\n:::code-group\\n\\n<div data-title=\\\"Preview\\\">\\n> Blockquotes are very handy in email to emulate reply text.\\n> This line is part of the same quote.\\n\\n> This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote. \\n</div>\\n\\n```md [Markdown]\\n> Blockquotes are very handy in email to emulate reply text.\\n> This line is part of the same quote.\\n\\n> This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote. \\n```\\n\\n:::\\n\\n## Callouts\\n\\nCallouts can be rendered using one of the following [directives](https://talk.commonmark.org/t/generic-directives-plugins-syntax/444):\\n\\n- `:::note`\\n- `:::info`\\n- `:::warning`\\n- `:::danger`\\n- `:::tip`\\n- `:::success`\\n\\n::::code-group\\n\\n<div data-title=\\\"Preview\\\">\\n:::note\\nThis is a note callout. [Link](https://google.com)\\n:::\\n\\n:::info\\nThis is an info callout. [Link](https://google.com)\\n:::\\n\\n:::warning\\nThis is a warning callout. [Link](https://google.com)\\n:::\\n\\n:::danger\\nThis is a danger callout. [Link](https://google.com)\\n:::\\n\\n:::tip\\nThis is a tip callout. [Link](https://google.com)\\n:::\\n\\n:::success\\nThis is a success callout. [Link](https://google.com)\\n:::\\n\\n:::tip[Handy Tip]\\nThis is a tip callout with title.\\n\\n```tsx\\nconsole.log('hello world')\\n```\\n:::\\n</div>\\n\\n````md [Markdown]\\n:::note\\nThis is a note callout. [Link](https://google.com)\\n:::\\n\\n:::info\\nThis is an info callout. [Link](https://google.com)\\n:::\\n\\n:::warning\\nThis is a warning callout. [Link](https://google.com)\\n:::\\n\\n:::danger\\nThis is a danger callout. [Link](https://google.com)\\n:::\\n\\n:::tip\\nThis is a tip callout. [Link](https://google.com)\\n:::\\n\\n:::success\\nThis is a success callout. [Link](https://google.com)\\n:::\\n\\n:::tip[Handy Tip]\\nThis is a tip callout with title.\\n:::\\n````\\n\\n::::\\n\\n## Code Blocks\\n\\n### Default\\n\\nCode can be formatted into blocks using triple backticks (```). Optionally, you can specify the language of the code block for syntax highlighting.\\n\\n::::code-group\\n\\n<div data-title=\\\"Preview\\\">\\n```js\\nconsole.log(\\\"hello world\\\")\\n```\\n</div>\\n\\n````md [Markdown]\\n```js\\nconsole.log(\\\"hello world\\\")\\n```\\n````\\n\\n::::\\n\\n### Titles\\n\\nCode blocks can have titles. The title can be specified in the code block \\\"meta\\\", after the triple backticks.\\n\\n#### Preview\\n\\n```bash [Terminal]\\nnpm i vocs\\n```\\n\\n#### Markdown\\n\\n````md\\n```bash [Terminal]\\nnpm i vocs\\n```\\n````\\n\\n### Line focus\\n\\nThe `// [!code focus]` marker can be used to focus a line of code.\\n\\n::::code-group\\n\\n<div data-title=\\\"Preview\\\">\\n```ts\\n// 1. Import modules.\\nimport { createPublicClient, http } from 'viem' \\nimport { mainnet } from 'viem/chains'\\n\\n// 2. Set up your client with desired chain & transport.\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\\n// 3. Consume an action! // [!code focus]\\nconst blockNumber = await client.getBlockNumber() // [!code focus]\\n```\\n</div>\\n\\n````md [Markdown]\\n```ts \\n// 1. Import modules.\\nimport { createPublicClient, http } from 'viem' \\nimport { mainnet } from 'viem/chains'\\n\\n// 2. Set up your client with desired chain & transport.\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\\n// 3. Consume an action! //$ [!code focus] // [!code hl]\\nconst blockNumber = await client.getBlockNumber() //$ [!code focus] // [!code hl]\\n```\\n````\\n\\n::::\\n\\n### Line highlights\\n\\nThe `// [!code hl]` marker can be used to highlight a line of code.\\n\\n::::code-group\\n\\n<div data-title=\\\"Preview\\\">\\n```ts\\ntype Example = string // [!code hl]\\nconst example: Example = 'example'\\n```\\n</div>\\n\\n````md [Markdown]\\n```ts \\ntype Example = string //$ [!code hl] // [!code hl]\\nconst example: Example = 'example'\\n```\\n````\\n\\n::::\\n\\n### Line numbers\\n\\nThe `showLineNumbers` meta key can be used to show the lines of code beside the pane.\\n\\n::::code-group\\n\\n<div data-title=\\\"Preview\\\">\\n```ts showLineNumbers\\n// 1. Import modules.\\nimport { createPublicClient, http } from 'viem' \\nimport { mainnet } from 'viem/chains' \\n\\n// 2. Set up your client with desired chain & transport.\\nconst client = createPublicClient({ \\n  chain: mainnet, \\n  transport: http(), \\n}) \\n\\n// 3. Consume an action!\\nconst blockNumber = await client.getBlockNumber()\\n```\\n</div>\\n\\n````md [Markdown]\\n```ts showLineNumbers // [!code hl]\\n// 1. Import modules.\\nimport { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\n// 2. Set up your client with desired chain & transport.\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\\n// 3. Consume an action!\\nconst blockNumber = await client.getBlockNumber()\\n```\\n````\\n\\n::::\\n\\n### Twoslash\\n\\nVocs supports [TypeScript Twoslash](https://www.typescriptlang.org/dev/twoslash/) syntax. [Read more](/docs/guides/twoslash).\\n\\n::::code-group\\n\\n<div data-title=\\\"Preview\\\">\\n```ts twoslash\\n// @errors: 2540\\ninterface Todo {\\n  title: string\\n}\\n\\nconst todo: Readonly<Todo> = {\\n  title: 'Delete inactive users'.toUpperCase(), // [!code hl]\\n//  ^?\\n}\\n\\ntodo.title = 'Hello'\\n\\nNumber.parseInt('123', 10)\\n//      ^|\\n\\n\\n\\n```\\n</div>\\n\\n````md [Markdown]\\n```ts twoslash\\n// @errors: 2540\\ninterface Todo {\\n  title: string\\n}\\n\\nconst todo: Readonly<Todo> = {\\n  title: 'Delete inactive users'.toUpperCase(),\\n//  ^?\\n}\\n\\ntodo.title = 'Hello'\\n\\nNumber.parseInt('123', 10)\\n//      ^|\\n\\n\\n\\n```\\n````\\n\\n::::\\n\\n### Word focus\\n\\nThe `// [!code word]` marker can be used to focus words in code.\\n\\n::::code-group\\n\\n<div data-title=\\\"Preview\\\">\\n```ts \\n// 1. Import modules.\\nimport { createPublicClient, http } from 'viem'\\n// [!code word:mainnet]\\nimport { mainnet } from 'viem/chains'\\n\\n// 2. Set up your client with desired chain & transport.\\n// [!code word:client]\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\\n// 3. Consume an action!\\nconst blockNumber = await client.getBlockNumber()\\n```\\n</div>\\n\\n````md [Markdown]\\n```ts \\n// 1. Import modules.\\nimport { createPublicClient, http } from 'viem'\\n//$ [!code word:mainnet] // [!code hl]\\nimport { mainnet } from 'viem/chains'\\n\\n// 2. Set up your client with desired chain & transport.\\n//$ [!code word:client] // [!code hl]\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\\n// 3. Consume an action!\\nconst blockNumber = await client.getBlockNumber()\\n```\\n````\\n\\n::::\\n\\n### Diffs\\n\\nThe `// [!code ++]` and `// [!code --]` markers can be used to show diffs in code.\\n\\n::::code-group\\n\\n<div data-title=\\\"Preview\\\">\\n```ts\\n// 1. Import modules.\\nimport { createPublicClient } from 'viem' // [!code --]\\nimport { createPublicClient, http } from 'viem' // [!code ++]\\nimport { mainnet } from 'viem/chains'\\n\\n// 2. Set up your client with desired chain & transport.\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\\n// 3. Consume an action! \\nconst blockNumber = await client.getBlockNumber()\\n```\\n</div>\\n\\n````md [Markdown]\\n```ts\\n// 1. Import modules.\\nimport { createPublicClient } from 'viem' //$ [!code --] // [!code hl]\\nimport { createPublicClient, http } from 'viem' //$ [!code ++] // [!code hl]\\nimport { mainnet } from 'viem/chains'\\n\\n// 2. Set up your client with desired chain & transport.\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\\n// 3. Consume an action! \\nconst blockNumber = await client.getBlockNumber()\\n```\\n````\\n\\n::::\\n\\n## Code Groups\\n\\nCode groups can be rendered using the `:::code-group` [directive](https://talk.commonmark.org/t/generic-directives-plugins-syntax/444).\\n\\n#### Preview\\n\\n:::code-group\\n```bash [npm]\\nnpm i viem\\n```\\n\\n```bash [pnpm]\\npnpm i viem\\n```\\n\\n```bash [bun]\\nbun i viem\\n```\\n:::\\n\\n#### Markdown\\n\\n````md\\n:::code-group\\n\\n```bash [npm]\\nnpm i viem\\n```\\n\\n```bash [pnpm]\\npnpm i viem\\n```\\n\\n```bash [bun]\\nbun i viem\\n```\\n\\n:::\\n````\\n\\n:::tip[Tip]\\nThe `\\\":::\\\"` syntax refers to the [Directives Syntax Proposal](https://talk.commonmark.org/t/generic-directives-plugins-syntax/444).\\n:::\\n\\n### HTML/React Previews\\n\\n#### Preview\\n\\n:::code-group\\n\\n<div data-title=\\\"Preview\\\">\\n  <Example />\\n</div>\\n\\n```tsx [example.tsx]\\n<div>test</div>\\n```\\n\\n:::\\n\\n\\n#### Markdown\\n\\n````mdx\\nimport { Example } from './components/Example'\\n\\n:::code-group\\n\\n<div data-title=\\\"Preview\\\">\\n  <Example />\\n</div>\\n\\n```tsx [example.tsx]\\n<div>test</div>\\n```\\n\\n:::\\n````\\n\\n## Details\\n\\n:::::code-group\\n\\n<div data-title=\\\"Preview\\\">\\n:::details[See more]\\ngotcha!\\n:::\\n\\n<div style={{ height: '16px' }} />\\n\\n::::note\\n:::details\\ngotcha!\\n:::\\n::::\\n\\n::::danger[Error]\\nAn error occurred!\\n\\n:::details[Stack trace]\\ngotcha!\\n:::\\n::::\\n</div>\\n\\n```md [Markdown]\\n:::details[See more]\\ngotcha!\\n:::\\n\\n::::note\\n:::details\\ngotcha!\\n:::\\n::::\\n\\n::::danger[Error]\\nAn error occurred!\\n\\n:::details[Stack trace]\\ngotcha!\\n:::\\n::::\\n```\\n\\n:::::\\n\\n## Emphasis\\n\\n:::code-group\\n\\n<div data-title=\\\"Preview\\\">\\n<p>Emphasis, aka italics, with *asterisks* or _underscores_.</p>\\n\\n<p>Strong emphasis, aka bold, with **asterisks** or __underscores__.</p>\\n\\n<p>Combined emphasis with **asterisks and _underscores_**.</p>\\n\\n<p>Strikethrough uses two tildes. ~~Scratch this.~~</p>\\n</div>\\n\\n```md [Markdown]\\nEmphasis, aka italics, with *asterisks* or _underscores_.\\n\\nStrong emphasis, aka bold, with **asterisks** or __underscores__.\\n\\nCombined emphasis with **asterisks and _underscores_**.\\n\\nStrikethrough uses two tildes. ~~Scratch this.~~\\n```\\n\\n:::\\n\\n## Headings\\n\\nHeadings are rendered as `<h1>` to `<h6>` tags corresponding to the number of `#` characters in the heading.\\n\\n```md\\n# Heading 1\\n\\n## Heading 2\\n\\n### Heading 3\\n\\n#### Heading 4\\n\\n##### Heading 5\\n\\n###### Heading 6\\n```\\n\\n## Images\\n\\n:::code-group\\n\\n<div data-title=\\\"Preview\\\">\\n![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \\\"Logo Title Text 1\\\")\\n</div>\\n\\n```md [Markdown]\\n![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \\\"Logo Title Text 1\\\")\\n```\\n\\n:::\\n\\n## Inline Code\\n\\n:::code-group\\n\\n<div data-title=\\\"Preview\\\">\\n<p>Inline `code` has `back-ticks around` it.</p>\\n\\n<p>Inline [`code`]() with link.</p>\\n\\nInline `console.log(\\\"hello world\\\"){:js}` highlighted code\\n</div>\\n\\n```md [Markdown]\\nInline `code` has `back-ticks around` it.\\n\\nInline [`code`]() with link.\\n\\nInline `console.log(\\\"hello world\\\"){:js}` highlighted code\\n```\\n\\n:::\\n\\n## Links\\n\\n:::code-group\\n\\n<div data-title=\\\"Preview\\\">\\n<p>[Internal link](/docs/api/config)</p>\\n\\n<p>[External link](https://google.com)</p>\\n\\n<p>www.example.com, https://example.com, and contact@example.com.</p>\\n</div>\\n\\n```md [Markdown]\\n[Internal link](/docs/api/config)\\n\\n[External link](https://google.com)\\n\\nwww.example.com, https://example.com, and contact@example.com.\\n```\\n\\n:::\\n\\n## Lists\\n\\n:::code-group\\n\\n<div data-title=\\\"Preview\\\">\\n1. First ordered list item\\n2. Another item\\n    - Unordered sub-list.\\n      - Unordered sub-list.\\n        - Unordered sub-list.\\n      - Unordered sub-list.\\n    - Unordered sub-list.\\n    - Unordered sub-list.\\n3. Actual numbers don't matter, just that it's a number\\n    1. Ordered sub-list\\n        1. Ordered sub-list\\n    2. Ordered sub-list\\n    3. Ordered sub-list\\n4. And another item.\\n</div>\\n\\n```md [Markdown]\\n1. First ordered list item\\n2. Another item\\n    - Unordered sub-list.\\n      - Unordered sub-list.\\n        - Unordered sub-list.\\n      - Unordered sub-list.\\n    - Unordered sub-list.\\n    - Unordered sub-list.\\n3. Actual numbers don't matter, just that it's a number\\n    1. Ordered sub-list\\n        1. Ordered sub-list\\n    2. Ordered sub-list\\n    3. Ordered sub-list\\n4. And another item.\\n```\\n\\n:::\\n\\n## Steps\\n\\n#### Preview\\n\\n::::steps\\n##### Step one\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce vestibulum ante non neque convallis tempor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nam a iaculis libero.\\n\\n##### Step two\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce vestibulum ante non neque convallis tempor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nam a iaculis libero.\\n\\n:::code-group\\n```tsx [console.log]\\nconsole.log('hello world')\\n```\\n\\n```tsx [alert]\\nalert('hello world')\\n```\\n:::\\n\\n:::info\\ntest\\n\\n```tsx\\nconsole.log('hi')\\n```\\n:::\\n\\n##### Step three\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce vestibulum ante non neque convallis tempor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nam a iaculis libero.\\n::::\\n\\n#### Code\\n\\n````md\\n::::steps\\n### Step one\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce vestibulum ante non neque convallis tempor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nam a iaculis libero.\\n\\n### Step two\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce vestibulum ante non neque convallis tempor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nam a iaculis libero.\\n\\n:::code-group\\n```tsx [console.log]\\nconsole.log('hello world')\\n```\\n\\n```tsx [alert]\\nalert('hello world')\\n```\\n:::\\n\\n:::info\\ntest\\n:::\\n\\n### Step three\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce vestibulum ante non neque convallis tempor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nam a iaculis libero.\\n::::\\n````\\n\\n:::tip[Tip]\\nThe `\\\":::\\\"` syntax refers to the [Directives Syntax Proposal](https://talk.commonmark.org/t/generic-directives-plugins-syntax/444).\\n:::\\n\\n## Tables\\n\\n#### Preview\\n\\n| Tables        | Are           | Cool  |\\n| ------------- |:-------------:| -----:|\\n| col 3 is      | right-aligned | $1600 |\\n| col 2 is      | centered      |   $12 |\\n| zebra stripes | are neat      |    $1 |\\n\\n#### Code\\n\\n```md\\n| Tables        | Are           | Cool  |\\n| ------------- |:-------------:| -----:|\\n| col 3 is      | right-aligned | $1600 |\\n| col 2 is      | centered      |   $12 |\\n| zebra stripes | are neat      |    $1 |\\n```\\n\",\"document\":[]}],[\"index.c7fb6d4e2090b3726dd995a0cead77e600a9375dc135636bfec7cbedaf2eb9d2\",{\"mdx\":\"import { HomePage } from '../../../../src/components'\\n\\n# Layouts [Customizing the page layout in Vocs]\\n\\nVocs comes with three built-in layouts: `docs`, `landing`, and `minimal`. Each layout is styled differently, and has its own set of components which are displayed on the page.\\n\\nYou can specify which layout to use by setting the `layout` property in your frontmatter.\\n\\n## Docs (Default)\\n\\nThe `docs` layout is the default layout for all pages. It includes documentation related components like the \\\"edit page\\\" link, outline, and footer navigation.\\n\\n```md\\n---\\nlayout: docs // [!code focus]\\n---\\n\\n# A docs page\\n\\nThis is a docs page.\\n```\\n\\n## Landing\\n\\nThe `landing` layout is a special layout that can be used for a homepage. It does not include a sidebar or any documentation related components.\\n\\n```md\\n---\\nlayout: landing // [!code focus]\\n---\\n\\nThis is a landing page.\\n```\\n\\n:::info\\nAn example of a `landing` layout page can be found on the Vocs home page.\\n:::\\n\\n### `HomePage` component\\n\\nYou can also leverage Vocs' built-in `<HomePage>{:tsx}` components to template a minimal home page.\\n\\n:::code-group\\n\\n```mdx [index.mdx]\\n---\\nlayout: landing\\n---\\n\\nimport { HomePage } from 'vocs/components'\\n\\n<HomePage.Root>\\n  <HomePage.Logo />\\n  <HomePage.Tagline>React Documentation Framework, powered by Vite</HomePage.Tagline>\\n  <HomePage.InstallPackage name=\\\"vocs\\\" type=\\\"init\\\" />\\n  <HomePage.Description>Vocs is a minimal static documentation generator designed to supercharge your documentation workflow, built with modern web technologies.</HomePage.Description>\\n  <HomePage.Buttons>\\n    <HomePage.Button href=\\\"/docs\\\" variant=\\\"accent\\\">Get started</HomePage.Button>\\n    <HomePage.Button href=\\\"https://github.com/wevm/vocs\\\">GitHub</HomePage.Button>\\n  </HomePage.Buttons>\\n</HomePage.Root>\\n```\\n\\n<div data-title=\\\"Preview\\\">\\n  <HomePage.Root>\\n    <HomePage.Logo />\\n    <HomePage.Tagline>React Documentation Framework, powered by Vite</HomePage.Tagline>\\n    <HomePage.InstallPackage name=\\\"vocs\\\" type=\\\"init\\\" />\\n    <HomePage.Description>Vocs is a minimal static documentation generator designed to supercharge your documentation workflow, built with modern web technologies.</HomePage.Description>\\n    <HomePage.Buttons>\\n      <HomePage.Button href=\\\"/docs\\\" variant=\\\"accent\\\">Get started</HomePage.Button>\\n      <HomePage.Button href=\\\"https://github.com/wevm/vocs\\\">GitHub</HomePage.Button>\\n    </HomePage.Buttons>\\n  </HomePage.Root>\\n</div>\\n\\n:::\\n\\n## Minimal\\n\\nThe `minimal` layout is a barebones, blank layout. It does not include any documentation related components, and is useful for pages that don't need them, like a blog.\\n\\n```md\\n---\\nlayout: minimal // [!code focus]\\n---\\n\\n# A minimal page\\n\\nThis page uses a minimal layout.\\n```\\n\\n:::info\\nAn example of a `minimal` layout page can be found on the [Blog page](/blog).\\n:::\\n\\n## Frontmatter Options\\n\\nYou can also control the layout of the page through Frontmatter options.\\n\\n[See here for a list of all Frontmatter options](/docs/api/frontmatter).\\n\\n### Examples\\n\\nThe example below demonstrates a `docs` layout page with no sidebar, outline or logo:\\n\\n```md\\n---\\nshowSidebar: false // [!code focus]\\nshowOutline: false // [!code focus]\\nshowLogo: false // [!code focus]\\n---\\n\\nThis is a page without a sidebar, outline, or logo.\\n```\\n\\nThe example below demonstrates a `minimal` layout page with no logo:\\n\\n```md\\n---\\nlayout: minimal // [!code focus]\\nshowLogo: false // [!code focus]\\n---\\n\\nThis is a minimal layout without the logo.\\n```\\n\\nThe example below demonstrates a `landing` layout page with a viewport width that spans the width of the page:\\n\\n```md\\n---\\nlayout: landing // [!code focus]\\ncontent: // [!code focus]\\n  horizontalPadding: 0px // [!code focus]\\n  width: 100% // [!code focus]\\n  verticalPadding: 0px // [!code focus]\\n---\\n\\nThis is a minimal layout without the logo.\\n```\\n\",\"document\":[]}],[\"index.f46b56fc7eee18f1289f52f5ba0ae84a4e7332c12bff97419027fe197fab0042\",{\"mdx\":\"import { Example } from '../../components/Example'\\n\\n# Kitchen Sink [An MDX Playground for Vocs]\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce vestibulum ante non neque convallis tempor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nam a iaculis libero. Suspendisse bibendum placerat enim, vitae iaculis sapien tincidunt vel. Nunc nunc dui, varius eget diam vitae, sagittis rutrum ante. Vestibulum ut nulla in ante tincidunt lacinia. Suspendisse ex orci, elementum vitae enim sed, pellentesque fermentum tortor. In bibendum sapien at nisi pharetra tincidunt. Etiam eleifend lacus dictum lorem ornare euismod. Nunc ullamcorper nunc mi, ut volutpat libero gravida id. Pellentesque cursus mi id tortor convallis eleifend.\\n\\n## Heading 2\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce vestibulum ante non neque convallis tempor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nam a iaculis libero. Suspendisse bibendum placerat enim, vitae iaculis sapien tincidunt vel. Nunc nunc dui, varius eget diam vitae, sagittis rutrum ante. Vestibulum ut nulla in ante tincidunt lacinia. Suspendisse ex orci, elementum vitae enim sed, pellentesque fermentum tortor. In bibendum sapien at nisi pharetra tincidunt. Etiam eleifend lacus dictum lorem ornare euismod. Nunc ullamcorper nunc mi, ut volutpat libero gravida id. Pellentesque cursus mi id tortor convallis eleifend.\\n\\n### Heading 3\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce vestibulum ante non neque convallis tempor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nam a iaculis libero. Suspendisse bibendum placerat enim, vitae iaculis sapien tincidunt vel. Nunc nunc dui, varius eget diam vitae, sagittis rutrum ante. Vestibulum ut nulla in ante tincidunt lacinia. Suspendisse ex orci, elementum vitae enim sed, pellentesque fermentum tortor. In bibendum sapien at nisi pharetra tincidunt. Etiam eleifend lacus dictum lorem ornare euismod. Nunc ullamcorper nunc mi, ut volutpat libero gravida id. Pellentesque cursus mi id tortor convallis eleifend.\\n\\n#### Heading 4\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce vestibulum ante non neque convallis tempor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nam a iaculis libero. Suspendisse bibendum placerat enim, vitae iaculis sapien tincidunt vel. Nunc nunc dui, varius eget diam vitae, sagittis rutrum ante. Vestibulum ut nulla in ante tincidunt lacinia. Suspendisse ex orci, elementum vitae enim sed, pellentesque fermentum tortor. In bibendum sapien at nisi pharetra tincidunt. Etiam eleifend lacus dictum lorem ornare euismod. Nunc ullamcorper nunc mi, ut volutpat libero gravida id. Pellentesque cursus mi id tortor convallis eleifend.\\n\\n##### Heading 5\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce vestibulum ante non neque convallis tempor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nam a iaculis libero. Suspendisse bibendum placerat enim, vitae iaculis sapien tincidunt vel. Nunc nunc dui, varius eget diam vitae, sagittis rutrum ante. Vestibulum ut nulla in ante tincidunt lacinia. Suspendisse ex orci, elementum vitae enim sed, pellentesque fermentum tortor. In bibendum sapien at nisi pharetra tincidunt. Etiam eleifend lacus dictum lorem ornare euismod. Nunc ullamcorper nunc mi, ut volutpat libero gravida id. Pellentesque cursus mi id tortor convallis eleifend.\\n\\n###### Heading 6\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce vestibulum ante non neque convallis tempor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nam a iaculis libero. Suspendisse bibendum placerat enim, vitae iaculis sapien tincidunt vel. Nunc nunc dui, varius eget diam vitae, sagittis rutrum ante. Vestibulum ut nulla in ante tincidunt lacinia. Suspendisse ex orci, elementum vitae enim sed, pellentesque fermentum tortor. In bibendum sapien at nisi pharetra tincidunt. Etiam eleifend lacus dictum lorem ornare euismod. Nunc ullamcorper nunc mi, ut volutpat libero gravida id. Pellentesque cursus mi id tortor convallis eleifend.\\n\\n<span>**Strong Title**</span>\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce vestibulum ante non neque convallis tempor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nam a iaculis libero. Suspendisse bibendum placerat enim, vitae iaculis sapien tincidunt vel. Nunc nunc dui, varius eget diam vitae, sagittis rutrum ante. Vestibulum ut nulla in ante tincidunt lacinia. Suspendisse ex orci, elementum vitae enim sed, pellentesque fermentum tortor. In bibendum sapien at nisi pharetra tincidunt. Etiam eleifend lacus dictum lorem ornare euismod. Nunc ullamcorper nunc mi, ut volutpat libero gravida id. Pellentesque cursus mi id tortor convallis eleifend.\\n\\n## Paragraphs\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce vestibulum ante non neque convallis tempor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nam a iaculis libero. Suspendisse bibendum placerat enim, vitae iaculis sapien tincidunt vel. Nunc nunc dui, varius eget diam vitae, sagittis rutrum ante. Vestibulum ut nulla in ante tincidunt lacinia. Suspendisse ex orci, elementum vitae enim sed, pellentesque fermentum tortor. In bibendum sapien at nisi pharetra tincidunt. Etiam eleifend lacus dictum lorem ornare euismod. Nunc ullamcorper nunc mi, ut volutpat libero gravida id. Pellentesque cursus mi id tortor convallis eleifend. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce vestibulum ante non neque convallis tempor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nam a iaculis libero. Suspendisse bibendum placerat enim, vitae iaculis sapien tincidunt vel. Nunc nunc dui, varius eget diam vitae, sagittis rutrum ante. Vestibulum ut nulla in ante tincidunt lacinia. Suspendisse ex orci, elementum vitae enim sed, pellentesque fermentum tortor. In bibendum sapien at nisi pharetra tincidunt. Etiam eleifend lacus dictum lorem ornare euismod. Nunc ullamcorper nunc mi, ut volutpat libero gravida id. Pellentesque cursus mi id tortor convallis eleifend.\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce vestibulum ante non neque convallis tempor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nam a iaculis libero. Suspendisse bibendum placerat enim, vitae iaculis sapien tincidunt vel. Nunc nunc dui, varius eget diam vitae, sagittis rutrum ante. Vestibulum ut nulla in ante tincidunt lacinia. Suspendisse ex orci, elementum vitae enim sed, pellentesque fermentum tortor. In bibendum sapien at nisi pharetra tincidunt. Etiam eleifend lacus dictum lorem ornare euismod. Nunc ullamcorper nunc mi, ut volutpat libero gravida id. Pellentesque cursus mi id tortor convallis eleifend. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce vestibulum ante non neque convallis tempor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nam a iaculis libero. Suspendisse bibendum placerat enim, vitae iaculis sapien tincidunt vel. Nunc nunc dui, varius eget diam vitae, sagittis rutrum ante. Vestibulum ut nulla in ante tincidunt lacinia. Suspendisse ex orci, elementum vitae enim sed, pellentesque fermentum tortor. In bibendum sapien at nisi pharetra tincidunt. Etiam eleifend lacus dictum lorem ornare euismod. Nunc ullamcorper nunc mi, ut volutpat libero gravida id. Pellentesque cursus mi id tortor convallis eleifend.\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce vestibulum ante non neque convallis tempor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nam a iaculis libero. Suspendisse bibendum placerat enim, vitae iaculis sapien tincidunt vel. Nunc nunc dui, varius eget diam vitae, sagittis rutrum ante. Vestibulum ut nulla in ante tincidunt lacinia. Suspendisse ex orci, elementum vitae enim sed, pellentesque fermentum tortor. In bibendum sapien at nisi pharetra tincidunt. Etiam eleifend lacus dictum lorem ornare euismod. Nunc ullamcorper nunc mi, ut volutpat libero gravida id. Pellentesque cursus mi id tortor convallis eleifend. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce vestibulum ante non neque convallis tempor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nam a iaculis libero. Suspendisse bibendum placerat enim, vitae iaculis sapien tincidunt vel. Nunc nunc dui, varius eget diam vitae, sagittis rutrum ante. Vestibulum ut nulla in ante tincidunt lacinia. Suspendisse ex orci, elementum vitae enim sed, pellentesque fermentum tortor. In bibendum sapien at nisi pharetra tincidunt. Etiam eleifend lacus dictum lorem ornare euismod. Nunc ullamcorper nunc mi, ut volutpat libero gravida id. Pellentesque cursus mi id tortor convallis eleifend.\\n\\n## Emphasis\\n\\nEmphasis, aka italics, with *asterisks* or _underscores_.\\n\\nStrong emphasis, aka bold, with **asterisks** or __underscores__.\\n\\nCombined emphasis with **asterisks and _underscores_**.\\n\\nStrikethrough uses two tildes. ~~Scratch this.~~\\n\\n## Callouts\\n\\n:::note\\nThis is a note callout. [Link](https://google.com)\\n:::\\n\\n:::info\\nThis is an info callout. [Link](https://google.com)\\n:::\\n\\n:::warning\\nThis is a warning callout. [Link](https://google.com)\\n:::\\n\\n:::danger\\nThis is a danger callout. [Link](https://google.com)\\n:::\\n\\n:::tip\\nThis is a tip callout. [Link](https://google.com)\\n:::\\n\\n:::success\\nThis is a success callout. [Link](https://google.com)\\n:::\\n\\n:::tip[Handy Tip]\\nThis is a tip callout with title.\\n:::\\n\\n## Details\\n\\n:::details[See more]\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce vestibulum ante non neque convallis tempor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce vestibulum ante non neque convallis tempor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce vestibulum ante non neque convallis tempor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.\\n:::\\n\\n::::note\\n:::details\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce vestibulum ante non neque convallis tempor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce vestibulum ante non neque convallis tempor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce vestibulum ante non neque convallis tempor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.\\n:::\\n::::\\n\\n::::danger[Error]\\n\\nAn error occurred!\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce vestibulum ante non neque convallis tempor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce vestibulum ante non neque convallis tempor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.\\n\\n:::details[Stack trace]\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce vestibulum ante non neque convallis tempor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce vestibulum ante non neque convallis tempor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce vestibulum ante non neque convallis tempor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.\\n:::\\n\\n::::\\n\\n## Lists\\n\\n### Ordered list\\n\\n1. First ordered list item\\n2. Another item\\n    - Unordered sub-list.\\n      - Unordered sub-list.\\n        - Unordered sub-list.\\n      - Unordered sub-list.\\n    - Unordered sub-list.\\n    - Unordered sub-list.\\n3. Actual numbers don't matter, just that it's a number\\n    1. Ordered sub-list\\n        1. Ordered sub-list\\n    2. Ordered sub-list\\n    3. Ordered sub-list\\n4. And another item.\\n\\n### Unordered list\\n\\n* First item\\n  * Sub list\\n    * Sub list\\n    * Sub list\\n  * Sub list\\n* Second item\\n  * Sub list\\n* Third item\\n\\n## Links\\n\\nwww.example.com, https://example.com, and contact@example.com.\\n\\n[I'm an inline-style link](https://www.google.com)\\n\\n[I'm an inline-style link with title](https://www.google.com \\\"Google's Homepage\\\")\\n\\n[I'm a reference-style link][Arbitrary case-insensitive reference text]\\n\\n[You can use numbers for reference-style link definitions][1]\\n\\nOr leave it empty and use the [link text itself].\\n\\nSome text to show that the reference links can follow later.\\n\\n[arbitrary case-insensitive reference text]: https://www.mozilla.org\\n[1]: http://slashdot.org\\n[link text itself]: http://www.reddit.com\\n\\n## Images\\n\\nInline-style: \\n![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \\\"Logo Title Text 1\\\")\\n\\nReference-style: \\n![alt text][logo]\\n\\n[logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \\\"Logo Title Text 2\\\"\\n\\n## `Code` and Syntax Highlighting\\n\\nInline `code` has `back-ticks around` it.\\n\\nInline [`code`]() with link.\\n\\nInline `console.log(\\\"hello world\\\"){:js}` highlighted code\\n\\n```plaintext\\nwowee plain text!\\n```\\n\\n```bash [Terminal]\\nnpm i vocs\\n```\\n\\n```ts [example.ts]\\ntype Example = string // [!code hl]\\nconst example: Example = 'example'\\n```\\n \\n```ts [Line Highlight & Numbers] showLineNumbers {2,3,6-9}\\n// 1. Import modules.\\nimport { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\n// 2. Set up your client with desired chain & transport.\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\\n// 3. Consume an action!\\nconst blockNumber = await client.getBlockNumber()\\n```\\n\\n```ts [Word Focus] /mainnet/1-2 /client/2-3\\n// 1. Import modules.\\nimport { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\n// 2. Set up your client with desired chain & transport.\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\\n// 3. Consume an action!\\nconst blockNumber = await client.getBlockNumber()\\n```\\n\\n```ts [Line Focus]\\n// 1. Import modules.\\nimport { createPublicClient, http } from 'viem' \\nimport { mainnet } from 'viem/chains'\\n\\n// 2. Set up your client with desired chain & transport.\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\\n// 3. Consume an action! // [!code focus]\\nconst blockNumber = await client.getBlockNumber() // [!code focus]\\n```\\n\\n```ts [Diff]\\n// 1. Import modules.\\nimport { createPublicClient } from 'viem' // [!code --]\\nimport { createPublicClient, http } from 'viem' // [!code ++]\\nimport { mainnet } from 'viem/chains'\\n\\n// 2. Set up your client with desired chain & transport.\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\\n// 3. Consume an action! \\nconst blockNumber = await client.getBlockNumber()\\n```\\n\\n:::tip[Tip]\\nMake sure to do the thing that does stuff.\\n:::\\n\\n## Code group\\n\\n:::code-group\\n\\n```bash [npm]\\nnpm i viem\\n```\\n\\n```bash [pnpm]\\npnpm i viem\\n```\\n\\n```bash [bun]\\nbun i viem\\n```\\n\\n:::\\n\\n:::code-group\\n\\n<div data-title=\\\"Preview\\\">\\n  <Example />\\n</div>\\n\\n```tsx [example.tsx]\\n<div>test</div>\\n```\\n\\n:::\\n\\n## Steps\\n\\n::::steps\\n### Step one\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce vestibulum ante non neque convallis tempor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nam a iaculis libero.\\n\\n### Step two\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce vestibulum ante non neque convallis tempor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nam a iaculis libero.\\n\\n:::code-group\\n```tsx [console.log]\\nconsole.log('hello world')\\n```\\n\\n```tsx [alert]\\nalert('hello world')\\n```\\n:::\\n\\n:::info\\ntest\\n:::\\n\\n### Step three\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce vestibulum ante non neque convallis tempor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nam a iaculis libero.\\n::::\\n\\n## Blockquote\\n\\n> Blockquotes are very handy in email to emulate reply text.\\n> This line is part of the same quote.\\n\\n> This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote. \\n\\n## Tables\\n\\nColons can be used to align columns.\\n\\n| Tables        | Are           | Cool  |\\n| ------------- |:-------------:| -----:|\\n| col 3 is      | right-aligned | $1600 |\\n| col 2 is      | centered      |   $12 |\\n| zebra stripes | are neat      |    $1 |\\n\\nThere must be at least 3 dashes separating each header cell.\\nThe outer pipes (|) are optional, and you don't need to make the \\nraw Markdown line up prettily. You can also use inline Markdown.\\n\\nMarkdown | Less | Pretty\\n--- | --- | ---\\n*Still* | `renders` | **nicely**\\n1 | 2 | 3\\n\\n## Footnotes\\n\\nHere is a simple footnote[^1].\\n\\nA footnote can also have multiple lines[^2].  \\n\\nYou can also use words, to fit your writing style more closely[^note].\\n\\n[^1]: My reference.\\n[^2]: Every new line should be prefixed with 2 spaces.  \\n  This allows you to have a footnote with multiple lines.\\n[^note]:\\n    Named footnotes will still render with numbers instead of the text but allow easier identification and linking.  \\n    This footnote also has been made with a different syntax using 4 spaces for new lines.\\n\\n## Inline HTML\\n\\n<dl>\\n  <dt>Definition list</dt>\\n  <dd>Is something people use sometimes.</dd>\\n  <dt>Markdown in HTML</dt>\\n  <dd>Does *not* work **very** well. Use HTML <em>tags</em>.</dd>\\n</dl>\\n\\n## Inline React\\n\\n<Example />\\n\\n## Horizontal Rule\\n\\nThree or more...\\n\\n---\\n\\nHyphens\\n\\n***\\n\\nAsterisks\\n\\n___\\n\\nUnderscores\\n\\n## Tasklist\\n\\n* [ ] to do\\n* [x] done\",\"document\":[]}],[\"index.5eec909529fc181af505012888aabb6617db207ace73bbfd19950765995cf6be\",{\"mdx\":\"# Markdown Snippets [Including other Markdown files in Markdown]\\n\\nYou can include other Markdown files in a Markdown file by making use of the `import{:ts}` statement & MDX.\\n\\n:::warning\\nThis only works with MDX (`.mdx`) files. If you want to take advantage of this feature and you are using a `.md` file, rename the file extension to `.mdx`.\\n:::\\n\\n## Quick Start\\n\\n::::steps\\n\\n### Create a snippet\\n\\nFirst, we will create a snippet called `snippet.mdx` that we will import into another Markdown file.\\n\\n```mdx [snippet.mdx]\\n### Hello world\\n\\nThis is my snippet.\\n```\\n\\n### Import the snippet\\n\\nNext, we will import the snippet into our MDX file using an `import{:ts}` statement. It compiles to a React component, so we can render it with `<Snippet />{:tsx}`.\\n\\n```mdx [example.mdx]\\nimport Snippet from './snippet.mdx'\\n\\n# Example\\n\\nThis is an example of including a snippet in a Markdown file.\\n\\n<Snippet />\\n```\\n\\n### Output\\n\\nThe resulting output will look like this:\\n\\n<div className=\\\"vocs_Content\\\" style={{ background: 'var(--vocs-color_background2)', borderRadius: '4px' }}>\\n# Example\\n\\nThis is an example of including a snippet in a Markdown file.\\n\\n## Hello world\\n\\nThis is my snippet.\\n</div>\\n\\n::::\\n\\n## Tip: Passing Props\\n\\nAs we are just rendering a React component, we can also pass props to `<Snippet />{:tsx}`. We can access those props in the MDX file with the `props` global variable.\\n\\n:::code-group\\n```mdx [example.mdx]\\nimport Snippet from './snippet.mdx'\\n\\n# Example\\n\\nThis is an example of including a snippet in a Markdown file.\\n\\n<Snippet title=\\\"Hello world\\\" content=\\\"This is my snippet.\\\" />\\n```\\n\\n```mdx [snippet.mdx]\\n## {props.title}\\n\\n{props.content}\\n``` \\n:::\",\"document\":[]}],[\"index.46326182de1da8fcd07acc73277349e7026a7b68a09fd57d98d743ed9c571a33\",{\"mdx\":\"# Config [Define global metadata for your documentation]\\n\\nVocs uses a [configuration file (`vocs.config.ts`)](/docs/structure#configuration-file) to define global metadata for your documentation. This includes things like the site title, description, logo, sidebar, and more for your project. \\n\\n## Initialize Config File\\n\\nThe Vocs config can be defined in a `vocs.config.ts` file at the root of your project.\\n\\n:::code-group\\n\\n```txt [Directory Structure]\\nviem/\\n├── docs/\\n├── node_modules/\\n├── src/\\n├── package.json\\n└── vocs.config.ts // [!code ++]\\n```\\n\\n```ts [vocs.config.ts] twoslash\\nimport { defineConfig } from 'vocs'\\n\\nexport default defineConfig({\\n  title: 'Viem'\\n})\\n```\\n\\n:::\\n\\n## Parameters\\n\\n### banner\\n\\n- **Type:** `Banner`\\n\\nConfiguration for the banner fixed to the top of the page.\\n\\nCan be a Markdown string, a React Element, or an object with the following properties:\\n- `dismissable`: Whether or not the banner can be dismissed.\\n- `backgroundColor`: The background color of the banner.\\n- `content`: The content of the banner.\\n- `height`: The height of the banner.\\n- `textColor`: The text color of the banner.\\n\\n:::tip\\nWhen using JSX, remember to rename the config file extension to `.tsx` or `.jsx`.\\n:::\\n\\n```ts twoslash\\nimport { defineConfig } from 'vocs'\\n\\n// @log:   ↓ as Markdown\\nexport default defineConfig({\\n  banner: 'Head to our new [Discord](https://discord.gg/JUrRkGweXV)!', // [!code focus]\\n  title: 'Viem'\\n})\\n```\\n\\n```tsx twoslash\\n// @noErrors\\nimport { defineConfig } from 'vocs'\\n\\n// @log:   ↓ as a React Element\\nexport default defineConfig({\\n  banner: <div>Head to our new <a href=\\\"https://discord.gg/JUrRkGweXV\\\">Discord</a></div>, // [!code focus]\\n  title: 'Viem'\\n})\\n```\\n\\n```ts twoslash\\nimport { defineConfig } from 'vocs'\\n\\n// @log:   ↓ as an object\\nexport default defineConfig({\\n  banner: { // [!code focus]\\n    dismissable: false, // [!code focus]\\n    backgroundColor: 'red', // [!code focus]\\n    content: 'Head to our new [Discord](https://discord.gg/JUrRkGweXV)!', // [!code focus]\\n    height: '28px', // [!code focus]\\n    textColor: 'white', // [!code focus]\\n  }, // [!code focus]\\n  title: 'Viem'\\n})\\n```\\n\\n### basePath\\n\\n- **Type:** `string`\\n\\nThe base path the documentation will be deployed at. All assets & pages will be prefixed with this path.\\n\\nFor example, this is useful for deploying to GitHub Pages. \\nIf the target URL is `https://example.github.io/foo`, then the `basePath` should be set to `/foo`.\\n\\n```ts twoslash\\nimport { defineConfig } from 'vocs'\\n\\nexport default defineConfig({\\n  basePath: '/docs', // [!code focus]\\n})\\n```\\n\\n### baseUrl\\n\\n- **Type:** `string`\\n\\nThe base URL for your documentation. This is used to populate the `<base>` tag in the `<head>` of the page, \\nand is used to form the `%logo` variable for dynamic OG images.\\n\\n```ts twoslash\\nimport { defineConfig } from 'vocs'\\n\\nexport default defineConfig({\\n  baseUrl: 'https://vocs.dev', // [!code focus]\\n})\\n```\\n\\n### blogDir\\n\\n- **Type:** `string`\\n- **Default:** `\\\"./pages/blog\\\"`\\n\\nPath to blog pages relative to project root. Used to extract posts from the filesystem.\\n\\n```ts twoslash\\nimport { defineConfig } from 'vocs'\\n\\nexport default defineConfig({\\n  blogDir: './pages/writings', // [!code focus]\\n  title: 'Viem'\\n})\\n```\\n\\n### description\\n\\n- **Type:** `string`\\n\\nGeneral description for the documentation.\\n\\n```ts twoslash\\nimport { defineConfig } from 'vocs'\\n\\nexport default defineConfig({\\n  description: 'Build reliable apps & libraries with lightweight, composable, and type-safe modules that interface with Ethereum.', // [!code focus]\\n  title: 'Viem'\\n})\\n```\\n\\n### editLink\\n\\n- **Type:** `EditLink`\\n\\nEdit location for the documentation.\\n\\n```ts twoslash\\nimport { defineConfig } from 'vocs'\\n\\nexport default defineConfig({\\n  editLink: { // [!code focus]\\n    pattern: 'https://github.com/wevm/viem/edit/main/site/pages/:path', // [!code focus]\\n    text: 'Edit on GitHub' // [!code focus]\\n  }, // [!code focus]\\n  title: 'Viem'\\n})\\n```\\n\\n#### editLink.pattern\\n\\n- **Type:** `string | (() => string)`\\n\\nEdit link pattern.\\n\\n```ts twoslash\\nimport { defineConfig } from 'vocs'\\n\\nexport default defineConfig({\\n  editLink: { // [!code focus]\\n    pattern: 'https://github.com/wevm/viem/edit/main/site/pages/:path' // [!code focus]\\n  }, // [!code focus]\\n  title: 'Viem'\\n})\\n```\\n\\n#### editLink.text\\n\\n- **Type:** `string`\\n\\nEdit link text.\\n\\n```ts twoslash\\nimport { defineConfig } from 'vocs'\\n\\nexport default defineConfig({\\n  editLink: { // [!code focus]\\n    pattern: 'https://github.com/wevm/viem/edit/main/site/pages/:path', \\n    text: 'Edit on GitHub' // [!code focus]\\n  }, // [!code focus]\\n  title: 'Viem'\\n})\\n```\\n\\n### font\\n\\n- **Type:** `{ google: string }`\\n\\nBase font face.\\n\\n:::warning\\nOnly Google Fonts are supported at the moment.\\n:::\\n\\n```ts twoslash\\nimport { defineConfig } from 'vocs'\\n\\nexport default defineConfig({\\n  font: { // [!code focus]\\n    google: 'Inter' // [!code focus]\\n  }, // [!code focus]\\n  title: 'Viem'\\n})\\n```\\n\\nYou can also define the font family for inline code & code blocks:\\n\\n```ts twoslash\\nimport { defineConfig } from 'vocs'\\n\\nexport default defineConfig({\\n  font: { \\n    default: { \\n      google: 'Inter', \\n    }, \\n    mono: { // [!code focus]\\n      google: 'Dancing Script', // [!code focus]\\n    }, // [!code focus]\\n  },\\n  title: 'Viem'\\n})\\n```\\n\\n### head\\n\\n- **Type:** `ReactElement | { [path: string]: ReactElement } | ({ path: string }) => ReactElement)`\\n\\nAdditional tags to include in the `<head>` tag of the page HTML.\\n\\n:::tip\\nWhen using JSX, remember to rename the config file extension to `.tsx` or `.jsx`.\\n:::\\n\\n#### Element\\n\\n```tsx twoslash\\n// @noErrors\\nimport * as React from 'react'\\nimport { defineConfig } from 'vocs'\\n\\nexport default defineConfig({\\n  head: ( // [!code focus]\\n    <> // [!code focus]\\n      <meta property=\\\"og:type\\\" content=\\\"website\\\" /> // [!code focus]\\n      <meta property=\\\"og:title\\\" content=\\\"viem · TypeScript Interface for Ethereum\\\" /> // [!code focus]\\n      <meta property=\\\"og:image\\\" content=\\\"https://viem.sh/og-image.png\\\" /> // [!code focus]\\n      <meta property=\\\"og:url\\\" content=\\\"https://viem.sh\\\" /> // [!code focus]\\n      <meta property=\\\"og:description\\\" content=\\\"Build reliable Ethereum apps & libraries with lightweight, composable, & type-safe modules from viem.\\\" /> // [!code focus]\\n    </> // [!code focus]\\n  ), // [!code focus]\\n  title: 'Viem'\\n})\\n```\\n\\n#### Path → Element Object \\n\\nYou can specify a `path` → `ReactElement` object for the `head` with paths as keys.\\n\\n```tsx twoslash\\n// @noErrors\\nimport * as React from 'react'\\nimport { defineConfig } from 'vocs'\\n\\nexport default defineConfig({\\n  head: { // [!code focus]\\n    '/': /* ... */, // [!code focus]\\n    '/docs': /* ... */, // [!code focus]\\n  }, // [!code focus]\\n  title: 'Viem'\\n})\\n```\\n\\n#### Function\\n\\nYou can specify a function that returns a `ReactElement`. Useful if you want to have more dynamic control over rendering head tags.\\n\\n```tsx twoslash\\n// @noErrors\\nimport * as React from 'react'\\nimport { defineConfig } from 'vocs'\\n\\nexport default defineConfig({\\n  head({ path }) { // [!code focus]\\n    if (path === '/docs') return /* ... */ // [!code focus]\\n    return /* ... */ // [!code focus]\\n  }, // [!code focus]\\n  title: 'Viem'\\n})\\n```\\n\\n:::tip[Tip]\\nThe `head` function can also be `async`.\\n:::\\n\\n### iconUrl\\n\\n- **Type:** `string | { light: string; dark: string }`\\n\\nIcon URL. Used as the website's favicon.\\n\\n:::info[Note]\\nAssets need to be placed in the `public` directory.\\n:::\\n\\n```tsx twoslash\\nimport { defineConfig } from 'vocs'\\n\\nexport default defineConfig({\\n  iconUrl: '/icon.svg', // [!code focus]\\n  title: 'Viem'\\n})\\n```\\n\\nYou can also specify icons for light and dark mode.\\n\\n```tsx twoslash\\nimport { defineConfig } from 'vocs'\\n\\nexport default defineConfig({\\n  iconUrl: { // [!code focus]\\n    light: '/icon-light.svg', // [!code focus]\\n    dark: '/icon-dark.svg' // [!code focus]\\n  }, // [!code focus]\\n  title: 'Viem'\\n})\\n```\\n\\n### logoUrl\\n\\n- **Type:** `string | { light: string; dark: string }`\\n\\nLogo URL. Used for the sidebar and mobile top nav header image.\\n\\n:::info[Note]\\nAssets need to be placed in the `public` directory.\\n:::\\n\\n```tsx twoslash\\nimport { defineConfig } from 'vocs'\\n\\nexport default defineConfig({\\n  logoUrl: '/logo.svg', // [!code focus]\\n  title: 'Viem'\\n})\\n```\\n\\nYou can also specify logos for light and dark mode.\\n\\n```tsx twoslash\\nimport { defineConfig } from 'vocs'\\n\\nexport default defineConfig({\\n  logoUrl: { // [!code focus]\\n    light: '/logo-light.svg', // [!code focus]\\n    dark: '/logo-dark.svg' // [!code focus]\\n  }, // [!code focus]\\n  title: 'Viem'\\n})\\n```\\n\\n### markdown\\n\\n- **Type:** `Markdown`\\n\\nMarkdown configuration.\\n\\n#### markdown.code\\n\\n- **Type:** `{ theme: { light: string; dark: string } }`\\n\\nUsed to configure the syntax highlighting theme of code blocks.\\n\\n```tsx twoslash\\nimport { defineConfig } from 'vocs'\\n\\nexport default defineConfig({\\n  markdown: { // [!code focus]\\n    code: { // [!code focus]\\n      themes: { // [!code focus]\\n        light: 'github-light', // [!code focus]\\n        dark: 'github-dark' // [!code focus]\\n      } // [!code focus]\\n    } // [!code focus]\\n  }, // [!code focus]\\n  title: 'Viem'\\n})\\n```\\n\\n::::note\\n:::details[Available Built-in Themes]\\n```ts\\n\\\"aurora-x\\\" \\n\\\"catppuccin-frappe\\\" \\n\\\"catppuccin-latte\\\" \\\"catppuccin-macchiato\\\"\\n\\\"catppuccin-mocha\\\"\\n\\\"dark-plus\\\"\\n\\\"dracula\\\"\\n\\\"dracula-soft\\\"\\n\\\"github-dark\\\"\\n\\\"github-dark-dimmed\\\"\\n\\\"github-light\\\"\\n\\\"light-plus\\\"\\n\\\"material-theme\\\"\\n\\\"material-theme-darker\\\"\\n\\\"material-theme-lighter\\\"\\n\\\"material-theme-ocean\\\"\\n\\\"material-theme-palenight\\\"\\n\\\"min-dark\\\"\\n\\\"min-light\\\"\\n\\\"monokai\\\"\\n\\\"nord\\\"\\n\\\"one-dark-pro\\\"\\n\\\"poimandres\\\"\\n\\\"red\\\"\\n\\\"rose-pine\\\"\\n\\\"rose-pine-dawn\\\"\\n\\\"rose-pine-moon\\\"\\n\\\"slack-dark\\\"\\n\\\"slack-ochin\\\"\\n\\\"solarized-dark\\\"\\n\\\"solarized-light\\\"\\n\\\"vitesse-black\\\"\\n\\\"vitesse-dark\\\"\\n\\\"vitesse-light\\\"\\n```\\n:::\\n::::\\n\\n#### markdown.remarkPlugins\\n\\n- **Type:** `PluggableList`\\n\\nUsed to configure the remark plugins used to transform Markdown.\\n\\n[See list of plugins](https://github.com/remarkjs/remark/blob/main/doc/plugins.md#list-of-plugins)\\n\\n```tsx twoslash\\n// @noErrors\\nimport { defineConfig } from 'vocs'\\nimport remarkMath from 'remark-math' // [!code focus]\\n\\nexport default defineConfig({\\n  markdown: { // [!code focus]\\n    remarkPlugins: [ // [!code focus]\\n      remarkMath // [!code focus]\\n    ] // [!code focus]\\n  }, // [!code focus]\\n  title: 'Viem'\\n})\\n```\\n\\n#### markdown.rehypePlugins\\n\\n- **Type:** `PluggableList`\\n\\nUsed to configure the rehype plugins used to transform generated HTML from Markdown.\\n\\n[See list of plugins](https://github.com/rehypejs/rehype/blob/main/doc/plugins.md)\\n\\n```tsx twoslash\\n// @noErrors\\nimport { defineConfig } from 'vocs'\\nimport rehypeSlots from 'rehype-slots' // [!code focus]\\n\\nexport default defineConfig({\\n  markdown: { // [!code focus]\\n    rehypePlugins: [ // [!code focus]\\n      rehypeSlots // [!code focus]\\n    ] // [!code focus]\\n  }, // [!code focus]\\n  title: 'Viem'\\n})\\n```\\n\\n### ogImageUrl\\n\\n- **Type:** `string | { [path: string]: string }`\\n\\nOG Image URL. `null` to disable.\\n\\n```tsx twoslash\\nimport { defineConfig } from 'vocs'\\n\\nexport default defineConfig({\\n  ogImageUrl: 'https://vocs.dev/api/og?logo=%logo&title=%title&description=%description', // [!code focus]\\n  title: 'Viem'\\n})\\n```\\n\\nYou can also specify an object for the `ogImageUrl` with paths as keys.\\n\\nThis will render a different OG image depending on the path the user is on.\\n\\n```tsx twoslash\\nimport { defineConfig } from 'vocs'\\n\\nexport default defineConfig({\\n  ogImageUrl: { // [!code focus]\\n    '/': 'https://vocs.dev/og-image.png', // [!code focus]\\n    '/docs': 'https://vocs.dev/api/og?logo=%logo&title=%title&description=%description', // [!code focus]\\n  }, // [!code focus]\\n  title: 'Viem'\\n})\\n```\\n\\n### rootDir\\n\\n- **Type:** `string`\\n- **Default:** `\\\"docs\\\"`\\n\\nDocumentation root directory. Can be an absolute path, or a path relative from the location of the config file itself.\\n\\n```tsx twoslash\\nimport { defineConfig } from 'vocs'\\n\\nexport default defineConfig({\\n  rootDir: 'site', // [!code focus]\\n  title: 'Viem'\\n})\\n```\\n\\n### search\\n\\n- **Type:** `Search`\\n\\nSearch configuration. Accepts [`MiniSearch` options](https://lucaong.github.io/minisearch/types/MiniSearch.SearchOptions.html).\\n\\n```tsx twoslash\\nimport { defineConfig } from 'vocs'\\n\\nexport default defineConfig({\\n  search: { // [!code focus]\\n    boostDocument(documentId) { // [!code focus]\\n      return documentId === '/core' ? 2 : 1 // [!code focus]\\n    } // [!code focus]\\n  }, // [!code focus]\\n  title: 'Viem'\\n})\\n```\\n\\n### sidebar\\n\\n- **Type:** `Sidebar`\\n\\nNavigation displayed on the sidebar.\\n\\n```tsx twoslash\\nimport { defineConfig } from 'vocs'\\n\\nexport default defineConfig({\\n  sidebar: [ // [!code focus]\\n    { // [!code focus]\\n      text: 'Getting Started', // [!code focus]\\n      link: '/docs', // [!code focus]\\n    }, // [!code focus]\\n    { // [!code focus]\\n      text: 'API', // [!code focus]\\n      collapsed: true, // [!code focus]\\n      items: [ // [!code focus]\\n        { // [!code focus]\\n          text: 'Config', // [!code focus]\\n          link: '/docs/api/config', // [!code focus]\\n        }, // [!code focus]\\n      ], // [!code focus]\\n    } // [!code focus]\\n  ], // [!code focus]\\n  title: 'Viem'\\n})\\n```\\n\\nYou can also specify an object for the sidebar with paths as keys and sidebar items as values.\\n\\nThis will render a different sidebar depending on the path the user is on.\\n\\n```tsx twoslash\\nimport { defineConfig } from 'vocs'\\n\\nexport default defineConfig({\\n  sidebar: { // [!code focus]\\n    '/guide': [{ // [!code focus]\\n      text: 'Getting Started', // [!code focus]\\n      link: '/guide', // [!code focus]\\n    }], // [!code focus]\\n    '/api': [{ // [!code focus]\\n      text: 'Config', // [!code focus]\\n      link: '/api/config', // [!code focus]\\n    }], // [!code focus]\\n  }, // [!code focus]\\n  title: 'Viem'\\n})\\n```\\n\\n### socials\\n\\n- **Type:** `Socials`\\n\\nSocial links displayed in the top navigation.\\n\\nSupports **Discord**, **GitHub**, **Telegram**, **X**, and **Warpcast**.\\n\\n```tsx twoslash\\nimport { defineConfig } from 'vocs'\\n\\nexport default defineConfig({\\n  socials: [ // [!code focus]\\n    { // [!code focus]\\n      icon: 'github', // [!code focus]\\n      link: 'https://github.com/wevm/viem', // [!code focus]\\n    }, // [!code focus]\\n    { // [!code focus]\\n      icon: 'x', // [!code focus]\\n      link: 'https://twitter.com/wevm_dev', // [!code focus]\\n    }, // [!code focus]\\n  ], // [!code focus]\\n  title: 'Viem'\\n})\\n```\\n\\n### sponsors\\n\\n- **Type:** `SponsorSet`\\n\\nSet of sponsors to display on MDX directives and (optionally) the sidebar.\\n\\n```tsx twoslash\\nimport { defineConfig } from 'vocs'\\n\\nexport default defineConfig({\\n  sponsors: [ // [!code focus]\\n    { // [!code focus]\\n      name: 'Collaborator', // [!code focus]\\n      height: 120, // [!code focus]\\n      items: [ // [!code focus]\\n        [ // [!code focus]\\n          { // [!code focus]\\n            name: 'Paradigm', // [!code focus]\\n            link: 'https://paradigm.xyz', // [!code focus]\\n            image: // [!code focus]\\n              'https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/paradigm-light.svg', // [!code focus]\\n          }, // [!code focus]\\n        ], // [!code focus]\\n      ], // [!code focus]\\n    }, // [!code focus]\\n    { // [!code focus]\\n      name: 'Large Enterprise', // [!code focus]\\n      height: 60, // [!code focus]\\n      items: [ // [!code focus]\\n        [ // [!code focus]\\n          { // [!code focus]\\n            name: 'WalletConnect', // [!code focus]\\n            link: 'https://walletconnect.com', // [!code focus]\\n            image: // [!code focus]\\n              'https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/walletconnect-light.svg', // [!code focus]\\n          }, // [!code focus]\\n          { // [!code focus]\\n            name: 'Stripe', // [!code focus]\\n            link: 'https://www.stripe.com', // [!code focus]\\n            image: // [!code focus]\\n              'https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/stripe-light.svg', // [!code focus]\\n          }, // [!code focus]\\n        ], // [!code focus]\\n      ], // [!code focus]\\n    }, // [!code focus]\\n  ], // [!code focus]\\n  title: 'Viem'\\n})\\n```\\n\\n### theme\\n\\n- **Type:** `Theme`\\n\\nTheme configuration.\\n\\n[Read more about theming](/docs/guides/theming).\\n\\n```tsx twoslash\\nimport { defineConfig } from 'vocs'\\n\\nexport default defineConfig({\\n  theme: { // [!code focus]\\n    accentColor: '#ff0000', // [!code focus]\\n    variables: { // [!code focus]\\n      color: { // [!code focus]\\n        background: { // [!code focus]\\n          light: 'white', // [!code focus]\\n          dark: 'black' // [!code focus]\\n        } // [!code focus]\\n      } // [!code focus]\\n    } // [!code focus]\\n  }, // [!code focus]\\n  title: 'Viem'\\n})\\n```\\n\\n::::note\\n:::details[Theme Reference]\\n```ts\\ntype Theme = {\\n  accentColor?: string\\n  colorScheme?: 'dark' | 'light' | 'system'\\n  variables?: {\\n    borderRadius?: {\\n      '0': string,\\n      '2': string,\\n      '4': string,\\n      '8': string,\\n    },\\n    color?: {\\n      white: { light: string, dark: string },\\n      black: { light: string, dark: string },\\n      background: { light: string, dark: string },\\n      background2: { light: string, dark: string },\\n      background3: { light: string, dark: string },\\n      background4: { light: string, dark: string },\\n      background5: { light: string, dark: string },\\n      backgroundAccent: { light: string, dark: string },\\n      backgroundAccentHover: { light: string, dark: string },\\n      backgroundAccentText: { light: string, dark: string },\\n      backgroundBlueTint: { light: string, dark: string },\\n      backgroundDark: { light: string, dark: string },\\n      backgroundGreenTint: { light: string, dark: string },\\n      backgroundGreenTint2: { light: string, dark: string },\\n      backgroundIrisTint: { light: string, dark: string },\\n      backgroundRedTint: { light: string, dark: string },\\n      backgroundRedTint2: { light: string, dark: string },\\n      backgroundYellowTint: { light: string, dark: string },\\n      border: { light: string, dark: string },\\n      border2: { light: string, dark: string },\\n      borderAccent: { light: string, dark: string },\\n      borderBlue: { light: string, dark: string },\\n      borderGreen: { light: string, dark: string },\\n      borderIris: { light: string, dark: string },\\n      borderRed: { light: string, dark: string },\\n      borderYellow: { light: string, dark: string },\\n      heading: { light: string, dark: string },\\n      shadow: { light: string, dark: string },\\n      text: { light: string, dark: string },\\n      text2: { light: string, dark: string },\\n      text3: { light: string, dark: string },\\n      text4: { light: string, dark: string },\\n      textAccent: { light: string, dark: string },\\n      textAccentHover: { light: string, dark: string },\\n      textBlue: { light: string, dark: string },\\n      textBlueHover: { light: string, dark: string },\\n      textGreen: { light: string, dark: string },\\n      textGreenHover: { light: string, dark: string },\\n      textIris: { light: string, dark: string },\\n      textIrisHover: { light: string, dark: string },\\n      textRed: { light: string, dark: string },\\n      textRedHover: { light: string, dark: string },\\n      textYellow: { light: string, dark: string },\\n      textYellowHover: { light: string, dark: string },\\n\\n      blockquoteBorder: { light: string, dark: string },\\n      blockquoteText: { light: string, dark: string },\\n      codeBlockBackground: { light: string, dark: string },\\n      codeCharacterHighlightBackground: { light: string, dark: string },\\n      codeHighlightBackground: { light: string, dark: string },\\n      codeHighlightBorder: { light: string, dark: string },\\n      codeInlineBackground: { light: string, dark: string },\\n      codeInlineBorder: { light: string, dark: string },\\n      codeInlineText: { light: string, dark: string },\\n      codeTitleBackground: { light: string, dark: string },\\n      dangerBackground: { light: string, dark: string },\\n      dangerBorder: { light: string, dark: string },\\n      dangerText: { light: string, dark: string },\\n      dangerTextHover: { light: string, dark: string },\\n      hr: { light: string, dark: string },\\n      infoBackground: { light: string, dark: string },\\n      infoBorder: { light: string, dark: string },\\n      infoText: { light: string, dark: string },\\n      infoTextHover: { light: string, dark: string },\\n      lineNumber: { light: string, dark: string },\\n      link: { light: string, dark: string },\\n      linkHover: { light: string, dark: string },\\n      noteBackground: { light: string, dark: string },\\n      noteBorder: { light: string, dark: string },\\n      noteText: { light: string, dark: string },\\n      successBackground: { light: string, dark: string },\\n      successBorder: { light: string, dark: string },\\n      successText: { light: string, dark: string },\\n      successTextHover: { light: string, dark: string },\\n      tableBorder: { light: string, dark: string },\\n      tableHeaderBackground: { light: string, dark: string },\\n      tableHeaderText: { light: string, dark: string },\\n      tipBackground: { light: string, dark: string },\\n      tipBorder: { light: string, dark: string },\\n      tipText: { light: string, dark: string },\\n      tipTextHover: { light: string, dark: string },\\n      warningBackground: { light: string, dark: string },\\n      warningBorder: { light: string, dark: string },\\n      warningText: { light: string, dark: string },\\n      warningTextHover: { light: string, dark: string },\\n    },\\n    content: {\\n      horizontalPadding: string,\\n      verticalPadding: string,\\n      width: string,\\n    },\\n    fontFamily: {\\n      default: string,\\n      mono: string,\\n    },\\n    fontSize: {\\n      root: string,\\n      '9': string,\\n      '11': string,\\n      '12': string,\\n      '13': string,\\n      '14': string,\\n      '15': string,\\n      '16': string,\\n      '18': string,\\n      '20': string,\\n      '24': string,\\n      '32': string,\\n      h1: string,\\n      h2: string,\\n      h3: string,\\n      h4: string,\\n      h5: string,\\n      h6: string,\\n      code: string,\\n      codeBlock: string,\\n      lineNumber: string,\\n      subtitle: string,\\n      th: string,\\n      td: string,\\n    },\\n    fontWeight: {\\n      regular: string,\\n      medium: string,\\n      semibold: string,\\n    },\\n    lineHeight: {\\n      code: string,\\n      heading: string,\\n      listItem: string,\\n      outlineItem: string,\\n      paragraph: string,\\n    },\\n    space: {\\n      '0': string,\\n      '1': string,\\n      '2': string,\\n      '3': string,\\n      '4': string,\\n      '6': string,\\n      '8': string,\\n      '12': string,\\n      '14': string,\\n      '16': string,\\n      '18': string,\\n      '20': string,\\n      '22': string,\\n      '24': string,\\n      '28': string,\\n      '32': string,\\n      '40': string,\\n      '44': string,\\n      '48': string,\\n      '56': string,\\n      '64': string,\\n      '72': string,\\n      '80': string,\\n    }\\n  }\\n}\\n```\\n:::\\n::::\\n\\n### title\\n\\n- **Type:** `string`\\n- **Default:** `\\\"Docs\\\"`\\n\\nDocumentation title.\\n\\n```tsx twoslash\\nimport { defineConfig } from 'vocs'\\n\\nexport default defineConfig({\\n  title: 'Viem' // [!code focus]\\n})\\n```\\n\\n### titleTemplate\\n\\n- **Type:** `string`\\n- **Default:** `\\\"%s – Docs\\\"`\\n\\nTemplate for the page title.\\n\\n```tsx twoslash\\nimport { defineConfig } from 'vocs'\\n\\nexport default defineConfig({\\n  title: 'Viem',\\n  titleTemplate: '%s – Viem' // [!code focus]\\n})\\n```\\n\\n### topNav\\n\\n- **Type:** `TopNav`\\n\\nNavigation displayed on the top.\\n\\n```tsx twoslash\\nimport { defineConfig } from 'vocs'\\n\\nexport default defineConfig({\\n  title: 'Viem',\\n  topNav: [ // [!code focus]\\n    { text: 'Guide & API', link: '/docs/getting-started', match: '/docs' }, // [!code focus]\\n    { text: 'Blog', link: '/blog' }, // [!code focus]\\n  ] // [!code focus]\\n})\\n```\\n\\n### twoslash\\n\\n- **Type:** `Twoslash`\\n\\nTwoSlash configuration.\\n\\n```tsx twoslash\\nimport { defineConfig } from 'vocs'\\n\\nexport default defineConfig({\\n  title: 'Viem',\\n  twoslash: { // [!code focus]\\n    compilerOptions: { // [!code focus]\\n      strict: true, // [!code focus]\\n    } // [!code focus]\\n  } // [!code focus]\\n})\\n```\\n\\n### vite\\n\\n- **Type:** `Vite.UserConfig`\\n\\nVite configuration. [See more.](https://vitejs.dev/config/)\\n\\n```tsx twoslash\\n// @noErrors\\nimport { defineConfig } from 'vocs'\\nimport tsconfigPaths from 'vite-tsconfig-paths' // [!code focus]\\n\\nexport default defineConfig({\\n  title: 'Viem',\\n  vite: { // [!code focus]\\n    build: { // [!code focus]\\n      minify: 'terser' // [!code focus]\\n    }, // [!code focus]\\n    plugins: [tsconfigPaths()] // [!code focus]\\n  } // [!code focus]\\n})\\n```\\n\",\"document\":[{\"href\":\"/docs/api/config#config\",\"html\":\"<div role=\\\"doc-subtitle\\\">Define global metadata for your documentation</div></header>\\n<p>Vocs uses a <a href=\\\"/docs/structure#configuration-file\\\">configuration file (<code>vocs.config.ts</code>)</a> to define global metadata for your documentation. This includes things like the site title, description, logo, sidebar, and more for your project.</p>\\n\",\"id\":\"site/pages/docs/api/config.mdx#config\",\"isPage\":true,\"text\":\"Define global metadata for your documentation\\nVocs uses a configuration file (vocs.config.ts) to define global metadata for your documentation. This includes things like the site title, description, logo, sidebar, and more for your project.\\n\",\"title\":\"Config\",\"titles\":[]},{\"href\":\"/docs/api/config#initialize-config-file\",\"html\":\"\\n<p>The Vocs config can be defined in a <code>vocs.config.ts</code> file at the root of your project.</p>\\n<div class=\\\"code-group\\\"><div data-title=\\\"Directory Structure\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-diff\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Directory Structure\\\" data-lang=\\\"txt\\\"><code><span class=\\\"line\\\"><span>viem/</span></span>\\n<span class=\\\"line\\\"><span>├── docs/</span></span>\\n<span class=\\\"line\\\"><span>├── node_modules/</span></span>\\n<span class=\\\"line\\\"><span>├── src/</span></span>\\n<span class=\\\"line\\\"><span>├── package.json</span></span>\\n<span class=\\\"line diff add\\\"><span>└── vocs.config.ts</span></span></code></pre></div><div data-title=\\\"vocs.config.ts\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"vocs.config.ts\\\" data-lang=\\\"ts\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre></div></div>\\n\",\"id\":\"site/pages/docs/api/config.mdx#initialize-config-file\",\"isPage\":false,\"text\":\"\\nThe Vocs config can be defined in a vocs.config.ts file at the root of your project.\\nviem/\\n├── docs/\\n├── node_modules/\\n├── src/\\n├── package.json\\n└── vocs.config.tsimport { defineConfig } from &#x27;vocs&#x27;\\n \\nexport default defineConfig({\\n  title: &#x27;Viem&#x27;\\n})\\n\",\"title\":\"Initialize Config File\",\"titles\":[\"Config\"]},{\"href\":\"/docs/api/config#parameters\",\"html\":\"\\n\",\"id\":\"site/pages/docs/api/config.mdx#parameters\",\"isPage\":false,\"text\":\"\\n\",\"title\":\"Parameters\",\"titles\":[\"Config\"]},{\"href\":\"/docs/api/config#banner\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <code>Banner</code></li>\\n</ul>\\n<p>Configuration for the banner fixed to the top of the page.</p>\\n<p>Can be a Markdown string, a React Element, or an object with the following properties:</p>\\n<ul>\\n<li><code>dismissable</code>: Whether or not the banner can be dismissed.</li>\\n<li><code>backgroundColor</code>: The background color of the banner.</li>\\n<li><code>content</code>: The content of the banner.</li>\\n<li><code>height</code>: The height of the banner.</li>\\n<li><code>textColor</code>: The text color of the banner.</li>\\n</ul>\\n<aside data-callout=\\\"tip\\\"><p>When using JSX, remember to rename the config file extension to <code>.tsx</code> or <code>.jsx</code>.</p></aside>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @log:   ↓ as Markdown</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  banner: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Head to our new [Discord](https://discord.gg/JUrRkGweXV)!&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @noErrors</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @log:   ↓ as a React Element</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  banner: &lt;</span><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">div</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">&gt;Head to our new &lt;</span><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">a</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\"> href</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;https://discord.gg/JUrRkGweXV&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">&gt;Discord&lt;/</span><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">a</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">&gt;&lt;/</span><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">div</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">&gt;</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @log:   ↓ as an object</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  banner: { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    dismissable: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">false</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    backgroundColor: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;red&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    content: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Head to our new [Discord](https://discord.gg/JUrRkGweXV)!&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    height: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;28px&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    textColor: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;white&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  }</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/api/config.mdx#banner\",\"isPage\":false,\"text\":\"\\n\\nType: Banner\\n\\nConfiguration for the banner fixed to the top of the page.\\nCan be a Markdown string, a React Element, or an object with the following properties:\\n\\ndismissable: Whether or not the banner can be dismissed.\\nbackgroundColor: The background color of the banner.\\ncontent: The content of the banner.\\nheight: The height of the banner.\\ntextColor: The text color of the banner.\\n\\nWhen using JSX, remember to rename the config file extension to .tsx or .jsx.\\nimport { defineConfig } from &#x27;vocs&#x27;\\n \\n// @log:   ↓ as Markdown\\nexport default defineConfig({\\n  banner: &#x27;Head to our new [Discord](https://discord.gg/JUrRkGweXV)!&#x27;, \\n  title: &#x27;Viem&#x27;\\n})\\n// @noErrors\\nimport { defineConfig } from &#x27;vocs&#x27;\\n \\n// @log:   ↓ as a React Element\\nexport default defineConfig({\\n  banner: &lt;div&gt;Head to our new &lt;a href=&quot;https://discord.gg/JUrRkGweXV&quot;&gt;Discord&lt;/a&gt;&lt;/div&gt;, \\n  title: &#x27;Viem&#x27;\\n})\\nimport { defineConfig } from &#x27;vocs&#x27;\\n \\n// @log:   ↓ as an object\\nexport default defineConfig({\\n  banner: { \\n    dismissable: false, \\n    backgroundColor: &#x27;red&#x27;, \\n    content: &#x27;Head to our new [Discord](https://discord.gg/JUrRkGweXV)!&#x27;, \\n    height: &#x27;28px&#x27;, \\n    textColor: &#x27;white&#x27;, \\n  }, \\n  title: &#x27;Viem&#x27;\\n})\\n\",\"title\":\"banner\",\"titles\":[\"Config\",\"Parameters\"]},{\"href\":\"/docs/api/config#basepath\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <code>string</code></li>\\n</ul>\\n<p>The base path the documentation will be deployed at. All assets &amp; pages will be prefixed with this path.</p>\\n<p>For example, this is useful for deploying to GitHub Pages.\\nIf the target URL is <code>https://example.github.io/foo</code>, then the <code>basePath</code> should be set to <code>/foo</code>.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  basePath: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;/docs&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/api/config.mdx#basepath\",\"isPage\":false,\"text\":\"\\n\\nType: string\\n\\nThe base path the documentation will be deployed at. All assets &amp; pages will be prefixed with this path.\\nFor example, this is useful for deploying to GitHub Pages.\\nIf the target URL is https://example.github.io/foo, then the basePath should be set to /foo.\\nimport { defineConfig } from &#x27;vocs&#x27;\\n \\nexport default defineConfig({\\n  basePath: &#x27;/docs&#x27;, \\n})\\n\",\"title\":\"basePath\",\"titles\":[\"Config\",\"Parameters\"]},{\"href\":\"/docs/api/config#baseurl\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <code>string</code></li>\\n</ul>\\n<p>The base URL for your documentation. This is used to populate the <code>&lt;base&gt;</code> tag in the <code>&lt;head&gt;</code> of the page,\\nand is used to form the <code>%logo</code> variable for dynamic OG images.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  baseUrl: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;https://vocs.dev&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/api/config.mdx#baseurl\",\"isPage\":false,\"text\":\"\\n\\nType: string\\n\\nThe base URL for your documentation. This is used to populate the &lt;base&gt; tag in the &lt;head&gt; of the page,\\nand is used to form the %logo variable for dynamic OG images.\\nimport { defineConfig } from &#x27;vocs&#x27;\\n \\nexport default defineConfig({\\n  baseUrl: &#x27;https://vocs.dev&#x27;, \\n})\\n\",\"title\":\"baseUrl\",\"titles\":[\"Config\",\"Parameters\"]},{\"href\":\"/docs/api/config#blogdir\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <code>string</code></li>\\n<li><strong>Default:</strong> <code>&quot;./pages/blog&quot;</code></li>\\n</ul>\\n<p>Path to blog pages relative to project root. Used to extract posts from the filesystem.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  blogDir: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;./pages/writings&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/api/config.mdx#blogdir\",\"isPage\":false,\"text\":\"\\n\\nType: string\\nDefault: &quot;./pages/blog&quot;\\n\\nPath to blog pages relative to project root. Used to extract posts from the filesystem.\\nimport { defineConfig } from &#x27;vocs&#x27;\\n \\nexport default defineConfig({\\n  blogDir: &#x27;./pages/writings&#x27;, \\n  title: &#x27;Viem&#x27;\\n})\\n\",\"title\":\"blogDir\",\"titles\":[\"Config\",\"Parameters\"]},{\"href\":\"/docs/api/config#description\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <code>string</code></li>\\n</ul>\\n<p>General description for the documentation.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  description: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Build reliable apps &amp; libraries with lightweight, composable, and type-safe modules that interface with Ethereum.&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/api/config.mdx#description\",\"isPage\":false,\"text\":\"\\n\\nType: string\\n\\nGeneral description for the documentation.\\nimport { defineConfig } from &#x27;vocs&#x27;\\n \\nexport default defineConfig({\\n  description: &#x27;Build reliable apps &amp; libraries with lightweight, composable, and type-safe modules that interface with Ethereum.&#x27;, \\n  title: &#x27;Viem&#x27;\\n})\\n\",\"title\":\"description\",\"titles\":[\"Config\",\"Parameters\"]},{\"href\":\"/docs/api/config#editlink\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <code>EditLink</code></li>\\n</ul>\\n<p>Edit location for the documentation.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  editLink: { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    pattern: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;https://github.com/wevm/viem/edit/main/site/pages/:path&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    text: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Edit on GitHub&#x27;</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  }</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/api/config.mdx#editlink\",\"isPage\":false,\"text\":\"\\n\\nType: EditLink\\n\\nEdit location for the documentation.\\nimport { defineConfig } from &#x27;vocs&#x27;\\n \\nexport default defineConfig({\\n  editLink: { \\n    pattern: &#x27;https://github.com/wevm/viem/edit/main/site/pages/:path&#x27;, \\n    text: &#x27;Edit on GitHub&#x27;\\n  }, \\n  title: &#x27;Viem&#x27;\\n})\\n\",\"title\":\"editLink\",\"titles\":[\"Config\",\"Parameters\"]},{\"href\":\"/docs/api/config#editlinkpattern\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <code>string | (() =&gt; string)</code></li>\\n</ul>\\n<p>Edit link pattern.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  editLink: { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    pattern: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;https://github.com/wevm/viem/edit/main/site/pages/:path&#x27;</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  }</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/api/config.mdx#editlinkpattern\",\"isPage\":false,\"text\":\"\\n\\nType: string | (() =&gt; string)\\n\\nEdit link pattern.\\nimport { defineConfig } from &#x27;vocs&#x27;\\n \\nexport default defineConfig({\\n  editLink: { \\n    pattern: &#x27;https://github.com/wevm/viem/edit/main/site/pages/:path&#x27;\\n  }, \\n  title: &#x27;Viem&#x27;\\n})\\n\",\"title\":\"editLink.pattern\",\"titles\":[\"Config\",\"Parameters\",\"editLink\"]},{\"href\":\"/docs/api/config#editlinktext\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <code>string</code></li>\\n</ul>\\n<p>Edit link text.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  editLink: { </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    pattern: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;https://github.com/wevm/viem/edit/main/site/pages/:path&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    text: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Edit on GitHub&#x27;</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  }</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/api/config.mdx#editlinktext\",\"isPage\":false,\"text\":\"\\n\\nType: string\\n\\nEdit link text.\\nimport { defineConfig } from &#x27;vocs&#x27;\\n \\nexport default defineConfig({\\n  editLink: { \\n    pattern: &#x27;https://github.com/wevm/viem/edit/main/site/pages/:path&#x27;, \\n    text: &#x27;Edit on GitHub&#x27;\\n  }, \\n  title: &#x27;Viem&#x27;\\n})\\n\",\"title\":\"editLink.text\",\"titles\":[\"Config\",\"Parameters\",\"editLink\"]},{\"href\":\"/docs/api/config#font\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <code>{ google: string }</code></li>\\n</ul>\\n<p>Base font face.</p>\\n<aside data-callout=\\\"warning\\\"><p>Only Google Fonts are supported at the moment.</p></aside>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  font: { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    google: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Inter&#x27;</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  }</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\\n<p>You can also define the font family for inline code &amp; code blocks:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  font: { </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    default: { </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      google: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Inter&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    mono: { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      google: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Dancing Script&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  }</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/api/config.mdx#font\",\"isPage\":false,\"text\":\"\\n\\nType: { google: string }\\n\\nBase font face.\\nOnly Google Fonts are supported at the moment.\\nimport { defineConfig } from &#x27;vocs&#x27;\\n \\nexport default defineConfig({\\n  font: { \\n    google: &#x27;Inter&#x27;\\n  }, \\n  title: &#x27;Viem&#x27;\\n})\\nYou can also define the font family for inline code &amp; code blocks:\\nimport { defineConfig } from &#x27;vocs&#x27;\\n \\nexport default defineConfig({\\n  font: { \\n    default: { \\n      google: &#x27;Inter&#x27;, \\n    }, \\n    mono: { \\n      google: &#x27;Dancing Script&#x27;, \\n    }, \\n  },\\n  title: &#x27;Viem&#x27;\\n})\\n\",\"title\":\"font\",\"titles\":[\"Config\",\"Parameters\"]},{\"href\":\"/docs/api/config#head\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <code>ReactElement | { [path: string]: ReactElement } | ({ path: string }) =&gt; ReactElement)</code></li>\\n</ul>\\n<p>Additional tags to include in the <code>&lt;head&gt;</code> tag of the page HTML.</p>\\n<aside data-callout=\\\"tip\\\"><p>When using JSX, remember to rename the config file extension to <code>.tsx</code> or <code>.jsx</code>.</p></aside>\\n\",\"id\":\"site/pages/docs/api/config.mdx#head\",\"isPage\":false,\"text\":\"\\n\\nType: ReactElement | { [path: string]: ReactElement } | ({ path: string }) =&gt; ReactElement)\\n\\nAdditional tags to include in the &lt;head&gt; tag of the page HTML.\\nWhen using JSX, remember to rename the config file extension to .tsx or .jsx.\\n\",\"title\":\"head\",\"titles\":[\"Config\",\"Parameters\"]},{\"href\":\"/docs/api/config#element\",\"html\":\"\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @noErrors</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> *</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> as</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> React </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;react&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  head: ( </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    &lt;&gt;</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      &lt;</span><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">meta</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\"> property</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;og:type&quot;</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\"> content</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;website&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> /&gt;</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      &lt;</span><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">meta</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\"> property</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;og:title&quot;</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\"> content</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;viem · TypeScript Interface for Ethereum&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> /&gt;</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      &lt;</span><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">meta</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\"> property</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;og:image&quot;</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\"> content</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;https://viem.sh/og-image.png&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> /&gt;</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      &lt;</span><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">meta</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\"> property</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;og:url&quot;</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\"> content</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;https://viem.sh&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> /&gt;</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      &lt;</span><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">meta</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\"> property</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;og:description&quot;</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\"> content</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;Build reliable Ethereum apps &amp; libraries with lightweight, composable, &amp; type-safe modules from viem.&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> /&gt;</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    &lt;/&gt; </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  )</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/api/config.mdx#element\",\"isPage\":false,\"text\":\"\\n// @noErrors\\nimport * as React from &#x27;react&#x27;\\nimport { defineConfig } from &#x27;vocs&#x27;\\n \\nexport default defineConfig({\\n  head: ( \\n    &lt;&gt;\\n      &lt;meta property=&quot;og:type&quot; content=&quot;website&quot; /&gt;\\n      &lt;meta property=&quot;og:title&quot; content=&quot;viem · TypeScript Interface for Ethereum&quot; /&gt;\\n      &lt;meta property=&quot;og:image&quot; content=&quot;https://viem.sh/og-image.png&quot; /&gt;\\n      &lt;meta property=&quot;og:url&quot; content=&quot;https://viem.sh&quot; /&gt;\\n      &lt;meta property=&quot;og:description&quot; content=&quot;Build reliable Ethereum apps &amp; libraries with lightweight, composable, &amp; type-safe modules from viem.&quot; /&gt;\\n    &lt;/&gt; \\n  ), \\n  title: &#x27;Viem&#x27;\\n})\\n\",\"title\":\"Element\",\"titles\":[\"Config\",\"Parameters\",\"head\"]},{\"href\":\"/docs/api/config#path--element-object\",\"html\":\"\\n<p>You can specify a <code>path</code> → <code>ReactElement</code> object for the <code>head</code> with paths as keys.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @noErrors</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> *</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> as</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> React </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;react&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  head: { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">    &#x27;/&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">/* ... */</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">    &#x27;/docs&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">/* ... */</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  }</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/api/config.mdx#path--element-object\",\"isPage\":false,\"text\":\"\\nYou can specify a path → ReactElement object for the head with paths as keys.\\n// @noErrors\\nimport * as React from &#x27;react&#x27;\\nimport { defineConfig } from &#x27;vocs&#x27;\\n \\nexport default defineConfig({\\n  head: { \\n    &#x27;/&#x27;: /* ... */, \\n    &#x27;/docs&#x27;: /* ... */, \\n  }, \\n  title: &#x27;Viem&#x27;\\n})\\n\",\"title\":\"Path → Element Object\",\"titles\":[\"Config\",\"Parameters\",\"head\"]},{\"href\":\"/docs/api/config#function\",\"html\":\"\\n<p>You can specify a function that returns a <code>ReactElement</code>. Useful if you want to have more dynamic control over rendering head tags.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @noErrors</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> *</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> as</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> React </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;react&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">  head</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({ </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">path</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\"> }) </span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{ </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (path </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">===</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;/docs&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">return</span><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\"> /* ... */</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\"> /* ... */</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  }</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\\n<aside data-callout=\\\"tip\\\"><strong data-callout-title=\\\"true\\\">Tip</strong><p>The <code>head</code> function can also be <code>async</code>.</p></aside>\\n\",\"id\":\"site/pages/docs/api/config.mdx#function\",\"isPage\":false,\"text\":\"\\nYou can specify a function that returns a ReactElement. Useful if you want to have more dynamic control over rendering head tags.\\n// @noErrors\\nimport * as React from &#x27;react&#x27;\\nimport { defineConfig } from &#x27;vocs&#x27;\\n \\nexport default defineConfig({\\n  head({ path }) { \\n    if (path === &#x27;/docs&#x27;) return /* ... */\\n    return /* ... */\\n  }, \\n  title: &#x27;Viem&#x27;\\n})\\nTipThe head function can also be async.\\n\",\"title\":\"Function\",\"titles\":[\"Config\",\"Parameters\",\"head\"]},{\"href\":\"/docs/api/config#iconurl\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <code>string | { light: string; dark: string }</code></li>\\n</ul>\\n<p>Icon URL. Used as the website&#x27;s favicon.</p>\\n<aside data-callout=\\\"info\\\"><strong data-callout-title=\\\"true\\\">Note</strong><p>Assets need to be placed in the <code>public</code> directory.</p></aside>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  iconUrl: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;/icon.svg&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\\n<p>You can also specify icons for light and dark mode.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  iconUrl: { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    light: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;/icon-light.svg&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    dark: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;/icon-dark.svg&#x27;</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  }</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/api/config.mdx#iconurl\",\"isPage\":false,\"text\":\"\\n\\nType: string | { light: string; dark: string }\\n\\nIcon URL. Used as the website&#x27;s favicon.\\nNoteAssets need to be placed in the public directory.\\nimport { defineConfig } from &#x27;vocs&#x27;\\n \\nexport default defineConfig({\\n  iconUrl: &#x27;/icon.svg&#x27;, \\n  title: &#x27;Viem&#x27;\\n})\\nYou can also specify icons for light and dark mode.\\nimport { defineConfig } from &#x27;vocs&#x27;\\n \\nexport default defineConfig({\\n  iconUrl: { \\n    light: &#x27;/icon-light.svg&#x27;, \\n    dark: &#x27;/icon-dark.svg&#x27;\\n  }, \\n  title: &#x27;Viem&#x27;\\n})\\n\",\"title\":\"iconUrl\",\"titles\":[\"Config\",\"Parameters\"]},{\"href\":\"/docs/api/config#logourl\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <code>string | { light: string; dark: string }</code></li>\\n</ul>\\n<p>Logo URL. Used for the sidebar and mobile top nav header image.</p>\\n<aside data-callout=\\\"info\\\"><strong data-callout-title=\\\"true\\\">Note</strong><p>Assets need to be placed in the <code>public</code> directory.</p></aside>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  logoUrl: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;/logo.svg&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\\n<p>You can also specify logos for light and dark mode.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  logoUrl: { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    light: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;/logo-light.svg&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    dark: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;/logo-dark.svg&#x27;</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  }</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/api/config.mdx#logourl\",\"isPage\":false,\"text\":\"\\n\\nType: string | { light: string; dark: string }\\n\\nLogo URL. Used for the sidebar and mobile top nav header image.\\nNoteAssets need to be placed in the public directory.\\nimport { defineConfig } from &#x27;vocs&#x27;\\n \\nexport default defineConfig({\\n  logoUrl: &#x27;/logo.svg&#x27;, \\n  title: &#x27;Viem&#x27;\\n})\\nYou can also specify logos for light and dark mode.\\nimport { defineConfig } from &#x27;vocs&#x27;\\n \\nexport default defineConfig({\\n  logoUrl: { \\n    light: &#x27;/logo-light.svg&#x27;, \\n    dark: &#x27;/logo-dark.svg&#x27;\\n  }, \\n  title: &#x27;Viem&#x27;\\n})\\n\",\"title\":\"logoUrl\",\"titles\":[\"Config\",\"Parameters\"]},{\"href\":\"/docs/api/config#markdown\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <code>Markdown</code></li>\\n</ul>\\n<p>Markdown configuration.</p>\\n\",\"id\":\"site/pages/docs/api/config.mdx#markdown\",\"isPage\":false,\"text\":\"\\n\\nType: Markdown\\n\\nMarkdown configuration.\\n\",\"title\":\"markdown\",\"titles\":[\"Config\",\"Parameters\"]},{\"href\":\"/docs/api/config#markdowncode\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <code>{ theme: { light: string; dark: string } }</code></li>\\n</ul>\\n<p>Used to configure the syntax highlighting theme of code blocks.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  markdown: { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    code: { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      themes: { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        light: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;github-light&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        dark: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;github-dark&#x27;</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      } </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    } </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  }</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\\n<aside data-callout=\\\"note\\\"><details><summary>Available Built-in Themes</summary><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;aurora-x&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;catppuccin-frappe&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;catppuccin-latte&quot;</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;catppuccin-macchiato&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;catppuccin-mocha&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;dark-plus&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;dracula&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;dracula-soft&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;github-dark&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;github-dark-dimmed&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;github-light&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;light-plus&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;material-theme&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;material-theme-darker&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;material-theme-lighter&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;material-theme-ocean&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;material-theme-palenight&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;min-dark&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;min-light&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;monokai&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;nord&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;one-dark-pro&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;poimandres&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;red&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;rose-pine&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;rose-pine-dawn&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;rose-pine-moon&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;slack-dark&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;slack-ochin&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;solarized-dark&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;solarized-light&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;vitesse-black&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;vitesse-dark&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;vitesse-light&quot;</span></span></code></pre></details></aside>\\n\",\"id\":\"site/pages/docs/api/config.mdx#markdowncode\",\"isPage\":false,\"text\":\"\\n\\nType: { theme: { light: string; dark: string } }\\n\\nUsed to configure the syntax highlighting theme of code blocks.\\nimport { defineConfig } from &#x27;vocs&#x27;\\n \\nexport default defineConfig({\\n  markdown: { \\n    code: { \\n      themes: { \\n        light: &#x27;github-light&#x27;, \\n        dark: &#x27;github-dark&#x27;\\n      } \\n    } \\n  }, \\n  title: &#x27;Viem&#x27;\\n})\\nAvailable Built-in Themes&quot;aurora-x&quot; \\n&quot;catppuccin-frappe&quot; \\n&quot;catppuccin-latte&quot; &quot;catppuccin-macchiato&quot;\\n&quot;catppuccin-mocha&quot;\\n&quot;dark-plus&quot;\\n&quot;dracula&quot;\\n&quot;dracula-soft&quot;\\n&quot;github-dark&quot;\\n&quot;github-dark-dimmed&quot;\\n&quot;github-light&quot;\\n&quot;light-plus&quot;\\n&quot;material-theme&quot;\\n&quot;material-theme-darker&quot;\\n&quot;material-theme-lighter&quot;\\n&quot;material-theme-ocean&quot;\\n&quot;material-theme-palenight&quot;\\n&quot;min-dark&quot;\\n&quot;min-light&quot;\\n&quot;monokai&quot;\\n&quot;nord&quot;\\n&quot;one-dark-pro&quot;\\n&quot;poimandres&quot;\\n&quot;red&quot;\\n&quot;rose-pine&quot;\\n&quot;rose-pine-dawn&quot;\\n&quot;rose-pine-moon&quot;\\n&quot;slack-dark&quot;\\n&quot;slack-ochin&quot;\\n&quot;solarized-dark&quot;\\n&quot;solarized-light&quot;\\n&quot;vitesse-black&quot;\\n&quot;vitesse-dark&quot;\\n&quot;vitesse-light&quot;\\n\",\"title\":\"markdown.code\",\"titles\":[\"Config\",\"Parameters\",\"markdown\"]},{\"href\":\"/docs/api/config#markdownremarkplugins\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <code>PluggableList</code></li>\\n</ul>\\n<p>Used to configure the remark plugins used to transform Markdown.</p>\\n<p><a href=\\\"https://github.com/remarkjs/remark/blob/main/doc/plugins.md#list-of-plugins\\\">See list of plugins</a></p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @noErrors</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> remarkMath </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;remark-math&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  markdown: { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    remarkPlugins: [ </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      remarkMath </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    ] </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  }</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/api/config.mdx#markdownremarkplugins\",\"isPage\":false,\"text\":\"\\n\\nType: PluggableList\\n\\nUsed to configure the remark plugins used to transform Markdown.\\nSee list of plugins\\n// @noErrors\\nimport { defineConfig } from &#x27;vocs&#x27;\\nimport remarkMath from &#x27;remark-math&#x27;\\n \\nexport default defineConfig({\\n  markdown: { \\n    remarkPlugins: [ \\n      remarkMath \\n    ] \\n  }, \\n  title: &#x27;Viem&#x27;\\n})\\n\",\"title\":\"markdown.remarkPlugins\",\"titles\":[\"Config\",\"Parameters\",\"markdown\"]},{\"href\":\"/docs/api/config#markdownrehypeplugins\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <code>PluggableList</code></li>\\n</ul>\\n<p>Used to configure the rehype plugins used to transform generated HTML from Markdown.</p>\\n<p><a href=\\\"https://github.com/rehypejs/rehype/blob/main/doc/plugins.md\\\">See list of plugins</a></p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @noErrors</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> rehypeSlots </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;rehype-slots&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  markdown: { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    rehypePlugins: [ </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      rehypeSlots </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    ] </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  }</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/api/config.mdx#markdownrehypeplugins\",\"isPage\":false,\"text\":\"\\n\\nType: PluggableList\\n\\nUsed to configure the rehype plugins used to transform generated HTML from Markdown.\\nSee list of plugins\\n// @noErrors\\nimport { defineConfig } from &#x27;vocs&#x27;\\nimport rehypeSlots from &#x27;rehype-slots&#x27;\\n \\nexport default defineConfig({\\n  markdown: { \\n    rehypePlugins: [ \\n      rehypeSlots \\n    ] \\n  }, \\n  title: &#x27;Viem&#x27;\\n})\\n\",\"title\":\"markdown.rehypePlugins\",\"titles\":[\"Config\",\"Parameters\",\"markdown\"]},{\"href\":\"/docs/api/config#ogimageurl\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <code>string | { [path: string]: string }</code></li>\\n</ul>\\n<p>OG Image URL. <code>null</code> to disable.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  ogImageUrl: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;https://vocs.dev/api/og?logo=%logo&amp;title=%title&amp;description=%description&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\\n<p>You can also specify an object for the <code>ogImageUrl</code> with paths as keys.</p>\\n<p>This will render a different OG image depending on the path the user is on.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  ogImageUrl: { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">    &#x27;/&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;https://vocs.dev/og-image.png&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">    &#x27;/docs&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;https://vocs.dev/api/og?logo=%logo&amp;title=%title&amp;description=%description&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  }</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/api/config.mdx#ogimageurl\",\"isPage\":false,\"text\":\"\\n\\nType: string | { [path: string]: string }\\n\\nOG Image URL. null to disable.\\nimport { defineConfig } from &#x27;vocs&#x27;\\n \\nexport default defineConfig({\\n  ogImageUrl: &#x27;https://vocs.dev/api/og?logo=%logo&amp;title=%title&amp;description=%description&#x27;, \\n  title: &#x27;Viem&#x27;\\n})\\nYou can also specify an object for the ogImageUrl with paths as keys.\\nThis will render a different OG image depending on the path the user is on.\\nimport { defineConfig } from &#x27;vocs&#x27;\\n \\nexport default defineConfig({\\n  ogImageUrl: { \\n    &#x27;/&#x27;: &#x27;https://vocs.dev/og-image.png&#x27;, \\n    &#x27;/docs&#x27;: &#x27;https://vocs.dev/api/og?logo=%logo&amp;title=%title&amp;description=%description&#x27;, \\n  }, \\n  title: &#x27;Viem&#x27;\\n})\\n\",\"title\":\"ogImageUrl\",\"titles\":[\"Config\",\"Parameters\"]},{\"href\":\"/docs/api/config#rootdir\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <code>string</code></li>\\n<li><strong>Default:</strong> <code>&quot;docs&quot;</code></li>\\n</ul>\\n<p>Documentation root directory. Can be an absolute path, or a path relative from the location of the config file itself.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  rootDir: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;site&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/api/config.mdx#rootdir\",\"isPage\":false,\"text\":\"\\n\\nType: string\\nDefault: &quot;docs&quot;\\n\\nDocumentation root directory. Can be an absolute path, or a path relative from the location of the config file itself.\\nimport { defineConfig } from &#x27;vocs&#x27;\\n \\nexport default defineConfig({\\n  rootDir: &#x27;site&#x27;, \\n  title: &#x27;Viem&#x27;\\n})\\n\",\"title\":\"rootDir\",\"titles\":[\"Config\",\"Parameters\"]},{\"href\":\"/docs/api/config#search\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <code>Search</code></li>\\n</ul>\\n<p>Search configuration. Accepts <a href=\\\"https://lucaong.github.io/minisearch/types/MiniSearch.SearchOptions.html\\\"><code>MiniSearch</code> options</a>.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  search: { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">    boostDocument</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">documentId</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">      return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> documentId </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">===</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;/core&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> ?</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 2</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> :</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 1</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    } </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  }</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/api/config.mdx#search\",\"isPage\":false,\"text\":\"\\n\\nType: Search\\n\\nSearch configuration. Accepts MiniSearch options.\\nimport { defineConfig } from &#x27;vocs&#x27;\\n \\nexport default defineConfig({\\n  search: { \\n    boostDocument(documentId) { \\n      return documentId === &#x27;/core&#x27; ? 2 : 1\\n    } \\n  }, \\n  title: &#x27;Viem&#x27;\\n})\\n\",\"title\":\"search\",\"titles\":[\"Config\",\"Parameters\"]},{\"href\":\"/docs/api/config#sidebar\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <code>Sidebar</code></li>\\n</ul>\\n<p>Navigation displayed on the sidebar.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  sidebar: [ </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      text: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Getting Started&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      link: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;/docs&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      text: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;API&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      collapsed: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">true</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      items: [ </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">          text: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Config&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">          link: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;/docs/api/config&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      ], </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    } </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  ]</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\\n<p>You can also specify an object for the sidebar with paths as keys and sidebar items as values.</p>\\n<p>This will render a different sidebar depending on the path the user is on.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  sidebar: { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">    &#x27;/guide&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: [{ </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      text: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Getting Started&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      link: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;/guide&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }], </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">    &#x27;/api&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: [{ </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      text: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Config&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      link: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;/api/config&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }], </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  }</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/api/config.mdx#sidebar\",\"isPage\":false,\"text\":\"\\n\\nType: Sidebar\\n\\nNavigation displayed on the sidebar.\\nimport { defineConfig } from &#x27;vocs&#x27;\\n \\nexport default defineConfig({\\n  sidebar: [ \\n    { \\n      text: &#x27;Getting Started&#x27;, \\n      link: &#x27;/docs&#x27;, \\n    }, \\n    { \\n      text: &#x27;API&#x27;, \\n      collapsed: true, \\n      items: [ \\n        { \\n          text: &#x27;Config&#x27;, \\n          link: &#x27;/docs/api/config&#x27;, \\n        }, \\n      ], \\n    } \\n  ], \\n  title: &#x27;Viem&#x27;\\n})\\nYou can also specify an object for the sidebar with paths as keys and sidebar items as values.\\nThis will render a different sidebar depending on the path the user is on.\\nimport { defineConfig } from &#x27;vocs&#x27;\\n \\nexport default defineConfig({\\n  sidebar: { \\n    &#x27;/guide&#x27;: [{ \\n      text: &#x27;Getting Started&#x27;, \\n      link: &#x27;/guide&#x27;, \\n    }], \\n    &#x27;/api&#x27;: [{ \\n      text: &#x27;Config&#x27;, \\n      link: &#x27;/api/config&#x27;, \\n    }], \\n  }, \\n  title: &#x27;Viem&#x27;\\n})\\n\",\"title\":\"sidebar\",\"titles\":[\"Config\",\"Parameters\"]},{\"href\":\"/docs/api/config#socials\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <code>Socials</code></li>\\n</ul>\\n<p>Social links displayed in the top navigation.</p>\\n<p>Supports <strong>Discord</strong>, <strong>GitHub</strong>, <strong>Telegram</strong>, <strong>X</strong>, and <strong>Warpcast</strong>.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  socials: [ </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      icon: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;github&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      link: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;https://github.com/wevm/viem&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      icon: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;x&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      link: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;https://twitter.com/wevm_dev&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  ]</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/api/config.mdx#socials\",\"isPage\":false,\"text\":\"\\n\\nType: Socials\\n\\nSocial links displayed in the top navigation.\\nSupports Discord, GitHub, Telegram, X, and Warpcast.\\nimport { defineConfig } from &#x27;vocs&#x27;\\n \\nexport default defineConfig({\\n  socials: [ \\n    { \\n      icon: &#x27;github&#x27;, \\n      link: &#x27;https://github.com/wevm/viem&#x27;, \\n    }, \\n    { \\n      icon: &#x27;x&#x27;, \\n      link: &#x27;https://twitter.com/wevm_dev&#x27;, \\n    }, \\n  ], \\n  title: &#x27;Viem&#x27;\\n})\\n\",\"title\":\"socials\",\"titles\":[\"Config\",\"Parameters\"]},{\"href\":\"/docs/api/config#sponsors\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <code>SponsorSet</code></li>\\n</ul>\\n<p>Set of sponsors to display on MDX directives and (optionally) the sidebar.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  sponsors: [ </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      name: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Collaborator&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      height: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">120</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      items: [ </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        [ </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">          { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            name: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Paradigm&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            link: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;https://paradigm.xyz&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            image: </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">              &#x27;https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/paradigm-light.svg&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">          }, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        ], </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      ], </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      name: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Large Enterprise&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      height: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">60</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      items: [ </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        [ </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">          { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            name: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;WalletConnect&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            link: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;https://walletconnect.com&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            image: </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">              &#x27;https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/walletconnect-light.svg&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">          }, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">          { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            name: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Stripe&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            link: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;https://www.stripe.com&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            image: </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">              &#x27;https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/stripe-light.svg&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">          }, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        ], </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      ], </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  ]</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/api/config.mdx#sponsors\",\"isPage\":false,\"text\":\"\\n\\nType: SponsorSet\\n\\nSet of sponsors to display on MDX directives and (optionally) the sidebar.\\nimport { defineConfig } from &#x27;vocs&#x27;\\n \\nexport default defineConfig({\\n  sponsors: [ \\n    { \\n      name: &#x27;Collaborator&#x27;, \\n      height: 120, \\n      items: [ \\n        [ \\n          { \\n            name: &#x27;Paradigm&#x27;, \\n            link: &#x27;https://paradigm.xyz&#x27;, \\n            image: \\n              &#x27;https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/paradigm-light.svg&#x27;, \\n          }, \\n        ], \\n      ], \\n    }, \\n    { \\n      name: &#x27;Large Enterprise&#x27;, \\n      height: 60, \\n      items: [ \\n        [ \\n          { \\n            name: &#x27;WalletConnect&#x27;, \\n            link: &#x27;https://walletconnect.com&#x27;, \\n            image: \\n              &#x27;https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/walletconnect-light.svg&#x27;, \\n          }, \\n          { \\n            name: &#x27;Stripe&#x27;, \\n            link: &#x27;https://www.stripe.com&#x27;, \\n            image: \\n              &#x27;https://raw.githubusercontent.com/wevm/.github/main/content/sponsors/stripe-light.svg&#x27;, \\n          }, \\n        ], \\n      ], \\n    }, \\n  ], \\n  title: &#x27;Viem&#x27;\\n})\\n\",\"title\":\"sponsors\",\"titles\":[\"Config\",\"Parameters\"]},{\"href\":\"/docs/api/config#theme\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <code>Theme</code></li>\\n</ul>\\n<p>Theme configuration.</p>\\n<p><a href=\\\"/docs/guides/theming\\\">Read more about theming</a>.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  theme: { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    accentColor: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;#ff0000&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    variables: { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      color: { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        background: { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">          light: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;white&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">          dark: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;black&#x27;</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        } </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      } </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    } </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  }</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\\n<aside data-callout=\\\"note\\\"><details><summary>Theme Reference</summary><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">type</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> Theme</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">  accentColor</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">?:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">  colorScheme</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">?:</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;dark&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> |</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;light&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> |</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;system&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">  variables</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">?:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">    borderRadius</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">?:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;0&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;2&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;4&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;8&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">    color</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">?:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      white</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      black</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      background</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      background2</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      background3</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      background4</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      background5</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      backgroundAccent</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      backgroundAccentHover</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      backgroundAccentText</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      backgroundBlueTint</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      backgroundDark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      backgroundGreenTint</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      backgroundGreenTint2</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      backgroundIrisTint</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      backgroundRedTint</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      backgroundRedTint2</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      backgroundYellowTint</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      border</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      border2</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      borderAccent</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      borderBlue</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      borderGreen</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      borderIris</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      borderRed</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      borderYellow</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      heading</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      shadow</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      text</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      text2</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      text3</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      text4</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      textAccent</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      textAccentHover</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      textBlue</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      textBlueHover</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      textGreen</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      textGreenHover</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      textIris</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      textIrisHover</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      textRed</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      textRedHover</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      textYellow</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      textYellowHover</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      blockquoteBorder</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      blockquoteText</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      codeBlockBackground</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      codeCharacterHighlightBackground</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      codeHighlightBackground</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      codeHighlightBorder</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      codeInlineBackground</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      codeInlineBorder</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      codeInlineText</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      codeTitleBackground</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      dangerBackground</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      dangerBorder</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      dangerText</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      dangerTextHover</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      hr</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      infoBackground</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      infoBorder</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      infoText</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      infoTextHover</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      lineNumber</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      link</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      linkHover</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      noteBackground</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      noteBorder</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      noteText</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      successBackground</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      successBorder</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      successText</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      successTextHover</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      tableBorder</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      tableHeaderBackground</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      tableHeaderText</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      tipBackground</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      tipBorder</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      tipText</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      tipTextHover</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      warningBackground</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      warningBorder</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      warningText</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      warningTextHover</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">    content</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      horizontalPadding</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      verticalPadding</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      width</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">    fontFamily</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      default</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      mono</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">    fontSize</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      root</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;9&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;11&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;12&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;13&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;14&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;15&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;16&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;18&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;20&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;24&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;32&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      h1</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      h2</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      h3</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      h4</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      h5</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      h6</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      code</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      codeBlock</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      lineNumber</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      subtitle</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      th</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      td</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">    fontWeight</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      regular</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      medium</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      semibold</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">    lineHeight</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      code</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      heading</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      listItem</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      outlineItem</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      paragraph</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">    space</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;0&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;1&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;2&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;3&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;4&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;6&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;8&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;12&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;14&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;16&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;18&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;20&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;22&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;24&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;28&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;32&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;40&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;44&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;48&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;56&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;64&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;72&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;80&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre></details></aside>\\n\",\"id\":\"site/pages/docs/api/config.mdx#theme\",\"isPage\":false,\"text\":\"\\n\\nType: Theme\\n\\nTheme configuration.\\nRead more about theming.\\nimport { defineConfig } from &#x27;vocs&#x27;\\n \\nexport default defineConfig({\\n  theme: { \\n    accentColor: &#x27;#ff0000&#x27;, \\n    variables: { \\n      color: { \\n        background: { \\n          light: &#x27;white&#x27;, \\n          dark: &#x27;black&#x27;\\n        } \\n      } \\n    } \\n  }, \\n  title: &#x27;Viem&#x27;\\n})\\nTheme Referencetype Theme = {\\n  accentColor?: string\\n  colorScheme?: &#x27;dark&#x27; | &#x27;light&#x27; | &#x27;system&#x27;\\n  variables?: {\\n    borderRadius?: {\\n      &#x27;0&#x27;: string,\\n      &#x27;2&#x27;: string,\\n      &#x27;4&#x27;: string,\\n      &#x27;8&#x27;: string,\\n    },\\n    color?: {\\n      white: { light: string, dark: string },\\n      black: { light: string, dark: string },\\n      background: { light: string, dark: string },\\n      background2: { light: string, dark: string },\\n      background3: { light: string, dark: string },\\n      background4: { light: string, dark: string },\\n      background5: { light: string, dark: string },\\n      backgroundAccent: { light: string, dark: string },\\n      backgroundAccentHover: { light: string, dark: string },\\n      backgroundAccentText: { light: string, dark: string },\\n      backgroundBlueTint: { light: string, dark: string },\\n      backgroundDark: { light: string, dark: string },\\n      backgroundGreenTint: { light: string, dark: string },\\n      backgroundGreenTint2: { light: string, dark: string },\\n      backgroundIrisTint: { light: string, dark: string },\\n      backgroundRedTint: { light: string, dark: string },\\n      backgroundRedTint2: { light: string, dark: string },\\n      backgroundYellowTint: { light: string, dark: string },\\n      border: { light: string, dark: string },\\n      border2: { light: string, dark: string },\\n      borderAccent: { light: string, dark: string },\\n      borderBlue: { light: string, dark: string },\\n      borderGreen: { light: string, dark: string },\\n      borderIris: { light: string, dark: string },\\n      borderRed: { light: string, dark: string },\\n      borderYellow: { light: string, dark: string },\\n      heading: { light: string, dark: string },\\n      shadow: { light: string, dark: string },\\n      text: { light: string, dark: string },\\n      text2: { light: string, dark: string },\\n      text3: { light: string, dark: string },\\n      text4: { light: string, dark: string },\\n      textAccent: { light: string, dark: string },\\n      textAccentHover: { light: string, dark: string },\\n      textBlue: { light: string, dark: string },\\n      textBlueHover: { light: string, dark: string },\\n      textGreen: { light: string, dark: string },\\n      textGreenHover: { light: string, dark: string },\\n      textIris: { light: string, dark: string },\\n      textIrisHover: { light: string, dark: string },\\n      textRed: { light: string, dark: string },\\n      textRedHover: { light: string, dark: string },\\n      textYellow: { light: string, dark: string },\\n      textYellowHover: { light: string, dark: string },\\n \\n      blockquoteBorder: { light: string, dark: string },\\n      blockquoteText: { light: string, dark: string },\\n      codeBlockBackground: { light: string, dark: string },\\n      codeCharacterHighlightBackground: { light: string, dark: string },\\n      codeHighlightBackground: { light: string, dark: string },\\n      codeHighlightBorder: { light: string, dark: string },\\n      codeInlineBackground: { light: string, dark: string },\\n      codeInlineBorder: { light: string, dark: string },\\n      codeInlineText: { light: string, dark: string },\\n      codeTitleBackground: { light: string, dark: string },\\n      dangerBackground: { light: string, dark: string },\\n      dangerBorder: { light: string, dark: string },\\n      dangerText: { light: string, dark: string },\\n      dangerTextHover: { light: string, dark: string },\\n      hr: { light: string, dark: string },\\n      infoBackground: { light: string, dark: string },\\n      infoBorder: { light: string, dark: string },\\n      infoText: { light: string, dark: string },\\n      infoTextHover: { light: string, dark: string },\\n      lineNumber: { light: string, dark: string },\\n      link: { light: string, dark: string },\\n      linkHover: { light: string, dark: string },\\n      noteBackground: { light: string, dark: string },\\n      noteBorder: { light: string, dark: string },\\n      noteText: { light: string, dark: string },\\n      successBackground: { light: string, dark: string },\\n      successBorder: { light: string, dark: string },\\n      successText: { light: string, dark: string },\\n      successTextHover: { light: string, dark: string },\\n      tableBorder: { light: string, dark: string },\\n      tableHeaderBackground: { light: string, dark: string },\\n      tableHeaderText: { light: string, dark: string },\\n      tipBackground: { light: string, dark: string },\\n      tipBorder: { light: string, dark: string },\\n      tipText: { light: string, dark: string },\\n      tipTextHover: { light: string, dark: string },\\n      warningBackground: { light: string, dark: string },\\n      warningBorder: { light: string, dark: string },\\n      warningText: { light: string, dark: string },\\n      warningTextHover: { light: string, dark: string },\\n    },\\n    content: {\\n      horizontalPadding: string,\\n      verticalPadding: string,\\n      width: string,\\n    },\\n    fontFamily: {\\n      default: string,\\n      mono: string,\\n    },\\n    fontSize: {\\n      root: string,\\n      &#x27;9&#x27;: string,\\n      &#x27;11&#x27;: string,\\n      &#x27;12&#x27;: string,\\n      &#x27;13&#x27;: string,\\n      &#x27;14&#x27;: string,\\n      &#x27;15&#x27;: string,\\n      &#x27;16&#x27;: string,\\n      &#x27;18&#x27;: string,\\n      &#x27;20&#x27;: string,\\n      &#x27;24&#x27;: string,\\n      &#x27;32&#x27;: string,\\n      h1: string,\\n      h2: string,\\n      h3: string,\\n      h4: string,\\n      h5: string,\\n      h6: string,\\n      code: string,\\n      codeBlock: string,\\n      lineNumber: string,\\n      subtitle: string,\\n      th: string,\\n      td: string,\\n    },\\n    fontWeight: {\\n      regular: string,\\n      medium: string,\\n      semibold: string,\\n    },\\n    lineHeight: {\\n      code: string,\\n      heading: string,\\n      listItem: string,\\n      outlineItem: string,\\n      paragraph: string,\\n    },\\n    space: {\\n      &#x27;0&#x27;: string,\\n      &#x27;1&#x27;: string,\\n      &#x27;2&#x27;: string,\\n      &#x27;3&#x27;: string,\\n      &#x27;4&#x27;: string,\\n      &#x27;6&#x27;: string,\\n      &#x27;8&#x27;: string,\\n      &#x27;12&#x27;: string,\\n      &#x27;14&#x27;: string,\\n      &#x27;16&#x27;: string,\\n      &#x27;18&#x27;: string,\\n      &#x27;20&#x27;: string,\\n      &#x27;22&#x27;: string,\\n      &#x27;24&#x27;: string,\\n      &#x27;28&#x27;: string,\\n      &#x27;32&#x27;: string,\\n      &#x27;40&#x27;: string,\\n      &#x27;44&#x27;: string,\\n      &#x27;48&#x27;: string,\\n      &#x27;56&#x27;: string,\\n      &#x27;64&#x27;: string,\\n      &#x27;72&#x27;: string,\\n      &#x27;80&#x27;: string,\\n    }\\n  }\\n}\\n\",\"title\":\"theme\",\"titles\":[\"Config\",\"Parameters\"]},{\"href\":\"/docs/api/config#title\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <code>string</code></li>\\n<li><strong>Default:</strong> <code>&quot;Docs&quot;</code></li>\\n</ul>\\n<p>Documentation title.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/api/config.mdx#title\",\"isPage\":false,\"text\":\"\\n\\nType: string\\nDefault: &quot;Docs&quot;\\n\\nDocumentation title.\\nimport { defineConfig } from &#x27;vocs&#x27;\\n \\nexport default defineConfig({\\n  title: &#x27;Viem&#x27;\\n})\\n\",\"title\":\"title\",\"titles\":[\"Config\",\"Parameters\"]},{\"href\":\"/docs/api/config#titletemplate\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <code>string</code></li>\\n<li><strong>Default:</strong> <code>&quot;%s – Docs&quot;</code></li>\\n</ul>\\n<p>Template for the page title.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">,</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  titleTemplate: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;%s – Viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/api/config.mdx#titletemplate\",\"isPage\":false,\"text\":\"\\n\\nType: string\\nDefault: &quot;%s – Docs&quot;\\n\\nTemplate for the page title.\\nimport { defineConfig } from &#x27;vocs&#x27;\\n \\nexport default defineConfig({\\n  title: &#x27;Viem&#x27;,\\n  titleTemplate: &#x27;%s – Viem&#x27;\\n})\\n\",\"title\":\"titleTemplate\",\"titles\":[\"Config\",\"Parameters\"]},{\"href\":\"/docs/api/config#topnav\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <code>TopNav</code></li>\\n</ul>\\n<p>Navigation displayed on the top.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">,</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  topNav: [ </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    { text: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Guide &amp; API&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, link: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;/docs/getting-started&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, match: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;/docs&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> }, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    { text: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Blog&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, link: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;/blog&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> }, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  ] </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/api/config.mdx#topnav\",\"isPage\":false,\"text\":\"\\n\\nType: TopNav\\n\\nNavigation displayed on the top.\\nimport { defineConfig } from &#x27;vocs&#x27;\\n \\nexport default defineConfig({\\n  title: &#x27;Viem&#x27;,\\n  topNav: [ \\n    { text: &#x27;Guide &amp; API&#x27;, link: &#x27;/docs/getting-started&#x27;, match: &#x27;/docs&#x27; }, \\n    { text: &#x27;Blog&#x27;, link: &#x27;/blog&#x27; }, \\n  ] \\n})\\n\",\"title\":\"topNav\",\"titles\":[\"Config\",\"Parameters\"]},{\"href\":\"/docs/api/config#twoslash\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <code>Twoslash</code></li>\\n</ul>\\n<p>TwoSlash configuration.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">,</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  twoslash: { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    compilerOptions: { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      strict: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">true</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    } </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  } </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/api/config.mdx#twoslash\",\"isPage\":false,\"text\":\"\\n\\nType: Twoslash\\n\\nTwoSlash configuration.\\nimport { defineConfig } from &#x27;vocs&#x27;\\n \\nexport default defineConfig({\\n  title: &#x27;Viem&#x27;,\\n  twoslash: { \\n    compilerOptions: { \\n      strict: true, \\n    } \\n  } \\n})\\n\",\"title\":\"twoslash\",\"titles\":[\"Config\",\"Parameters\"]},{\"href\":\"/docs/api/config#vite\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <code>Vite.UserConfig</code></li>\\n</ul>\\n<p>Vite configuration. <a href=\\\"https://vitejs.dev/config/\\\">See more.</a></p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @noErrors</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> tsconfigPaths </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vite-tsconfig-paths&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">,</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  vite: { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    build: { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      minify: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;terser&#x27;</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    plugins: [</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">tsconfigPaths</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()] </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  } </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\",\"id\":\"site/pages/docs/api/config.mdx#vite\",\"isPage\":false,\"text\":\"\\n\\nType: Vite.UserConfig\\n\\nVite configuration. See more.\\n// @noErrors\\nimport { defineConfig } from &#x27;vocs&#x27;\\nimport tsconfigPaths from &#x27;vite-tsconfig-paths&#x27;\\n \\nexport default defineConfig({\\n  title: &#x27;Viem&#x27;,\\n  vite: { \\n    build: { \\n      minify: &#x27;terser&#x27;\\n    }, \\n    plugins: [tsconfigPaths()] \\n  } \\n})\",\"title\":\"vite\",\"titles\":[\"Config\",\"Parameters\"]}]}],[\"index.b0cabed368e9ece555a464776cee996d2603bb2bf88c66970ac0d67f41d01839\",{\"mdx\":\"---\\nlayout: minimal\\ndate: 2023-11-25\\n---\\n\\n# gm\\n\\n::authors\\n\\nwe're so back.\",\"document\":[{\"href\":\"/blog/gm#gm\",\"html\":\"<div data-authors=\\\"true\\\"></div></header>\\n<div></div>\\n<p>we&#x27;re so back.</p>\",\"id\":\"site/pages/blog/gm.mdx#gm\",\"isPage\":true,\"text\":\"\\n\\nwe&#x27;re so back.\",\"title\":\"gm\",\"titles\":[]}]}],[\"index.c2e4fd8ee27dd36ce04f11edc91f13584d8206359adafdc3dff37962c736d34d\",{\"mdx\":\"# Twoslash\\n\\n[TypeScript Twoslash](https://www.typescriptlang.org/dev/twoslash/) can be seen as a pre-processor that enhances your code-samples. \\nIt is a markup language for JavaScript and TypeScript. \\n\\nIt leverages the compiler APIs used by text editors to offer type-driven hover information, precise error messages, and type callouts. \\n\\n## Queries\\n\\nOne of the key reasons for making Twoslash is the ability to use the TypeScript compiler to pull out type information about your code mechanically. Twoslash comes with two different ways to query your code: `^?` and `^|`.\\n\\n### Extract Type\\n\\nUsing `^?` you can pull out type information about a particular identifier in the line of code above it.\\n\\n:::code-group\\n\\n```ts [Output] twoslash\\nimport { getHighlighterCore } from 'shiki/core'\\n\\nconst shiki = await getHighlighterCore({})\\n//    ^?\\n\\n```\\n\\n````md [Markdown]\\n```ts twoslash\\nimport { getHighlighterCore } from 'shiki/core'\\n\\nconst shiki = await getHighlighterCore({})\\n//    ^?\\n```\\n````\\n\\n:::\\n\\n\\n### Completions\\n\\nUsing `^|` you can pull out information about a what the auto-complete looks like at a particular location.\\n\\n:::code-group\\n\\n```ts [Output] twoslash\\n// @noErrors\\ntype Example = { apple: 'foo' | 'bar' | 'baz', ant: number, anchovy: string }\\nconst example: Example = { a: 'foo' }\\n\\nexample.a \\n//       ^|\\n\\n\\n\\nexample.apple === ' \\n//                 ^|\\n\\n\\n```\\n\\n````md [Markdown]\\n```ts twoslash\\n// @noErrors\\nconsole.e \\n//       ^|\\n```\\n````\\n\\n:::\\n\\n### Highlighting\\n\\nYou can use `^^^` to highlight a range of the line above it.\\n\\n:::code-group\\n\\n```ts twoslash [Output]\\nfunction add(foo: number, bar: number) {\\n  //     ^^^\\n  return foo + bar\\n  //           ^^^\\n}\\n```\\n\\n````md [Markdown]\\n```ts twoslash [Output]\\nfunction add(foo: number, bar: number) {\\n  //     ^^^\\n  return foo + bar\\n  //           ^^^\\n}\\n```\\n````\\n\\n:::\\n\\n## Cutting\\n\\nEvery Twoslash code sample needs to be a complete TypeScript program realistically, basically it needs to compile. Quite often to make it compiler, there is a bunch of code which isn't relevant to the user. This can be extracted out of the code sample via `// ---cut---` which removes all of the code above it from the output.\\n\\n### `---cut---`\\n\\nCut works after TypeScript has generated the project and pulled out all the editor information (like identifiers, queries, highlights etc) and then amends all of their offsets and lines to re-fit the smaller output. What your user sees is everything below the `---cut---`.\\n\\nThe below example only shows a single line.\\n\\n:::code-group\\n\\n```ts [Output] twoslash\\nconst level = \\\"Danger\\\"\\n// ---cut---\\nconsole.log(level)\\n```\\n\\n````md [Markdown]\\n```ts twoslash\\nconst level = \\\"Danger\\\"\\n// ---cut---\\nconsole.log(level)\\n```\\n````\\n\\n:::\\n\\nThe example below shows the last two lines, but to TypeScript it was a program with 2 files and all of the IDE information is hooked up correctly across the files. \\n\\nThis is why `// @filename: [file]` is specifically the only Twoslash command which is not removed, because if it's not relevant it can be `---cut---` away.\\n\\n:::code-group\\n\\n```ts [Output] twoslash\\n// @filename: a.ts\\nexport const helloWorld = \\\"Hi\\\"\\n\\n// @filename: b.ts\\n// ---cut---\\nimport { helloWorld } from \\\"./a\\\"\\nconsole.log(helloWorld)\\n```\\n\\n````md [Markdown]\\n```ts twoslash\\n// @filename: a.ts\\nexport const helloWorld = \\\"Hi\\\"\\n\\n// @filename: b.ts\\n// ---cut---\\nimport { helloWorld } from \\\"./a\\\"\\nconsole.log(helloWorld)\\n```\\n````\\n\\n:::\\n\\n### `---cut-after---`\\n\\nThe sibling to `---cut---` which trims anything after the sigil:\\n\\n:::code-group\\n\\n```tsx [Output] twoslash\\n// @noErrors\\nimport { createContext } from 'react'\\n\\nconst Context = createContext('foo')\\n\\nconst Page = () => (\\n// ---cut---\\n<Context.Provider value=\\\"bar\\\">\\n  Hello world\\n</Context.Provider>\\n// ---cut-after---\\n)\\n```\\n\\n````md [Markdown]\\n```ts twoslash\\n// @noErrors\\nimport { createContext } from 'react'\\n\\nconst Context = createContext('foo')\\n\\nconst Page = () => (\\n// ---cut---\\n<Context.Provider value=\\\"bar\\\">\\n  Hello world\\n</Context.Provider>\\n// ---cut-after---\\n)\\n```\\n````\\n\\n:::\\n\\n## Errors\\n\\nMost of the time, unless you are the TypeScript team, you want to avoid errors in your code samples. Strictly speaking, this usually means setting the right compiler flags and environment in each code sample.\\n\\nSome times however, you do want to raise a compiler error - to show incorrect states. In those cases, twoslash has a way to mark the compiler errors you expect.\\n\\n### `@errors: [num]`\\n\\nAll TypeScript compiler errors have a number, this number is relatively arbitrary and can change between TypeScript versions. For our case these numbers are useful in declaring what we expect to see.\\n\\nTaking this example:\\n\\n:::code-group\\n\\n```ts [Output] twoslash\\nconst a = \\\"123\\\"\\na = 132\\n```\\n\\n````md [Markdown]\\n```ts twoslash\\nconst a = \\\"123\\\"\\na = 132\\n```\\n````\\n\\n:::\\n\\nTypeScript gives the following error: `Cannot assign to 'a' because it is a constant. [2588]`.\\n\\nWhich the code sample does not reference, and thus the codesample has raise the mis-match as an 'exception'. Shiki Twoslash then shows a pretty error, and will set the process exit code to 1 failing any builds. You can use `// @errors: 2588` to tell Shiki Twoslash that you expect this error to occur:\\n\\n:::code-group\\n\\n```ts [Output] twoslash\\n// @errors: 2588\\nconst a = \\\"123\\\"\\na = 132\\n```\\n\\n````md [Markdown]\\n```ts twoslash\\n// @errors: 2588\\nconst a = \\\"123\\\"\\na = 132\\n```\\n````\\n\\n:::\\n\\n### `@noErrors`\\n\\nSometimes you have needs in which a broken TypeScript build is OK, a good example of this is using a completion query `// ^|` which requires a broken TypeScript project to work. You can use `// @noErrors` to supress all errors in a code sample, and not have them show inline.\\n\\n:::code-group\\n\\n```ts [Output] twoslash\\n// @noErrors\\nconst a = \\\"123\\\"\\na = 132\\n```\\n\\n````md [Markdown]\\n```ts twoslash\\n// @noErrors\\nconst a = \\\"123\\\"\\na = 132\\n```\\n````\\n\\n:::\\n\\n## Multi-file\\n\\nTwoslash code samples aren't limited to creating a single file, by using `// @filename: [file]` you can write any file to the virtual file system used by TypeScript to power your code samples.\\n\\n### `@filename: [file]`\\n\\nAfter seeing `@filename` Twoslash creates a new virtual file-system file and adds the new lines to that. You can't edit a file after it was created, but you can overwrite it.\\n\\nFor example, if you want to quickly fake a node module:\\n\\n:::code-group\\n\\n```tsx [Output] twoslash\\n// @filename: node_modules/@types/mylib/index.d.ts\\nexport function doit(): string\\n\\n// @filename: index.ts\\nimport { doit } from \\\"mylib\\\"\\nconsole.log(doit)\\n```\\n\\n````md [Markdown]\\n```ts twoslash\\n// @filename: node_modules/@types/mylib/index.d.ts\\nexport function doit(): string\\n\\n// @filename: index.ts\\nimport { doit } from \\\"mylib\\\"\\nconsole.log(doit)\\n```\\n````\\n\\n:::\\n\\nThis code sample sets up the types for a non-existent npm module, and TypeScript picks it up as the definitions in the same way it would in a non-virtual TypeScript project.\\n\\n:::code-group\\n\\n```tsx [Output] twoslash\\n// @resolveJsonModule\\n// @filename: app.json\\n{ \\\"version\\\": \\\"23.2.3\\\" }\\n\\n// @filename: index.ts\\nimport appSettings from \\\"./app.json\\\"\\nappSettings.version\\n//          ^?\\n\\n```\\n\\n````md [Markdown]\\n```ts twoslash \\n// @resolveJsonModule\\n// @filename: app.json\\n{ \\\"version\\\": \\\"23.2.3\\\" }\\n\\n// @filename: index.ts\\nimport appSettings from \\\"./app.json\\\"\\nappSettings.version\\n//          ^?\\n```\\n````\\n\\n:::\\n\\nThis code sets up a JSON object which can be imported in a TypeScript file.\\n\\n:::code-group\\n\\n```tsx [Output] twoslash\\n// @filename: ambient.d.ts\\ndeclare module '*.mdx' {\\n    export default any\\n}\\ndeclare module \\\"react\\\"\\n\\n// @filename: MultiFileDocs.mdx\\n## Hello world\\n\\n// @filename: index.tsx\\n// ---cut---\\nimport React from \\\"react\\\"\\nimport MultiFileDocs from \\\"./MultiFileDocs.mdx\\\"\\n\\nexport default () => <MultiFileDocs/>\\n```\\n\\n```tsx [Markdown]\\n// @filename: ambient.d.ts\\ndeclare module '*.mdx' {\\n    export default any\\n}\\ndeclare module \\\"react\\\"\\n\\n// @filename: MultiFileDocs.mdx\\n## Hello world\\n\\n// @filename: index.tsx\\n// ---cut---\\nimport React from \\\"react\\\"\\nimport MultiFileDocs from \\\"./MultiFileDocs.mdx\\\"\\n\\nexport default () => <MultiFileDocs/>\\n```\\n\\n:::\\n\\n## External Types\\n\\nUnless you're teaching TypeScript/JavaScript, you're probably going to want to import libraries into your code samples.\\n\\nTwoslash works by faking a virtual file system over your existing file system. This means any `@types` or libraries with TypeScript definitions should work out of the box with no config.\\n\\n### Globals\\n\\nSetting up globals is a little bit more complex, but not drastically. You need to use the [triple slash reference](https://www.typescriptlang.org/docs/handbook/triple-slash-directives.html#-reference-types-) which adds a particular library to the global scope.\\n\\n:::code-group\\n\\n```ts [Output] twoslash\\n/// <reference types=\\\"node\\\" />\\n// ---cut---\\nimport { writeFileSync } from \\\"fs\\\" \\nwriteFileSync(\\\"myfile.txt\\\", \\\"// TODO\\\")\\n```\\n\\n````md [Markdown]\\n```ts twoslash\\n/// <reference types=\\\"node\\\" />\\n// ---cut---\\nimport { writeFileSync } from \\\"fs\\\" \\nwriteFileSync(\\\"myfile.txt\\\", \\\"// TODO\\\")\\n```\\n````\\n\\n:::\\n\\n## Callouts \\n\\n:::code-group\\n\\n```ts [Output] twoslash\\nimport { getHighlighterCore } from 'shiki/core'\\n\\nconst shiki = await getHighlighterCore({})\\nconst a = 1\\n// @log: Custom log message\\nconst b = 1\\n// @error: Custom error message\\nconst c = 1\\n// @warn: Custom warning message\\nconst d = 1\\n// @annotate: Custom annotation message\\n```\\n\\n````md [Markdown]\\n```ts twoslash\\nimport { getHighlighterCore } from 'shiki/core'\\n\\nconst shiki = await getHighlighterCore({})\\nconst a = 1\\n// @log: Custom log message\\nconst b = 1\\n// @error: Custom error message\\nconst c = 1\\n// @warn: Custom warning message\\nconst d = 1\\n// @annotate: Custom annotation message\\n```\\n````\\n\\n:::\\n\\n## Compiler flags\\n\\n```md\\n// @allowJs\\nAllow JavaScript files to be a part of your program. Use the `checkJS` option to get errors from these files..\\n\\n// @allowSyntheticDefaultImports\\nAllow 'import x from y' when a module doesn't have a default export..\\n\\n// @allowUmdGlobalAccess\\nAllow accessing UMD globals from modules..\\n\\n// @allowUnreachableCode\\nDisable error reporting for unreachable code..\\n\\n// @allowUnusedLabels\\nDisable error reporting for unused labels..\\n\\n// @alwaysStrict\\nEnsure 'use strict' is always emitted..\\n\\n// @assumeChangesOnlyAffectDirectDependencies\\nHave recompiles in projects that use `incremental` and `watch` mode assume that changes within a file will only affect files directly depending on it..\\n\\n// @baseUrl\\nSpecify the base directory to resolve non-relative module names..\\n\\n// @charset\\nNo longer supported. In early versions, manually set the text encoding for reading files..\\n\\n// @checkJs\\nEnable error reporting in type-checked JavaScript files..\\n\\n// @composite\\nEnable constraints that allow a TypeScript project to be used with project references..\\n\\n// @declaration\\nGenerate .d.ts files from TypeScript and JavaScript files in your project..\\n\\n// @declarationDir\\nSpecify the output directory for generated declaration files..\\n\\n// @declarationMap\\nCreate sourcemaps for d.ts files..\\n\\n// @diagnostics\\nOutput compiler performance information after building..\\n\\n// @disableReferencedProjectLoad\\nReduce the number of projects loaded automatically by TypeScript..\\n\\n// @disableSizeLimit\\nRemove the 20mb cap on total source code size for JavaScript files in the TypeScript language server..\\n\\n// @disableSolutionSearching\\nOpt a project out of multi-project reference checking when editing..\\n\\n// @disableSourceOfProjectReferenceRedirect\\nDisable preferring source files instead of declaration files when referencing composite projects.\\n\\n// @downlevelIteration\\nEmit more compliant, but verbose and less performant JavaScript for iteration..\\n\\n// @emitBOM\\nEmit a UTF-8 Byte Order Mark (BOM) in the beginning of output files..\\n\\n// @emitDeclarationOnly\\nOnly output d.ts files and not JavaScript files..\\n\\n// @emitDecoratorMetadata\\nEmit design-type metadata for decorated declarations in source files..\\n\\n// @esModuleInterop\\nEmit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility..\\n\\n// @exactOptionalPropertyTypes\\nInterpret optional property types as written, rather than adding 'undefined'..\\n\\n// @experimentalDecorators\\nEnable experimental support for TC39 stage 2 draft decorators..\\n\\n// @explainFiles\\nPrint files read during the compilation including why it was included..\\n\\n// @extendedDiagnostics\\nOutput more detailed compiler performance information after building..\\n\\n// @forceConsistentCasingInFileNames\\nEnsure that casing is correct in imports..\\n\\n// @generateCpuProfile\\nEmit a v8 CPU profile of the compiler run for debugging..\\n\\n// @importHelpers\\nAllow importing helper functions from tslib once per project, instead of including them per-file..\\n\\n// @importsNotUsedAsValues\\nSpecify emit/checking behavior for imports that are only used for types.\\n\\n// @incremental\\nEnable incremental compilation.\\n\\n// @inlineSourceMap\\nInclude sourcemap files inside the emitted JavaScript..\\n\\n// @inlineSources\\nInclude source code in the sourcemaps inside the emitted JavaScript..\\n\\n// @isolatedModules\\nEnsure that each file can be safely transpiled without relying on other imports..\\n\\n// @jsx\\nSpecify what JSX code is generated..\\n\\n// @jsxFactory\\nSpecify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'.\\n\\n// @jsxFragmentFactory\\nSpecify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'..\\n\\n// @jsxImportSource\\nSpecify module specifier used to import the JSX factory functions when using `jsx: react-jsx*`.`.\\n\\n// @keyofStringsOnly\\nMake keyof only return strings instead of string, numbers or symbols. Legacy option..\\n\\n// @lib\\nSpecify a set of bundled library declaration files that describe the target runtime environment..\\n\\n// @listEmittedFiles\\nPrint the names of emitted files after a compilation..\\n\\n// @listFiles\\nPrint all of the files read during the compilation..\\n\\n// @mapRoot\\nSpecify the location where debugger should locate map files instead of generated locations..\\n\\n// @maxNodeModuleJsDepth\\nSpecify the maximum folder depth used for checking JavaScript files from `node_modules`. Only applicable with `allowJs`..\\n\\n// @module\\nSpecify what module code is generated..\\n\\n// @moduleResolution\\nSpecify how TypeScript looks up a file from a given module specifier..\\n\\n// @newLine\\nSet the newline character for emitting files..\\n\\n// @noEmit\\nDisable emitting file from a compilation..\\n\\n// @noEmitHelpers\\nDisable generating custom helper functions like `__extends` in compiled output..\\n\\n// @noEmitOnError\\nDisable emitting files if any type checking errors are reported..\\n\\n// @noErrorTruncation\\nDisable truncating types in error messages..\\n\\n// @noFallthroughCasesInSwitch\\nEnable error reporting for fallthrough cases in switch statements..\\n\\n// @noImplicitAny\\nEnable error reporting for expressions and declarations with an implied `any` type...\\n\\n// @noImplicitOverride\\nAdd `undefined` to a type when accessed using an index..\\n\\n// @noImplicitReturns\\nEnable error reporting for codepaths that do not explicitly return in a function..\\n\\n// @noImplicitThis\\nEnable error reporting when `this` is given the type `any`..\\n\\n// @noImplicitUseStrict\\nDisable adding 'use strict' directives in emitted JavaScript files..\\n\\n// @noLib\\nDisable including any library files, including the default lib.d.ts..\\n\\n// @noPropertyAccessFromIndexSignature\\nEnforces using indexed accessors for keys declared using an indexed type.\\n\\n// @noResolve\\nDisallow `import`s, `require`s or ``s from expanding the number of files TypeScript should add to a project..\\n\\n// @noStrictGenericChecks\\nDisable strict checking of generic signatures in function types..\\n\\n// @noUncheckedIndexedAccess\\nInclude 'undefined' in index signature results.\\n\\n// @noUnusedLocals\\nEnable error reporting when a local variables aren't read..\\n\\n// @noUnusedParameters\\nRaise an error when a function parameter isn't read.\\n\\n// @out\\nDeprecated setting. Use `outFile` instead..\\n\\n// @outDir\\nSpecify an output folder for all emitted files..\\n\\n// @outFile\\nSpecify a file that bundles all outputs into one JavaScript file. If `declaration` is true, also designates a file that bundles all .d.ts output..\\n\\n// @paths\\nSpecify a set of entries that re-map imports to additional lookup locations..\\n\\n// @plugins\\nList of language service plugins..\\n\\n// @preserveConstEnums\\nDisable erasing `const enum` declarations in generated code..\\n\\n// @preserveSymlinks\\nDisable resolving symlinks to their realpath. This correlates to the same flag in node..\\n\\n// @preserveWatchOutput\\nDisable wiping the console in watch mode.\\n\\n// @pretty\\nEnable color and formatting in output to make compiler errors easier to read.\\n\\n// @reactNamespace\\nSpecify the object invoked for `createElement`. This only applies when targeting `react` JSX emit..\\n\\n// @removeComments\\nDisable emitting comments..\\n\\n// @resolveJsonModule\\nEnable importing .json files.\\n\\n// @rootDir\\nSpecify the root folder within your source files..\\n\\n// @rootDirs\\nAllow multiple folders to be treated as one when resolving modules..\\n\\n// @skipDefaultLibCheck\\nSkip type checking .d.ts files that are included with TypeScript..\\n\\n// @skipLibCheck\\nSkip type checking all .d.ts files..\\n\\n// @sourceMap\\nCreate source map files for emitted JavaScript files..\\n\\n// @sourceRoot\\nSpecify the root path for debuggers to find the reference source code..\\n\\n// @strict\\nEnable all strict type-checking options..\\n\\n// @strictBindCallApply\\nCheck that the arguments for `bind`, `call`, and `apply` methods match the original function..\\n\\n// @strictFunctionTypes\\nWhen assigning functions, check to ensure parameters and the return values are subtype-compatible..\\n\\n// @strictNullChecks\\nWhen type checking, take into account `null` and `undefined`..\\n\\n// @strictPropertyInitialization\\nCheck for class properties that are declared but not set in the constructor..\\n\\n// @stripInternal\\nDisable emitting declarations that have `@internal` in their JSDoc comments..\\n\\n// @suppressExcessPropertyErrors\\nDisable reporting of excess property errors during the creation of object literals..\\n\\n// @suppressImplicitAnyIndexErrors\\nSuppress `noImplicitAny` errors when indexing objects that lack index signatures..\\n\\n// @target\\nSet the JavaScript language version for emitted JavaScript and include compatible library declarations..\\n\\n// @traceResolution\\nLog paths used during the `moduleResolution` process..\\n\\n// @tsBuildInfoFile\\nSpecify the folder for .tsbuildinfo incremental compilation files..\\n\\n// @typeRoots\\nSpecify multiple folders that act like `./node_modules/@types`..\\n\\n// @types\\nSpecify type package names to be included without being referenced in a source file..\\n\\n// @useDefineForClassFields\\nEmit ECMAScript-standard-compliant class fields..\\n\\n// @useUnknownInCatchVariables\\nType catch clause variables as 'unknown' instead of 'any'..\\n```\\n\\n\",\"document\":[{\"href\":\"/docs/guides/twoslash#twoslash\",\"html\":\"</header>\\n<p><a href=\\\"https://www.typescriptlang.org/dev/twoslash/\\\">TypeScript Twoslash</a> can be seen as a pre-processor that enhances your code-samples.\\nIt is a markup language for JavaScript and TypeScript.</p>\\n<p>It leverages the compiler APIs used by text editors to offer type-driven hover information, precise error messages, and type callouts.</p>\\n\",\"id\":\"site/pages/docs/guides/twoslash.mdx#twoslash\",\"isPage\":true,\"text\":\"\\nTypeScript Twoslash can be seen as a pre-processor that enhances your code-samples.\\nIt is a markup language for JavaScript and TypeScript.\\nIt leverages the compiler APIs used by text editors to offer type-driven hover information, precise error messages, and type callouts.\\n\",\"title\":\"Twoslash\",\"titles\":[]},{\"href\":\"/docs/guides/twoslash#queries\",\"html\":\"\\n<p>One of the key reasons for making Twoslash is the ability to use the TypeScript compiler to pull out type information about your code mechanically. Twoslash comes with two different ways to query your code: <code>^?</code> and <code>^|</code>.</p>\\n\",\"id\":\"site/pages/docs/guides/twoslash.mdx#queries\",\"isPage\":false,\"text\":\"\\nOne of the key reasons for making Twoslash is the ability to use the TypeScript compiler to pull out type information about your code mechanically. Twoslash comes with two different ways to query your code: ^? and ^|.\\n\",\"title\":\"Queries\",\"titles\":[\"Twoslash\"]},{\"href\":\"/docs/guides/twoslash#extract-type\",\"html\":\"\\n<p>Using <code>^?</code> you can pull out type information about a particular identifier in the line of code above it.</p>\\n<div class=\\\"code-group\\\"><div data-title=\\\"Output\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Output\\\" data-lang=\\\"ts\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { getHighlighterCore } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;shiki/core&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> shiki</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> getHighlighterCore</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({})</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">//    ^?</span></span></code></pre></div><div data-title=\\\"Markdown\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Markdown\\\" data-lang=\\\"md\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">```ts twoslash</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { getHighlighterCore } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;shiki/core&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> shiki</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> getHighlighterCore</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({})</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">//    ^?</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">```</span></span></code></pre></div></div>\\n\",\"id\":\"site/pages/docs/guides/twoslash.mdx#extract-type\",\"isPage\":false,\"text\":\"\\nUsing ^? you can pull out type information about a particular identifier in the line of code above it.\\nimport { getHighlighterCore } from &#x27;shiki/core&#x27;\\n \\nconst shiki = await getHighlighterCore({})\\n//    ^?```ts twoslash\\nimport { getHighlighterCore } from &#x27;shiki/core&#x27;\\n \\nconst shiki = await getHighlighterCore({})\\n//    ^?\\n```\\n\",\"title\":\"Extract Type\",\"titles\":[\"Twoslash\",\"Queries\"]},{\"href\":\"/docs/guides/twoslash#completions\",\"html\":\"\\n<p>Using <code>^|</code> you can pull out information about a what the auto-complete looks like at a particular location.</p>\\n<div class=\\\"code-group\\\"><div data-title=\\\"Output\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Output\\\" data-lang=\\\"ts\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @noErrors</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">type</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> Example</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">apple</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;foo&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> |</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;bar&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> |</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;baz&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ant</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> number</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">anchovy</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> example</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> Example</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { a: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;foo&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> }</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">example.a </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">//       ^|</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">example.apple </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">===</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;</span><span style=\\\"color:#B31D28;--shiki-dark:#FF938A;font-style:italic;--shiki-dark-font-style:italic\\\"> </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">//                 ^|</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span></code></pre></div><div data-title=\\\"Markdown\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Markdown\\\" data-lang=\\\"md\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">```ts twoslash</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @noErrors</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">console.e </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">//       ^|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">```</span></span></code></pre></div></div>\\n\",\"id\":\"site/pages/docs/guides/twoslash.mdx#completions\",\"isPage\":false,\"text\":\"\\nUsing ^| you can pull out information about a what the auto-complete looks like at a particular location.\\n// @noErrors\\ntype Example = { apple: &#x27;foo&#x27; | &#x27;bar&#x27; | &#x27;baz&#x27;, ant: number, anchovy: string }\\nconst example: Example = { a: &#x27;foo&#x27; }\\n \\nexample.a \\n//       ^|\\n \\n \\n \\nexample.apple === &#x27; \\n//                 ^|\\n ```ts twoslash\\n// @noErrors\\nconsole.e \\n//       ^|\\n```\\n\",\"title\":\"Completions\",\"titles\":[\"Twoslash\",\"Queries\"]},{\"href\":\"/docs/guides/twoslash#highlighting\",\"html\":\"\\n<p>You can use <code>^^^</code> to highlight a range of the line above it.</p>\\n<div class=\\\"code-group\\\"><div data-title=\\\"Output\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Output\\\" data-lang=\\\"ts\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">function</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> add</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">foo</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> number</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">bar</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> number</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">  //     ^^^</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">  return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> foo </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">+</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> bar</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">  //           ^^^</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre></div><div data-title=\\\"Markdown\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Markdown\\\" data-lang=\\\"md\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">```ts twoslash [Output]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">function</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> add</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">foo</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> number</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">bar</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> number</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">  //     ^^^</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">  return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> foo </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">+</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> bar</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">  //           ^^^</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">```</span></span></code></pre></div></div>\\n\",\"id\":\"site/pages/docs/guides/twoslash.mdx#highlighting\",\"isPage\":false,\"text\":\"\\nYou can use ^^^ to highlight a range of the line above it.\\nfunction add(foo: number, bar: number) {\\n  //     ^^^\\n  return foo + bar\\n  //           ^^^\\n}```ts twoslash [Output]\\nfunction add(foo: number, bar: number) {\\n  //     ^^^\\n  return foo + bar\\n  //           ^^^\\n}\\n```\\n\",\"title\":\"Highlighting\",\"titles\":[\"Twoslash\",\"Queries\"]},{\"href\":\"/docs/guides/twoslash#cutting\",\"html\":\"\\n<p>Every Twoslash code sample needs to be a complete TypeScript program realistically, basically it needs to compile. Quite often to make it compiler, there is a bunch of code which isn&#x27;t relevant to the user. This can be extracted out of the code sample via <code>// ---cut---</code> which removes all of the code above it from the output.</p>\\n\",\"id\":\"site/pages/docs/guides/twoslash.mdx#cutting\",\"isPage\":false,\"text\":\"\\nEvery Twoslash code sample needs to be a complete TypeScript program realistically, basically it needs to compile. Quite often to make it compiler, there is a bunch of code which isn&#x27;t relevant to the user. This can be extracted out of the code sample via // ---cut--- which removes all of the code above it from the output.\\n\",\"title\":\"Cutting\",\"titles\":[\"Twoslash\"]},{\"href\":\"/docs/guides/twoslash#---cut---\",\"html\":\"\\n<p>Cut works after TypeScript has generated the project and pulled out all the editor information (like identifiers, queries, highlights etc) and then amends all of their offsets and lines to re-fit the smaller output. What your user sees is everything below the <code>---cut---</code>.</p>\\n<p>The below example only shows a single line.</p>\\n<div class=\\\"code-group\\\"><div data-title=\\\"Output\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Output\\\" data-lang=\\\"ts\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> level</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;Danger&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// ---cut---</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">console.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">log</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(level)</span></span></code></pre></div><div data-title=\\\"Markdown\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Markdown\\\" data-lang=\\\"md\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">```ts twoslash</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> level</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;Danger&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// ---cut---</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">console.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">log</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(level)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">```</span></span></code></pre></div></div>\\n<p>The example below shows the last two lines, but to TypeScript it was a program with 2 files and all of the IDE information is hooked up correctly across the files.</p>\\n<p>This is why <code>// @filename: [file]</code> is specifically the only Twoslash command which is not removed, because if it&#x27;s not relevant it can be <code>---cut---</code> away.</p>\\n<div class=\\\"code-group\\\"><div data-title=\\\"Output\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Output\\\" data-lang=\\\"ts\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @filename: a.ts</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> helloWorld</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;Hi&quot;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @filename: b.ts</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// ---cut---</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { helloWorld } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;./a&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">console.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">log</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(helloWorld)</span></span></code></pre></div><div data-title=\\\"Markdown\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Markdown\\\" data-lang=\\\"md\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">```ts twoslash</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @filename: a.ts</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> helloWorld</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;Hi&quot;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @filename: b.ts</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// ---cut---</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { helloWorld } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;./a&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">console.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">log</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(helloWorld)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">```</span></span></code></pre></div></div>\\n\",\"id\":\"site/pages/docs/guides/twoslash.mdx#---cut---\",\"isPage\":false,\"text\":\"\\nCut works after TypeScript has generated the project and pulled out all the editor information (like identifiers, queries, highlights etc) and then amends all of their offsets and lines to re-fit the smaller output. What your user sees is everything below the ---cut---.\\nThe below example only shows a single line.\\nconst level = &quot;Danger&quot;\\n// ---cut---\\nconsole.log(level)```ts twoslash\\nconst level = &quot;Danger&quot;\\n// ---cut---\\nconsole.log(level)\\n```\\nThe example below shows the last two lines, but to TypeScript it was a program with 2 files and all of the IDE information is hooked up correctly across the files.\\nThis is why // @filename: [file] is specifically the only Twoslash command which is not removed, because if it&#x27;s not relevant it can be ---cut--- away.\\n// @filename: a.ts\\nexport const helloWorld = &quot;Hi&quot;\\n \\n// @filename: b.ts\\n \\n// ---cut---\\nimport { helloWorld } from &quot;./a&quot;\\nconsole.log(helloWorld)```ts twoslash\\n// @filename: a.ts\\nexport const helloWorld = &quot;Hi&quot;\\n \\n// @filename: b.ts\\n \\n// ---cut---\\nimport { helloWorld } from &quot;./a&quot;\\nconsole.log(helloWorld)\\n```\\n\",\"title\":\"---cut---\",\"titles\":[\"Twoslash\",\"Cutting\"]},{\"href\":\"/docs/guides/twoslash#---cut-after---\",\"html\":\"\\n<p>The sibling to <code>---cut---</code> which trims anything after the sigil:</p>\\n<div class=\\\"code-group\\\"><div data-title=\\\"Output\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Output\\\" data-lang=\\\"tsx\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @noErrors</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { createContext } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;react&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> Context</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createContext</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;foo&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> Page</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> () </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=&gt;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// ---cut---</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">&lt;</span><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">Context.Provider</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\"> value</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;bar&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">&gt;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  Hello world</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">&lt;/</span><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">Context.Provider</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">&gt;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// ---cut-after---</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span></code></pre></div><div data-title=\\\"Markdown\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Markdown\\\" data-lang=\\\"md\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">```ts twoslash</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @noErrors</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { createContext } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;react&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> Context</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createContext</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;foo&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> Page</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> () </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=&gt;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// ---cut---</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&lt;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Context.Provider value</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;bar&quot;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&gt;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  Hello </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">world</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&lt;/</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Context.Provider</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&gt;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// ---cut-after---</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">```</span></span></code></pre></div></div>\\n\",\"id\":\"site/pages/docs/guides/twoslash.mdx#---cut-after---\",\"isPage\":false,\"text\":\"\\nThe sibling to ---cut--- which trims anything after the sigil:\\n// @noErrors\\nimport { createContext } from &#x27;react&#x27;\\n \\nconst Context = createContext(&#x27;foo&#x27;)\\n \\nconst Page = () =&gt; (\\n// ---cut---\\n&lt;Context.Provider value=&quot;bar&quot;&gt;\\n  Hello world\\n&lt;/Context.Provider&gt;\\n// ---cut-after---\\n)```ts twoslash\\n// @noErrors\\nimport { createContext } from &#x27;react&#x27;\\n \\nconst Context = createContext(&#x27;foo&#x27;)\\n \\nconst Page = () =&gt; (\\n// ---cut---\\n&lt;Context.Provider value=&quot;bar&quot;&gt;\\n  Hello world\\n&lt;/Context.Provider&gt;\\n// ---cut-after---\\n)\\n```\\n\",\"title\":\"---cut-after---\",\"titles\":[\"Twoslash\",\"Cutting\"]},{\"href\":\"/docs/guides/twoslash#errors\",\"html\":\"\\n<p>Most of the time, unless you are the TypeScript team, you want to avoid errors in your code samples. Strictly speaking, this usually means setting the right compiler flags and environment in each code sample.</p>\\n<p>Some times however, you do want to raise a compiler error - to show incorrect states. In those cases, twoslash has a way to mark the compiler errors you expect.</p>\\n\",\"id\":\"site/pages/docs/guides/twoslash.mdx#errors\",\"isPage\":false,\"text\":\"\\nMost of the time, unless you are the TypeScript team, you want to avoid errors in your code samples. Strictly speaking, this usually means setting the right compiler flags and environment in each code sample.\\nSome times however, you do want to raise a compiler error - to show incorrect states. In those cases, twoslash has a way to mark the compiler errors you expect.\\n\",\"title\":\"Errors\",\"titles\":[\"Twoslash\"]},{\"href\":\"/docs/guides/twoslash#errors-num\",\"html\":\"\\n<p>All TypeScript compiler errors have a number, this number is relatively arbitrary and can change between TypeScript versions. For our case these numbers are useful in declaring what we expect to see.</p>\\n<p>Taking this example:</p>\\n<div class=\\\"code-group\\\"><div data-title=\\\"Output\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Output\\\" data-lang=\\\"ts\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> a</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;123&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">a </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 132</span></span></code></pre></div><div data-title=\\\"Markdown\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Markdown\\\" data-lang=\\\"md\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">```ts twoslash</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> a</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;123&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">a </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 132</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">```</span></span></code></pre></div></div>\\n<p>TypeScript gives the following error: <code>Cannot assign to &#x27;a&#x27; because it is a constant. [2588]</code>.</p>\\n<p>Which the code sample does not reference, and thus the codesample has raise the mis-match as an &#x27;exception&#x27;. Shiki Twoslash then shows a pretty error, and will set the process exit code to 1 failing any builds. You can use <code>// @errors: 2588</code> to tell Shiki Twoslash that you expect this error to occur:</p>\\n<div class=\\\"code-group\\\"><div data-title=\\\"Output\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Output\\\" data-lang=\\\"ts\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @errors: 2588</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> a</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;123&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">a </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 132</span></span></code></pre></div><div data-title=\\\"Markdown\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Markdown\\\" data-lang=\\\"md\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">```ts twoslash</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @errors: 2588</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> a</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;123&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">a </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 132</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">```</span></span></code></pre></div></div>\\n\",\"id\":\"site/pages/docs/guides/twoslash.mdx#errors-num\",\"isPage\":false,\"text\":\"\\nAll TypeScript compiler errors have a number, this number is relatively arbitrary and can change between TypeScript versions. For our case these numbers are useful in declaring what we expect to see.\\nTaking this example:\\nconst a = &quot;123&quot;\\na = 132```ts twoslash\\nconst a = &quot;123&quot;\\na = 132\\n```\\nTypeScript gives the following error: Cannot assign to &#x27;a&#x27; because it is a constant. [2588].\\nWhich the code sample does not reference, and thus the codesample has raise the mis-match as an &#x27;exception&#x27;. Shiki Twoslash then shows a pretty error, and will set the process exit code to 1 failing any builds. You can use // @errors: 2588 to tell Shiki Twoslash that you expect this error to occur:\\n// @errors: 2588\\nconst a = &quot;123&quot;\\na = 132```ts twoslash\\n// @errors: 2588\\nconst a = &quot;123&quot;\\na = 132\\n```\\n\",\"title\":\"@errors: [num]\",\"titles\":[\"Twoslash\",\"Errors\"]},{\"href\":\"/docs/guides/twoslash#noerrors\",\"html\":\"\\n<p>Sometimes you have needs in which a broken TypeScript build is OK, a good example of this is using a completion query <code>// ^|</code> which requires a broken TypeScript project to work. You can use <code>// @noErrors</code> to supress all errors in a code sample, and not have them show inline.</p>\\n<div class=\\\"code-group\\\"><div data-title=\\\"Output\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Output\\\" data-lang=\\\"ts\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @noErrors</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> a</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;123&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">a </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 132</span></span></code></pre></div><div data-title=\\\"Markdown\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Markdown\\\" data-lang=\\\"md\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">```ts twoslash</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @noErrors</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> a</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;123&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">a </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 132</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">```</span></span></code></pre></div></div>\\n\",\"id\":\"site/pages/docs/guides/twoslash.mdx#noerrors\",\"isPage\":false,\"text\":\"\\nSometimes you have needs in which a broken TypeScript build is OK, a good example of this is using a completion query // ^| which requires a broken TypeScript project to work. You can use // @noErrors to supress all errors in a code sample, and not have them show inline.\\n// @noErrors\\nconst a = &quot;123&quot;\\na = 132```ts twoslash\\n// @noErrors\\nconst a = &quot;123&quot;\\na = 132\\n```\\n\",\"title\":\"@noErrors\",\"titles\":[\"Twoslash\",\"Errors\"]},{\"href\":\"/docs/guides/twoslash#multi-file\",\"html\":\"\\n<p>Twoslash code samples aren&#x27;t limited to creating a single file, by using <code>// @filename: [file]</code> you can write any file to the virtual file system used by TypeScript to power your code samples.</p>\\n\",\"id\":\"site/pages/docs/guides/twoslash.mdx#multi-file\",\"isPage\":false,\"text\":\"\\nTwoslash code samples aren&#x27;t limited to creating a single file, by using // @filename: [file] you can write any file to the virtual file system used by TypeScript to power your code samples.\\n\",\"title\":\"Multi-file\",\"titles\":[\"Twoslash\"]},{\"href\":\"/docs/guides/twoslash#filename-file\",\"html\":\"\\n<p>After seeing <code>@filename</code> Twoslash creates a new virtual file-system file and adds the new lines to that. You can&#x27;t edit a file after it was created, but you can overwrite it.</p>\\n<p>For example, if you want to quickly fake a node module:</p>\\n<div class=\\\"code-group\\\"><div data-title=\\\"Output\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Output\\\" data-lang=\\\"tsx\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @filename: node_modules/@types/mylib/index.d.ts</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> function</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> doit</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @filename: index.ts</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { doit } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;mylib&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">console.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">log</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(doit)</span></span></code></pre></div><div data-title=\\\"Markdown\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Markdown\\\" data-lang=\\\"md\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">```ts twoslash</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @filename: node_modules/@types/mylib/index.d.ts</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> function</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> doit</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @filename: index.ts</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { doit } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;mylib&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">console.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">log</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(doit)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">```</span></span></code></pre></div></div>\\n<p>This code sample sets up the types for a non-existent npm module, and TypeScript picks it up as the definitions in the same way it would in a non-virtual TypeScript project.</p>\\n<div class=\\\"code-group\\\"><div data-title=\\\"Output\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Output\\\" data-lang=\\\"tsx\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @resolveJsonModule</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @filename: app.json</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{ </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;version&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;23.2.3&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> }</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @filename: index.ts</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> appSettings </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;./app.json&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">appSettings.version</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">//          ^?</span></span></code></pre></div><div data-title=\\\"Markdown\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Markdown\\\" data-lang=\\\"md\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">```ts twoslash </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @resolveJsonModule</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @filename: app.json</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{ </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;version&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;23.2.3&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> }</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @filename: index.ts</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> appSettings </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;./app.json&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">appSettings.version</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">//          ^?</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">```</span></span></code></pre></div></div>\\n<p>This code sets up a JSON object which can be imported in a TypeScript file.</p>\\n<div class=\\\"code-group\\\"><div data-title=\\\"Output\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Output\\\" data-lang=\\\"tsx\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @filename: ambient.d.ts</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">declare</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> module</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;*.mdx&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> any</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">declare</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> module</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;react&quot;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @filename: MultiFileDocs.mdx</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">## </span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Hello</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> world</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @filename: index.tsx</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// ---cut---</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> React </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;react&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> MultiFileDocs </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;./MultiFileDocs.mdx&quot;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\"> () </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=&gt;</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\"> &lt;</span><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">MultiFileDocs</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">/&gt;</span></span></code></pre></div><div data-title=\\\"Markdown\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Markdown\\\" data-lang=\\\"tsx\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @filename: ambient.d.ts</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">declare</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> module</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;*.mdx&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> any</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">declare</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> module</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;react&quot;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @filename: MultiFileDocs.mdx</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">## </span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Hello</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> world</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @filename: index.tsx</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// ---cut---</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> React </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;react&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> MultiFileDocs </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;./MultiFileDocs.mdx&quot;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\"> () </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=&gt;</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\"> &lt;</span><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">MultiFileDocs</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">/&gt;</span></span></code></pre></div></div>\\n\",\"id\":\"site/pages/docs/guides/twoslash.mdx#filename-file\",\"isPage\":false,\"text\":\"\\nAfter seeing @filename Twoslash creates a new virtual file-system file and adds the new lines to that. You can&#x27;t edit a file after it was created, but you can overwrite it.\\nFor example, if you want to quickly fake a node module:\\n// @filename: node_modules/@types/mylib/index.d.ts\\nexport function doit(): string\\n \\n// @filename: index.ts\\nimport { doit } from &quot;mylib&quot;\\nconsole.log(doit)```ts twoslash\\n// @filename: node_modules/@types/mylib/index.d.ts\\nexport function doit(): string\\n \\n// @filename: index.ts\\nimport { doit } from &quot;mylib&quot;\\nconsole.log(doit)\\n```\\nThis code sample sets up the types for a non-existent npm module, and TypeScript picks it up as the definitions in the same way it would in a non-virtual TypeScript project.\\n// @resolveJsonModule\\n// @filename: app.json\\n{ &quot;version&quot;: &quot;23.2.3&quot; }\\n \\n// @filename: index.ts\\nimport appSettings from &quot;./app.json&quot;\\nappSettings.version\\n//          ^?```ts twoslash \\n// @resolveJsonModule\\n// @filename: app.json\\n{ &quot;version&quot;: &quot;23.2.3&quot; }\\n \\n// @filename: index.ts\\nimport appSettings from &quot;./app.json&quot;\\nappSettings.version\\n//          ^?\\n```\\nThis code sets up a JSON object which can be imported in a TypeScript file.\\n// @filename: ambient.d.ts\\ndeclare module &#x27;*.mdx&#x27; {\\n    export default any\\n}\\ndeclare module &quot;react&quot;\\n \\n// @filename: MultiFileDocs.mdx\\n## Hello world\\n \\n// @filename: index.tsx\\n \\n// ---cut---\\nimport React from &quot;react&quot;\\nimport MultiFileDocs from &quot;./MultiFileDocs.mdx&quot;\\n \\nexport default () =&gt; &lt;MultiFileDocs/&gt;// @filename: ambient.d.ts\\ndeclare module &#x27;*.mdx&#x27; {\\n    export default any\\n}\\ndeclare module &quot;react&quot;\\n \\n// @filename: MultiFileDocs.mdx\\n## Hello world\\n \\n// @filename: index.tsx\\n \\n// ---cut---\\nimport React from &quot;react&quot;\\nimport MultiFileDocs from &quot;./MultiFileDocs.mdx&quot;\\n \\nexport default () =&gt; &lt;MultiFileDocs/&gt;\\n\",\"title\":\"@filename: [file]\",\"titles\":[\"Twoslash\",\"Multi-file\"]},{\"href\":\"/docs/guides/twoslash#external-types\",\"html\":\"\\n<p>Unless you&#x27;re teaching TypeScript/JavaScript, you&#x27;re probably going to want to import libraries into your code samples.</p>\\n<p>Twoslash works by faking a virtual file system over your existing file system. This means any <code>@types</code> or libraries with TypeScript definitions should work out of the box with no config.</p>\\n\",\"id\":\"site/pages/docs/guides/twoslash.mdx#external-types\",\"isPage\":false,\"text\":\"\\nUnless you&#x27;re teaching TypeScript/JavaScript, you&#x27;re probably going to want to import libraries into your code samples.\\nTwoslash works by faking a virtual file system over your existing file system. This means any @types or libraries with TypeScript definitions should work out of the box with no config.\\n\",\"title\":\"External Types\",\"titles\":[\"Twoslash\"]},{\"href\":\"/docs/guides/twoslash#globals\",\"html\":\"\\n<p>Setting up globals is a little bit more complex, but not drastically. You need to use the <a href=\\\"https://www.typescriptlang.org/docs/handbook/triple-slash-directives.html#-reference-types-\\\">triple slash reference</a> which adds a particular library to the global scope.</p>\\n<div class=\\\"code-group\\\"><div data-title=\\\"Output\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Output\\\" data-lang=\\\"ts\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">/// &lt;</span><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">reference</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\"> types</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;node&quot;</span><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\"> /&gt;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// ---cut---</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { writeFileSync } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;fs&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">writeFileSync</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;myfile.txt&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;// TODO&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span></code></pre></div><div data-title=\\\"Markdown\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Markdown\\\" data-lang=\\\"md\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">```ts twoslash</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">/// &lt;</span><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">reference</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\"> types</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;node&quot;</span><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\"> /&gt;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// ---cut---</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { writeFileSync } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;fs&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">writeFileSync</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;myfile.txt&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;// TODO&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">```</span></span></code></pre></div></div>\\n\",\"id\":\"site/pages/docs/guides/twoslash.mdx#globals\",\"isPage\":false,\"text\":\"\\nSetting up globals is a little bit more complex, but not drastically. You need to use the triple slash reference which adds a particular library to the global scope.\\n/// &lt;reference types=&quot;node&quot; /&gt;\\n// ---cut---\\nimport { writeFileSync } from &quot;fs&quot; \\nwriteFileSync(&quot;myfile.txt&quot;, &quot;// TODO&quot;)```ts twoslash\\n/// &lt;reference types=&quot;node&quot; /&gt;\\n// ---cut---\\nimport { writeFileSync } from &quot;fs&quot; \\nwriteFileSync(&quot;myfile.txt&quot;, &quot;// TODO&quot;)\\n```\\n\",\"title\":\"Globals\",\"titles\":[\"Twoslash\",\"External Types\"]},{\"href\":\"/docs/guides/twoslash#callouts\",\"html\":\"\\n<div class=\\\"code-group\\\"><div data-title=\\\"Output\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Output\\\" data-lang=\\\"ts\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { getHighlighterCore } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;shiki/core&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> shiki</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> getHighlighterCore</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({})</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> a</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 1</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @log: Custom log message</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> b</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 1</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @error: Custom error message</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> c</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 1</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @warn: Custom warning message</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> d</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 1</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @annotate: Custom annotation message</span></span></code></pre></div><div data-title=\\\"Markdown\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Markdown\\\" data-lang=\\\"md\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">```ts twoslash</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { getHighlighterCore } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;shiki/core&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> shiki</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> getHighlighterCore</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({})</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> a</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 1</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @log: Custom log message</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> b</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 1</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @error: Custom error message</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> c</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 1</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @warn: Custom warning message</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> d</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 1</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @annotate: Custom annotation message</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">```</span></span></code></pre></div></div>\\n\",\"id\":\"site/pages/docs/guides/twoslash.mdx#callouts\",\"isPage\":false,\"text\":\"\\nimport { getHighlighterCore } from &#x27;shiki/core&#x27;\\n \\nconst shiki = await getHighlighterCore({})\\nconst a = 1\\n// @log: Custom log message\\nconst b = 1\\n// @error: Custom error message\\nconst c = 1\\n// @warn: Custom warning message\\nconst d = 1\\n// @annotate: Custom annotation message```ts twoslash\\nimport { getHighlighterCore } from &#x27;shiki/core&#x27;\\n \\nconst shiki = await getHighlighterCore({})\\nconst a = 1\\n// @log: Custom log message\\nconst b = 1\\n// @error: Custom error message\\nconst c = 1\\n// @warn: Custom warning message\\nconst d = 1\\n// @annotate: Custom annotation message\\n```\\n\",\"title\":\"Callouts\",\"titles\":[\"Twoslash\"]},{\"href\":\"/docs/guides/twoslash#compiler-flags\",\"html\":\"\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @allowJs</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Allow JavaScript files to be a part of your program. Use the </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">`checkJS`</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> option to get errors from these files..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @allowSyntheticDefaultImports</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Allow &#x27;import x from y&#x27; when a module doesn&#x27;t have a default export..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @allowUmdGlobalAccess</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Allow accessing UMD globals from modules..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @allowUnreachableCode</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Disable error reporting for unreachable code..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @allowUnusedLabels</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Disable error reporting for unused labels..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @alwaysStrict</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Ensure &#x27;use strict&#x27; is always emitted..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @assumeChangesOnlyAffectDirectDependencies</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Have recompiles in projects that use </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">`incremental`</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> and </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">`watch`</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> mode assume that changes within a file will only affect files directly depending on it..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @baseUrl</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Specify the base directory to resolve non-relative module names..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @charset</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">No longer supported. In early versions, manually set the text encoding for reading files..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @checkJs</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Enable error reporting in type-checked JavaScript files..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @composite</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Enable constraints that allow a TypeScript project to be used with project references..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @declaration</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Generate .d.ts files from TypeScript and JavaScript files in your project..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @declarationDir</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Specify the output directory for generated declaration files..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @declarationMap</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Create sourcemaps for d.ts files..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @diagnostics</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Output compiler performance information after building..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @disableReferencedProjectLoad</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Reduce the number of projects loaded automatically by TypeScript..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @disableSizeLimit</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Remove the 20mb cap on total source code size for JavaScript files in the TypeScript language server..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @disableSolutionSearching</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Opt a project out of multi-project reference checking when editing..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @disableSourceOfProjectReferenceRedirect</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Disable preferring source files instead of declaration files when referencing composite projects.</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @downlevelIteration</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Emit more compliant, but verbose and less performant JavaScript for iteration..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @emitBOM</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @emitDeclarationOnly</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Only output d.ts files and not JavaScript files..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @emitDecoratorMetadata</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Emit design-type metadata for decorated declarations in source files..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @esModuleInterop</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Emit additional JavaScript to ease support for importing CommonJS modules. This enables </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">`allowSyntheticDefaultImports`</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> for type compatibility..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @exactOptionalPropertyTypes</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Interpret optional property types as written, rather than adding &#x27;undefined&#x27;..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @experimentalDecorators</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Enable experimental support for TC39 stage 2 draft decorators..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @explainFiles</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Print files read during the compilation including why it was included..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @extendedDiagnostics</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Output more detailed compiler performance information after building..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @forceConsistentCasingInFileNames</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Ensure that casing is correct in imports..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @generateCpuProfile</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Emit a v8 CPU profile of the compiler run for debugging..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @importHelpers</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Allow importing helper functions from tslib once per project, instead of including them per-file..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @importsNotUsedAsValues</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Specify emit/checking behavior for imports that are only used for types.</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @incremental</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Enable incremental compilation.</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @inlineSourceMap</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Include sourcemap files inside the emitted JavaScript..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @inlineSources</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Include source code in the sourcemaps inside the emitted JavaScript..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @isolatedModules</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Ensure that each file can be safely transpiled without relying on other imports..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @jsx</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Specify what JSX code is generated..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @jsxFactory</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Specify the JSX factory function used when targeting React JSX emit, e.g. &#x27;React.createElement&#x27; or &#x27;h&#x27;.</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @jsxFragmentFactory</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. &#x27;React.Fragment&#x27; or &#x27;Fragment&#x27;..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @jsxImportSource</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Specify module specifier used to import the JSX factory functions when using </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">`jsx: react-jsx*`</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.`.</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @keyofStringsOnly</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Make keyof only return strings instead of string, numbers or symbols. Legacy option..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @lib</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Specify a set of bundled library declaration files that describe the target runtime environment..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @listEmittedFiles</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Print the names of emitted files after a compilation..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @listFiles</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Print all of the files read during the compilation..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @mapRoot</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Specify the location where debugger should locate map files instead of generated locations..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @maxNodeModuleJsDepth</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Specify the maximum folder depth used for checking JavaScript files from </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">`node_modules`</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">. Only applicable with </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">`allowJs`</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @module</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Specify what module code is generated..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @moduleResolution</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Specify how TypeScript looks up a file from a given module specifier..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @newLine</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Set the newline character for emitting files..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @noEmit</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Disable emitting file from a compilation..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @noEmitHelpers</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Disable generating custom helper functions like </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">`__extends`</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> in compiled output..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @noEmitOnError</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Disable emitting files if any type checking errors are reported..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @noErrorTruncation</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Disable truncating types in error messages..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @noFallthroughCasesInSwitch</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Enable error reporting for fallthrough cases in switch statements..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @noImplicitAny</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Enable error reporting for expressions and declarations with an implied </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">`any`</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> type...</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @noImplicitOverride</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Add </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">`undefined`</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> to a type when accessed using an index..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @noImplicitReturns</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Enable error reporting for codepaths that do not explicitly return in a function..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @noImplicitThis</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Enable error reporting when </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">`this`</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> is given the type </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">`any`</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @noImplicitUseStrict</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Disable adding &#x27;use strict&#x27; directives in emitted JavaScript files..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @noLib</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Disable including any library files, including the default lib.d.ts..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @noPropertyAccessFromIndexSignature</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Enforces using indexed accessors for keys declared using an indexed type.</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @noResolve</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Disallow </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">`import`</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">s, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">`require`</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">s or ``s from expanding the number of files TypeScript should add to a project..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @noStrictGenericChecks</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Disable strict checking of generic signatures in function types..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @noUncheckedIndexedAccess</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Include &#x27;undefined&#x27; in index signature results.</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @noUnusedLocals</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Enable error reporting when a local variables aren&#x27;t read..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @noUnusedParameters</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Raise an error when a function parameter isn&#x27;t read.</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @out</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Deprecated setting. Use </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">`outFile`</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> instead..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @outDir</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Specify an output folder for all emitted files..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @outFile</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Specify a file that bundles all outputs into one JavaScript file. If </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">`declaration`</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> is true, also designates a file that bundles all .d.ts output..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @paths</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Specify a set of entries that re-map imports to additional lookup locations..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @plugins</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">List of language service plugins..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @preserveConstEnums</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Disable erasing </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">`const enum`</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> declarations in generated code..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @preserveSymlinks</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Disable resolving symlinks to their realpath. This correlates to the same flag in node..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @preserveWatchOutput</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Disable wiping the console in watch mode.</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @pretty</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Enable color and formatting in output to make compiler errors easier to read.</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @reactNamespace</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Specify the object invoked for </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">`createElement`</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">. This only applies when targeting </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">`react`</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> JSX emit..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @removeComments</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Disable emitting comments..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @resolveJsonModule</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Enable importing .json files.</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @rootDir</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Specify the root folder within your source files..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @rootDirs</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Allow multiple folders to be treated as one when resolving modules..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @skipDefaultLibCheck</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Skip type checking .d.ts files that are included with TypeScript..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @skipLibCheck</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Skip type checking all .d.ts files..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @sourceMap</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Create source map files for emitted JavaScript files..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @sourceRoot</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Specify the root path for debuggers to find the reference source code..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @strict</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Enable all strict type-checking options..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @strictBindCallApply</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Check that the arguments for </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">`bind`</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">`call`</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, and </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">`apply`</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> methods match the original function..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @strictFunctionTypes</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">When assigning functions, check to ensure parameters and the return values are subtype-compatible..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @strictNullChecks</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">When type checking, take into account </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">`null`</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> and </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">`undefined`</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @strictPropertyInitialization</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Check for class properties that are declared but not set in the constructor..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @stripInternal</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Disable emitting declarations that have </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">`@internal`</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> in their JSDoc comments..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @suppressExcessPropertyErrors</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Disable reporting of excess property errors during the creation of object literals..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @suppressImplicitAnyIndexErrors</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Suppress </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">`noImplicitAny`</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> errors when indexing objects that lack index signatures..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @target</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Set the JavaScript language version for emitted JavaScript and include compatible library declarations..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @traceResolution</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Log paths used during the </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">`moduleResolution`</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> process..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @tsBuildInfoFile</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Specify the folder for .tsbuildinfo incremental compilation files..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @typeRoots</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Specify multiple folders that act like </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">`./node_modules/@types`</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @types</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Specify type package names to be included without being referenced in a source file..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @useDefineForClassFields</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Emit ECMAScript-standard-compliant class fields..</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">// @useUnknownInCatchVariables</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Type catch clause variables as &#x27;unknown&#x27; instead of &#x27;any&#x27;..</span></span></code></pre>\",\"id\":\"site/pages/docs/guides/twoslash.mdx#compiler-flags\",\"isPage\":false,\"text\":\"\\n// @allowJs\\nAllow JavaScript files to be a part of your program. Use the `checkJS` option to get errors from these files..\\n \\n// @allowSyntheticDefaultImports\\nAllow &#x27;import x from y&#x27; when a module doesn&#x27;t have a default export..\\n \\n// @allowUmdGlobalAccess\\nAllow accessing UMD globals from modules..\\n \\n// @allowUnreachableCode\\nDisable error reporting for unreachable code..\\n \\n// @allowUnusedLabels\\nDisable error reporting for unused labels..\\n \\n// @alwaysStrict\\nEnsure &#x27;use strict&#x27; is always emitted..\\n \\n// @assumeChangesOnlyAffectDirectDependencies\\nHave recompiles in projects that use `incremental` and `watch` mode assume that changes within a file will only affect files directly depending on it..\\n \\n// @baseUrl\\nSpecify the base directory to resolve non-relative module names..\\n \\n// @charset\\nNo longer supported. In early versions, manually set the text encoding for reading files..\\n \\n// @checkJs\\nEnable error reporting in type-checked JavaScript files..\\n \\n// @composite\\nEnable constraints that allow a TypeScript project to be used with project references..\\n \\n// @declaration\\nGenerate .d.ts files from TypeScript and JavaScript files in your project..\\n \\n// @declarationDir\\nSpecify the output directory for generated declaration files..\\n \\n// @declarationMap\\nCreate sourcemaps for d.ts files..\\n \\n// @diagnostics\\nOutput compiler performance information after building..\\n \\n// @disableReferencedProjectLoad\\nReduce the number of projects loaded automatically by TypeScript..\\n \\n// @disableSizeLimit\\nRemove the 20mb cap on total source code size for JavaScript files in the TypeScript language server..\\n \\n// @disableSolutionSearching\\nOpt a project out of multi-project reference checking when editing..\\n \\n// @disableSourceOfProjectReferenceRedirect\\nDisable preferring source files instead of declaration files when referencing composite projects.\\n \\n// @downlevelIteration\\nEmit more compliant, but verbose and less performant JavaScript for iteration..\\n \\n// @emitBOM\\nEmit a UTF-8 Byte Order Mark (BOM) in the beginning of output files..\\n \\n// @emitDeclarationOnly\\nOnly output d.ts files and not JavaScript files..\\n \\n// @emitDecoratorMetadata\\nEmit design-type metadata for decorated declarations in source files..\\n \\n// @esModuleInterop\\nEmit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility..\\n \\n// @exactOptionalPropertyTypes\\nInterpret optional property types as written, rather than adding &#x27;undefined&#x27;..\\n \\n// @experimentalDecorators\\nEnable experimental support for TC39 stage 2 draft decorators..\\n \\n// @explainFiles\\nPrint files read during the compilation including why it was included..\\n \\n// @extendedDiagnostics\\nOutput more detailed compiler performance information after building..\\n \\n// @forceConsistentCasingInFileNames\\nEnsure that casing is correct in imports..\\n \\n// @generateCpuProfile\\nEmit a v8 CPU profile of the compiler run for debugging..\\n \\n// @importHelpers\\nAllow importing helper functions from tslib once per project, instead of including them per-file..\\n \\n// @importsNotUsedAsValues\\nSpecify emit/checking behavior for imports that are only used for types.\\n \\n// @incremental\\nEnable incremental compilation.\\n \\n// @inlineSourceMap\\nInclude sourcemap files inside the emitted JavaScript..\\n \\n// @inlineSources\\nInclude source code in the sourcemaps inside the emitted JavaScript..\\n \\n// @isolatedModules\\nEnsure that each file can be safely transpiled without relying on other imports..\\n \\n// @jsx\\nSpecify what JSX code is generated..\\n \\n// @jsxFactory\\nSpecify the JSX factory function used when targeting React JSX emit, e.g. &#x27;React.createElement&#x27; or &#x27;h&#x27;.\\n \\n// @jsxFragmentFactory\\nSpecify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. &#x27;React.Fragment&#x27; or &#x27;Fragment&#x27;..\\n \\n// @jsxImportSource\\nSpecify module specifier used to import the JSX factory functions when using `jsx: react-jsx*`.`.\\n \\n// @keyofStringsOnly\\nMake keyof only return strings instead of string, numbers or symbols. Legacy option..\\n \\n// @lib\\nSpecify a set of bundled library declaration files that describe the target runtime environment..\\n \\n// @listEmittedFiles\\nPrint the names of emitted files after a compilation..\\n \\n// @listFiles\\nPrint all of the files read during the compilation..\\n \\n// @mapRoot\\nSpecify the location where debugger should locate map files instead of generated locations..\\n \\n// @maxNodeModuleJsDepth\\nSpecify the maximum folder depth used for checking JavaScript files from `node_modules`. Only applicable with `allowJs`..\\n \\n// @module\\nSpecify what module code is generated..\\n \\n// @moduleResolution\\nSpecify how TypeScript looks up a file from a given module specifier..\\n \\n// @newLine\\nSet the newline character for emitting files..\\n \\n// @noEmit\\nDisable emitting file from a compilation..\\n \\n// @noEmitHelpers\\nDisable generating custom helper functions like `__extends` in compiled output..\\n \\n// @noEmitOnError\\nDisable emitting files if any type checking errors are reported..\\n \\n// @noErrorTruncation\\nDisable truncating types in error messages..\\n \\n// @noFallthroughCasesInSwitch\\nEnable error reporting for fallthrough cases in switch statements..\\n \\n// @noImplicitAny\\nEnable error reporting for expressions and declarations with an implied `any` type...\\n \\n// @noImplicitOverride\\nAdd `undefined` to a type when accessed using an index..\\n \\n// @noImplicitReturns\\nEnable error reporting for codepaths that do not explicitly return in a function..\\n \\n// @noImplicitThis\\nEnable error reporting when `this` is given the type `any`..\\n \\n// @noImplicitUseStrict\\nDisable adding &#x27;use strict&#x27; directives in emitted JavaScript files..\\n \\n// @noLib\\nDisable including any library files, including the default lib.d.ts..\\n \\n// @noPropertyAccessFromIndexSignature\\nEnforces using indexed accessors for keys declared using an indexed type.\\n \\n// @noResolve\\nDisallow `import`s, `require`s or ``s from expanding the number of files TypeScript should add to a project..\\n \\n// @noStrictGenericChecks\\nDisable strict checking of generic signatures in function types..\\n \\n// @noUncheckedIndexedAccess\\nInclude &#x27;undefined&#x27; in index signature results.\\n \\n// @noUnusedLocals\\nEnable error reporting when a local variables aren&#x27;t read..\\n \\n// @noUnusedParameters\\nRaise an error when a function parameter isn&#x27;t read.\\n \\n// @out\\nDeprecated setting. Use `outFile` instead..\\n \\n// @outDir\\nSpecify an output folder for all emitted files..\\n \\n// @outFile\\nSpecify a file that bundles all outputs into one JavaScript file. If `declaration` is true, also designates a file that bundles all .d.ts output..\\n \\n// @paths\\nSpecify a set of entries that re-map imports to additional lookup locations..\\n \\n// @plugins\\nList of language service plugins..\\n \\n// @preserveConstEnums\\nDisable erasing `const enum` declarations in generated code..\\n \\n// @preserveSymlinks\\nDisable resolving symlinks to their realpath. This correlates to the same flag in node..\\n \\n// @preserveWatchOutput\\nDisable wiping the console in watch mode.\\n \\n// @pretty\\nEnable color and formatting in output to make compiler errors easier to read.\\n \\n// @reactNamespace\\nSpecify the object invoked for `createElement`. This only applies when targeting `react` JSX emit..\\n \\n// @removeComments\\nDisable emitting comments..\\n \\n// @resolveJsonModule\\nEnable importing .json files.\\n \\n// @rootDir\\nSpecify the root folder within your source files..\\n \\n// @rootDirs\\nAllow multiple folders to be treated as one when resolving modules..\\n \\n// @skipDefaultLibCheck\\nSkip type checking .d.ts files that are included with TypeScript..\\n \\n// @skipLibCheck\\nSkip type checking all .d.ts files..\\n \\n// @sourceMap\\nCreate source map files for emitted JavaScript files..\\n \\n// @sourceRoot\\nSpecify the root path for debuggers to find the reference source code..\\n \\n// @strict\\nEnable all strict type-checking options..\\n \\n// @strictBindCallApply\\nCheck that the arguments for `bind`, `call`, and `apply` methods match the original function..\\n \\n// @strictFunctionTypes\\nWhen assigning functions, check to ensure parameters and the return values are subtype-compatible..\\n \\n// @strictNullChecks\\nWhen type checking, take into account `null` and `undefined`..\\n \\n// @strictPropertyInitialization\\nCheck for class properties that are declared but not set in the constructor..\\n \\n// @stripInternal\\nDisable emitting declarations that have `@internal` in their JSDoc comments..\\n \\n// @suppressExcessPropertyErrors\\nDisable reporting of excess property errors during the creation of object literals..\\n \\n// @suppressImplicitAnyIndexErrors\\nSuppress `noImplicitAny` errors when indexing objects that lack index signatures..\\n \\n// @target\\nSet the JavaScript language version for emitted JavaScript and include compatible library declarations..\\n \\n// @traceResolution\\nLog paths used during the `moduleResolution` process..\\n \\n// @tsBuildInfoFile\\nSpecify the folder for .tsbuildinfo incremental compilation files..\\n \\n// @typeRoots\\nSpecify multiple folders that act like `./node_modules/@types`..\\n \\n// @types\\nSpecify type package names to be included without being referenced in a source file..\\n \\n// @useDefineForClassFields\\nEmit ECMAScript-standard-compliant class fields..\\n \\n// @useUnknownInCatchVariables\\nType catch clause variables as &#x27;unknown&#x27; instead of &#x27;any&#x27;..\",\"title\":\"Compiler flags\",\"titles\":[\"Twoslash\"]}]}],[\"index.d809be91170ede5ae0965b0ccf0175f802a0de02cfbd6b9918ff364ae0600a9d\",{\"mdx\":\"# Frontmatter [Define page-specific metadata]\\n\\nYou can set page-specific metadata such as the page title and description in the frontmatter of Markdown pages. The frontmatter is a YAML block encapulated in a `---` separator at the top of the page.\\n\\n```md [example.md]\\n--- // [!code focus]\\ntitle: Example // [!code focus]\\ndescription: This is an example page. // [!code focus]\\n--- // [!code focus]\\n\\n# Hello world\\n\\nThis is me.\\n```\\n\\n## authors\\n\\n- **Type:** `string[]`\\n\\nAuthors of the page. Used by the [`::authors` markdown directive](#TODO).\\n\\n```md\\n---\\nauthors: // [!code focus]\\n  - [jxom](https://x.com/jxom) // [!code focus]\\n  - [awkweb](https://x.com/awkweb) // [!code focus]\\n---\\n\\n# gm\\n\\n::authors // [!code focus]\\n\\nwe're so back\\n```\\n\\n## content\\n\\n- **Type:** \\n\\n```ts\\n{\\n  horizontalPadding: string\\n  width: string\\n  verticalPadding: string\\n}\\n```\\n\\nPage content attributes.\\n\\n- `horizontalPadding`: Horizontal padding of the content.\\n- `width`: Width of the content.\\n- `verticalPadding`: Vertical padding of the content.\\n\\n```md\\n---\\ncontent: // [!code focus]\\n  horizontalPadding: 0px // [!code focus]\\n  width: 100% // [!code focus]\\n  verticalPadding: 0px // [!code focus]\\n---\\n\\n# gm\\n\\nwe're so back\\n\\n```\\n\\n\\n## date\\n\\n- **Type:** `string`\\n\\nAuthors of the page. Used by the [`::authors` markdown directive](#TODO).\\n\\n```md\\n---\\nauthors: \\n  - [jxom](https://x.com/jxom) \\n  - [awkweb](https://x.com/awkweb) \\ndate: 2023-12-01 // [!code focus]\\n---\\n\\n# gm\\n\\n::authors // [!code focus]\\n\\nwe're so back\\n```\\n\\n## description\\n\\n- **Type:** `string`\\n\\nDescription of the page. Placed in the `<meta name=\\\"description\\\">` tag.\\n\\n```md\\n---\\ndescription: This is an example page.\\n---\\n```\\n\\n## layout\\n\\n- **Type:** `\\\"docs\\\" | \\\"landing\\\" | \\\"minimal\\\"`\\n- **Default:** `\\\"docs\\\"`\\n\\nLayout of the page.\\n\\n- `docs` - Documentation page layout (default).\\n- `landing` - Landing page layout.\\n- `minimal` - A minimal layout with no sidebar or header.\\n\\n```md\\n---\\nlayout: minimal\\n---\\n```\\n\\n## showLogo\\n\\n- **Type:** `boolean`\\n\\nWhether or not to display the logo in the header.\\n\\n```md\\n---\\nshowLogo: false\\n---\\n```\\n\\n## showOutline\\n\\n- **Type:** `number | boolean`\\n\\nWhether or not to display the outline, or the number of levels deep.\\n\\n```md\\n---\\nshowOutline: false\\n---\\n```\\n\\n```md\\n---\\nshowOutline: 2\\n---\\n```\\n\\n## showSidebar\\n\\n- **Type:** `boolean`\\n\\nWhether or not to display the sidebar.\\n\\n```md\\n---\\nshowSidebar: false\\n---\\n```\\n\\n## title\\n\\n- **Type:** `string`\\n\\nTitle of the page. Placed in the `<title>` tag.\\n\\n```md\\n---\\ntitle: Example\\n---\\n```\\n\",\"document\":[{\"href\":\"/docs/api/frontmatter#frontmatter\",\"html\":\"<div role=\\\"doc-subtitle\\\">Define page-specific metadata</div></header>\\n<p>You can set page-specific metadata such as the page title and description in the frontmatter of Markdown pages. The frontmatter is a YAML block encapulated in a <code>---</code> separator at the top of the page.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"example.md\\\" data-lang=\\\"md\\\"><code><span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">---</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">title</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">Example</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">description</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">This is an example page.</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">---</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\"># Hello world</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">This is me.</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/api/frontmatter.mdx#frontmatter\",\"isPage\":true,\"text\":\"Define page-specific metadata\\nYou can set page-specific metadata such as the page title and description in the frontmatter of Markdown pages. The frontmatter is a YAML block encapulated in a --- separator at the top of the page.\\n---\\ntitle: Example\\ndescription: This is an example page.\\n---\\n \\n# Hello world\\n \\nThis is me.\\n\",\"title\":\"Frontmatter\",\"titles\":[]},{\"href\":\"/docs/api/frontmatter#authors\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <code>string[]</code></li>\\n</ul>\\n<p>Authors of the page. Used by the <a href=\\\"#TODO\\\"><code>::authors</code> markdown directive</a>.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">---</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">authors</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  - [</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">jxom</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">(https://x.com/jxom)</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  - [</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">awkweb</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">(https://x.com/awkweb)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">---</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF;font-weight:bold;--shiki-dark-font-weight:bold\\\"># gm</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">::authors</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">we&#x27;re so back</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/api/frontmatter.mdx#authors\",\"isPage\":false,\"text\":\"\\n\\nType: string[]\\n\\nAuthors of the page. Used by the ::authors markdown directive.\\n---\\nauthors: \\n  - [jxom](https://x.com/jxom)\\n  - [awkweb](https://x.com/awkweb)\\n---\\n \\n# gm\\n \\n::authors\\n \\nwe&#x27;re so back\\n\",\"title\":\"authors\",\"titles\":[\"Frontmatter\"]},{\"href\":\"/docs/api/frontmatter#content\",\"html\":\"\\n<ul>\\n<li>\\n<strong>Type:</strong>\\n</li>\\n</ul>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">  horizontalPadding</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: string</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">  width</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: string</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">  verticalPadding</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: string</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n<p>Page content attributes.</p>\\n<ul>\\n<li><code>horizontalPadding</code>: Horizontal padding of the content.</li>\\n<li><code>width</code>: Width of the content.</li>\\n<li><code>verticalPadding</code>: Vertical padding of the content.</li>\\n</ul>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">---</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">content</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">  horizontalPadding</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">0px</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">  width</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">100%</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">  verticalPadding</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">0px</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">---</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF;font-weight:bold;--shiki-dark-font-weight:bold\\\"># gm</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">we&#x27;re so back</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/api/frontmatter.mdx#content\",\"isPage\":false,\"text\":\"\\n\\n\\nType:\\n\\n\\n{\\n  horizontalPadding: string\\n  width: string\\n  verticalPadding: string\\n}\\nPage content attributes.\\n\\nhorizontalPadding: Horizontal padding of the content.\\nwidth: Width of the content.\\nverticalPadding: Vertical padding of the content.\\n\\n---\\ncontent: \\n  horizontalPadding: 0px\\n  width: 100%\\n  verticalPadding: 0px\\n---\\n \\n# gm\\n \\nwe&#x27;re so back\\n\",\"title\":\"content\",\"titles\":[\"Frontmatter\"]},{\"href\":\"/docs/api/frontmatter#date\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <code>string</code></li>\\n</ul>\\n<p>Authors of the page. Used by the <a href=\\\"#TODO\\\"><code>::authors</code> markdown directive</a>.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">---</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">authors</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  - [</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">jxom</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">(https://x.com/jxom)</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  - [</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">awkweb</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">(https://x.com/awkweb)</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">date</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">2023-12-01</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">---</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF;font-weight:bold;--shiki-dark-font-weight:bold\\\"># gm</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">::authors</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">we&#x27;re so back</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/api/frontmatter.mdx#date\",\"isPage\":false,\"text\":\"\\n\\nType: string\\n\\nAuthors of the page. Used by the ::authors markdown directive.\\n---\\nauthors: \\n  - [jxom](https://x.com/jxom) \\n  - [awkweb](https://x.com/awkweb) \\ndate: 2023-12-01\\n---\\n \\n# gm\\n \\n::authors\\n \\nwe&#x27;re so back\\n\",\"title\":\"date\",\"titles\":[\"Frontmatter\"]},{\"href\":\"/docs/api/frontmatter#description\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <code>string</code></li>\\n</ul>\\n<p>Description of the page. Placed in the <code>&lt;meta name=&quot;description&quot;&gt;</code> tag.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">---</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">description</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">This is an example page.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">---</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/api/frontmatter.mdx#description\",\"isPage\":false,\"text\":\"\\n\\nType: string\\n\\nDescription of the page. Placed in the &lt;meta name=&quot;description&quot;&gt; tag.\\n---\\ndescription: This is an example page.\\n---\\n\",\"title\":\"description\",\"titles\":[\"Frontmatter\"]},{\"href\":\"/docs/api/frontmatter#layout\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <code>&quot;docs&quot; | &quot;landing&quot; | &quot;minimal&quot;</code></li>\\n<li><strong>Default:</strong> <code>&quot;docs&quot;</code></li>\\n</ul>\\n<p>Layout of the page.</p>\\n<ul>\\n<li><code>docs</code> - Documentation page layout (default).</li>\\n<li><code>landing</code> - Landing page layout.</li>\\n<li><code>minimal</code> - A minimal layout with no sidebar or header.</li>\\n</ul>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">---</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">layout</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">minimal</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">---</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/api/frontmatter.mdx#layout\",\"isPage\":false,\"text\":\"\\n\\nType: &quot;docs&quot; | &quot;landing&quot; | &quot;minimal&quot;\\nDefault: &quot;docs&quot;\\n\\nLayout of the page.\\n\\ndocs - Documentation page layout (default).\\nlanding - Landing page layout.\\nminimal - A minimal layout with no sidebar or header.\\n\\n---\\nlayout: minimal\\n---\\n\",\"title\":\"layout\",\"titles\":[\"Frontmatter\"]},{\"href\":\"/docs/api/frontmatter#showlogo\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <code>boolean</code></li>\\n</ul>\\n<p>Whether or not to display the logo in the header.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">---</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">showLogo</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">false</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">---</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/api/frontmatter.mdx#showlogo\",\"isPage\":false,\"text\":\"\\n\\nType: boolean\\n\\nWhether or not to display the logo in the header.\\n---\\nshowLogo: false\\n---\\n\",\"title\":\"showLogo\",\"titles\":[\"Frontmatter\"]},{\"href\":\"/docs/api/frontmatter#showoutline\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <code>number | boolean</code></li>\\n</ul>\\n<p>Whether or not to display the outline, or the number of levels deep.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">---</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">showOutline</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">false</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">---</span></span></code></pre>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">---</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">showOutline</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">2</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">---</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/api/frontmatter.mdx#showoutline\",\"isPage\":false,\"text\":\"\\n\\nType: number | boolean\\n\\nWhether or not to display the outline, or the number of levels deep.\\n---\\nshowOutline: false\\n---\\n---\\nshowOutline: 2\\n---\\n\",\"title\":\"showOutline\",\"titles\":[\"Frontmatter\"]},{\"href\":\"/docs/api/frontmatter#showsidebar\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <code>boolean</code></li>\\n</ul>\\n<p>Whether or not to display the sidebar.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">---</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">showSidebar</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">false</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">---</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/api/frontmatter.mdx#showsidebar\",\"isPage\":false,\"text\":\"\\n\\nType: boolean\\n\\nWhether or not to display the sidebar.\\n---\\nshowSidebar: false\\n---\\n\",\"title\":\"showSidebar\",\"titles\":[\"Frontmatter\"]},{\"href\":\"/docs/api/frontmatter#title\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <code>string</code></li>\\n</ul>\\n<p>Title of the page. Placed in the <code>&lt;title&gt;</code> tag.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">---</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">title</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">Example</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">---</span></span></code></pre>\",\"id\":\"site/pages/docs/api/frontmatter.mdx#title\",\"isPage\":false,\"text\":\"\\n\\nType: string\\n\\nTitle of the page. Placed in the &lt;title&gt; tag.\\n---\\ntitle: Example\\n---\",\"title\":\"title\",\"titles\":[\"Frontmatter\"]}]}],[\"index.fafda9bd77209af73812143df89772b126f32d1c0a634bb385e46f1049de11f5\",{\"mdx\":\"---\\nshowOutline: false\\nshowSidebar: false\\n---\\n\\n# Blank page\\n\\nThis is a blank page.\\n\",\"document\":[{\"href\":\"/blank#blank-page\",\"html\":\"</header>\\n<p>This is a blank page.</p>\",\"id\":\"site/pages/blank.mdx#blank-page\",\"isPage\":true,\"text\":\"\\nThis is a blank page.\",\"title\":\"Blank page\",\"titles\":[]}]}],[\"index.d58e698e41100503e8d931d095241c7af7d66baec732b1ef406c73e0ef2a23d7\",{\"mdx\":\"# Styling\\n\\n## Custom CSS & Styles\\n\\nTo add custom CSS, you can create a `styles.css` file in the Vocs root directory.\\nThis file will be automatically imported into the app.\\n\\n```\\nmy-project/             \\n├── docs/\\n│   ├── pages/ \\n|   |   ├── index.mdx \\n|   |   └── about.tsx \\n│   └── public/\\n│   |   └── favicon.ico\\n|   └── styles.css // [!code focus]\\n├── node_modules/\\n│   ...\\n```\\n\\nThe `styles.css` file could look like:\\n\\n```css [styles.css]\\nbody {\\n  background-color: #f3f3f3;\\n}\\n\\n.Vocs_H1 {\\n  color: red;\\n}\\n```\\n\\n:::tip[Tip]\\nYou can also utilize the [CSS `@import`](https://vitejs.dev/guide/features.html#import-inlining-and-rebasing) statement to import other CSS files.\\n:::\\n\\n#### Importing CSS into layout Component\\n\\nAlternatively, you can import CSS files directly into your [layout component](/docs/structure#layout-component).\\n\\n```tsx [layout.tsx]\\nimport './global.css' // [!code focus]\\nimport './theme.css' // [!code focus]\\n\\nexport default function Root({ children }) {\\n  return children\\n}\\n```\\n\\n#### Importing CSS into Markdown\\n\\nYou can also import CSS files directly into your Markdown files.\\n\\n```mdx [example.md]\\nimport './theme.css' // [!code focus]\\n\\n# Hello world\\n\\nThis is me.\\n```\\n\\n## Tailwind CSS\\n\\nVocs comes with built-in support for Tailwind CSS.\\n\\nAll you need to do is add a `tailwind.config.cjs` file to your root directory, as well as a `styles.css` file.\\n\\n::::steps\\n\\n### Add `tailwind.config.cjs` file\\n\\nAdd a `tailwind.config.cjs` configuration to your project root.\\n\\n```\\nmy-project/             \\n├── docs/\\n│   ├── pages/ \\n|   |   ├── index.mdx \\n|   |   └── about.tsx \\n│   └── public/\\n│       └── favicon.ico\\n├── node_modules/\\n├── tailwind.config.cjs // [!code ++]\\n│   ...\\n```\\n\\nWith the following content:\\n\\n```js [tailwind.config.cjs]\\n/** @type {import('tailwindcss').Config} */\\nmodule.exports = {\\n  content: ['./docs/**/*.{html,md,mdx,tsx,js,jsx}'],\\n  theme: {\\n    extend: {},\\n  },\\n  plugins: [],\\n}\\n```\\n\\n### Add `styles.css` file\\n\\nThen add a `styles.css` file, and import the Tailwind CSS.\\n\\n```\\nmy-project/             \\n├── docs/\\n│   ├── pages/ \\n|   |   ├── index.mdx \\n|   |   └── about.tsx \\n│   └── public/\\n│   |   └── favicon.ico\\n|   └── styles.css // [!code ++]\\n├── node_modules/\\n├── tailwind.config.cjs\\n│   ...\\n```\\n\\n```css [styles.css]\\n@layer vocs_preflight { @tailwind base; }\\n@tailwind components;\\n@tailwind utilities;\\n```\\n\\n### Add some Tailwind CSS\\n\\nNow you can use Tailwind CSS in any of your Markdown files or React components.\\n\\n```mdx [example.md]\\n# Hello world\\n\\nThis is me.\\n\\n<p className=\\\"text-4xl text-red\\\">With some Tailwind CSS</p>\\n```\\n\\n::::\",\"document\":[{\"href\":\"/docs/guides/styling#styling\",\"html\":\"</header>\\n\",\"id\":\"site/pages/docs/guides/styling.mdx#styling\",\"isPage\":true,\"text\":\"\\n\",\"title\":\"Styling\",\"titles\":[]},{\"href\":\"/docs/guides/styling#custom-css--styles\",\"html\":\"\\n<p>To add custom CSS, you can create a <code>styles.css</code> file in the Vocs root directory.\\nThis file will be automatically imported into the app.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span>my-project/             </span></span>\\n<span class=\\\"line\\\"><span>├── docs/</span></span>\\n<span class=\\\"line\\\"><span>│   ├── pages/ </span></span>\\n<span class=\\\"line\\\"><span>|   |   ├── index.mdx </span></span>\\n<span class=\\\"line\\\"><span>|   |   └── about.tsx </span></span>\\n<span class=\\\"line\\\"><span>│   └── public/</span></span>\\n<span class=\\\"line\\\"><span>│   |   └── favicon.ico</span></span>\\n<span class=\\\"line focused\\\"><span>|   └── styles.css</span></span>\\n<span class=\\\"line\\\"><span>├── node_modules/</span></span>\\n<span class=\\\"line\\\"><span>│   ...</span></span></code></pre>\\n<p>The <code>styles.css</code> file could look like:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"styles.css\\\" data-lang=\\\"css\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">body</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">  background-color</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">#f3f3f3</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">.Vocs_H1</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">  color</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">red</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n<aside data-callout=\\\"tip\\\"><strong data-callout-title=\\\"true\\\">Tip</strong><p>You can also utilize the <a href=\\\"https://vitejs.dev/guide/features.html#import-inlining-and-rebasing\\\">CSS <code>@import</code></a> statement to import other CSS files.</p></aside>\\n\",\"id\":\"site/pages/docs/guides/styling.mdx#custom-css--styles\",\"isPage\":false,\"text\":\"\\nTo add custom CSS, you can create a styles.css file in the Vocs root directory.\\nThis file will be automatically imported into the app.\\nmy-project/             \\n├── docs/\\n│   ├── pages/ \\n|   |   ├── index.mdx \\n|   |   └── about.tsx \\n│   └── public/\\n│   |   └── favicon.ico\\n|   └── styles.css\\n├── node_modules/\\n│   ...\\nThe styles.css file could look like:\\nbody {\\n  background-color: #f3f3f3;\\n}\\n \\n.Vocs_H1 {\\n  color: red;\\n}\\nTipYou can also utilize the CSS @import statement to import other CSS files.\\n\",\"title\":\"Custom CSS &amp; Styles\",\"titles\":[\"Styling\"]},{\"href\":\"/docs/guides/styling#importing-css-into-layout-component\",\"html\":\"\\n<p>Alternatively, you can import CSS files directly into your <a href=\\\"/docs/structure#layout-component\\\">layout component</a>.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"layout.tsx\\\" data-lang=\\\"tsx\\\"><code><span class=\\\"line focused\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;./global.css&#x27;</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;./theme.css&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> function</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> Root</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({ </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">children</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\"> }) </span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">  return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> children</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/guides/styling.mdx#importing-css-into-layout-component\",\"isPage\":false,\"text\":\"\\nAlternatively, you can import CSS files directly into your layout component.\\nimport &#x27;./global.css&#x27;\\nimport &#x27;./theme.css&#x27;\\n \\nexport default function Root({ children }) {\\n  return children\\n}\\n\",\"title\":\"Importing CSS into layout Component\",\"titles\":[\"Styling\",\"Custom CSS &amp; Styles\",null]},{\"href\":\"/docs/guides/styling#importing-css-into-markdown\",\"html\":\"\\n<p>You can also import CSS files directly into your Markdown files.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"example.md\\\" data-lang=\\\"mdx\\\"><code><span class=\\\"line focused\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;./theme.css&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"># Hello world</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">This is me.</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/guides/styling.mdx#importing-css-into-markdown\",\"isPage\":false,\"text\":\"\\nYou can also import CSS files directly into your Markdown files.\\nimport &#x27;./theme.css&#x27;\\n \\n# Hello world\\n \\nThis is me.\\n\",\"title\":\"Importing CSS into Markdown\",\"titles\":[\"Styling\",\"Custom CSS &amp; Styles\",null]},{\"href\":\"/docs/guides/styling#tailwind-css\",\"html\":\"\\n<p>Vocs comes with built-in support for Tailwind CSS.</p>\\n<p>All you need to do is add a <code>tailwind.config.cjs</code> file to your root directory, as well as a <code>styles.css</code> file.</p>\\n<div data-vocs-steps=\\\"true\\\"><div data-depth=\\\"3\\\">\",\"id\":\"site/pages/docs/guides/styling.mdx#tailwind-css\",\"isPage\":false,\"text\":\"\\nVocs comes with built-in support for Tailwind CSS.\\nAll you need to do is add a tailwind.config.cjs file to your root directory, as well as a styles.css file.\\n\",\"title\":\"Tailwind CSS\",\"titles\":[\"Styling\"]},{\"href\":\"/docs/guides/styling#add-tailwindconfigcjs-file\",\"html\":\"<p>Add a <code>tailwind.config.cjs</code> configuration to your project root.</p><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-diff\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span>my-project/             </span></span>\\n<span class=\\\"line\\\"><span>├── docs/</span></span>\\n<span class=\\\"line\\\"><span>│   ├── pages/ </span></span>\\n<span class=\\\"line\\\"><span>|   |   ├── index.mdx </span></span>\\n<span class=\\\"line\\\"><span>|   |   └── about.tsx </span></span>\\n<span class=\\\"line\\\"><span>│   └── public/</span></span>\\n<span class=\\\"line\\\"><span>│       └── favicon.ico</span></span>\\n<span class=\\\"line\\\"><span>├── node_modules/</span></span>\\n<span class=\\\"line diff add\\\"><span>├── tailwind.config.cjs</span></span>\\n<span class=\\\"line\\\"><span>│   ...</span></span></code></pre><p>With the following content:</p><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"tailwind.config.cjs\\\" data-lang=\\\"js\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">/** </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">@type</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> {import(&#x27;tailwindcss&#x27;).Config}</span><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\"> */</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">module</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">exports</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  content: [</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;./docs/**/*.{html,md,mdx,tsx,js,jsx}&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  theme: {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    extend: {},</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  plugins: [],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre></div><div data-depth=\\\"3\\\">\",\"id\":\"site/pages/docs/guides/styling.mdx#add-tailwindconfigcjs-file\",\"isPage\":false,\"text\":\"Add a tailwind.config.cjs configuration to your project root.my-project/             \\n├── docs/\\n│   ├── pages/ \\n|   |   ├── index.mdx \\n|   |   └── about.tsx \\n│   └── public/\\n│       └── favicon.ico\\n├── node_modules/\\n├── tailwind.config.cjs\\n│   ...With the following content:/** @type {import(&#x27;tailwindcss&#x27;).Config} */\\nmodule.exports = {\\n  content: [&#x27;./docs/**/*.{html,md,mdx,tsx,js,jsx}&#x27;],\\n  theme: {\\n    extend: {},\\n  },\\n  plugins: [],\\n}\",\"title\":\"Add tailwind.config.cjs file\",\"titles\":[\"Styling\",\"Tailwind CSS\"]},{\"href\":\"/docs/guides/styling#add-stylescss-file\",\"html\":\"<p>Then add a <code>styles.css</code> file, and import the Tailwind CSS.</p><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-diff\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span>my-project/             </span></span>\\n<span class=\\\"line\\\"><span>├── docs/</span></span>\\n<span class=\\\"line\\\"><span>│   ├── pages/ </span></span>\\n<span class=\\\"line\\\"><span>|   |   ├── index.mdx </span></span>\\n<span class=\\\"line\\\"><span>|   |   └── about.tsx </span></span>\\n<span class=\\\"line\\\"><span>│   └── public/</span></span>\\n<span class=\\\"line\\\"><span>│   |   └── favicon.ico</span></span>\\n<span class=\\\"line diff add\\\"><span>|   └── styles.css</span></span>\\n<span class=\\\"line\\\"><span>├── node_modules/</span></span>\\n<span class=\\\"line\\\"><span>├── tailwind.config.cjs</span></span>\\n<span class=\\\"line\\\"><span>│   ...</span></span></code></pre><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"styles.css\\\" data-lang=\\\"css\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">@layer</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> vocs_preflight { </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">@tailwind</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> base; }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">@tailwind</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> components;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">@tailwind</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> utilities;</span></span></code></pre></div><div data-depth=\\\"3\\\">\",\"id\":\"site/pages/docs/guides/styling.mdx#add-stylescss-file\",\"isPage\":false,\"text\":\"Then add a styles.css file, and import the Tailwind CSS.my-project/             \\n├── docs/\\n│   ├── pages/ \\n|   |   ├── index.mdx \\n|   |   └── about.tsx \\n│   └── public/\\n│   |   └── favicon.ico\\n|   └── styles.css\\n├── node_modules/\\n├── tailwind.config.cjs\\n│   ...@layer vocs_preflight { @tailwind base; }\\n@tailwind components;\\n@tailwind utilities;\",\"title\":\"Add styles.css file\",\"titles\":[\"Styling\",\"Tailwind CSS\"]},{\"href\":\"/docs/guides/styling#add-some-tailwind-css\",\"html\":\"<p>Now you can use Tailwind CSS in any of your Markdown files or React components.</p><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"example.md\\\" data-lang=\\\"mdx\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF;font-weight:bold;--shiki-dark-font-weight:bold\\\"># Hello world</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">This is me.</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">&lt;</span><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">p</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\"> className</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;text-4xl text-red&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">&gt;With some Tailwind CSS&lt;/</span><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">p</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">&gt;</span></span></code></pre></div></div>\",\"id\":\"site/pages/docs/guides/styling.mdx#add-some-tailwind-css\",\"isPage\":false,\"text\":\"Now you can use Tailwind CSS in any of your Markdown files or React components.# Hello world\\n \\nThis is me.\\n \\n&lt;p className=&quot;text-4xl text-red&quot;&gt;With some Tailwind CSS&lt;/p&gt;\",\"title\":\"Add some Tailwind CSS\",\"titles\":[\"Styling\",\"Tailwind CSS\"]}]}],[\"index.b55213deb5c056676a257e1bdc7dac4a6cf8ef33c14d5a7e51bda016130e7110\",{\"mdx\":\"# Sidebar & Top Navigation\\n\\nThe sidebar and top navigation are the main ways to navigate through the documentation. \\n\\nThe sidebar contains the main items to navigate between pages. \\nIt is always visible on larger desktop viewports, but for smaller viewports, the sidebar collapses into a hamburger menu.\\n\\nThe top navigation contains higher-level navigation for the documentation, as well as miscellaneous items (social, theme toggle, etc).\\nSuch higher-level navigation could include links to the main website, blog, examples, etc.\\n\\n## Configuration\\n\\nYou can configure the sidebar and top navigation via your `vocs.config.ts` file.\\n\\n### Sidebar\\n\\nThe `sidebar` property is an array of sidebar items. Each sidebar item can have the following properties:\\n\\n- `text`: The text to display for the sidebar item.\\n- `collapsed` (optional): Whether the sidebar item should be collapsed by default.\\n- `link` (optional): The link to navigate to.\\n- `items` (optional): The child sidebar items to display.\\n\\n```tsx [vocs.config.ts]\\nimport { defineConfig } from 'vocs'\\n\\nexport default defineConfig({\\n  sidebar: [ // [!code focus]\\n    { // [!code focus]\\n      text: 'Getting Started', // [!code focus]\\n      link: '/docs', // [!code focus]\\n    }, // [!code focus]\\n    { // [!code focus]\\n      text: 'API', // [!code focus]\\n      collapsed: true, // [!code focus]\\n      items: [ // [!code focus]\\n        { // [!code focus]\\n          text: 'Config', // [!code focus]\\n          link: '/docs/api/config', // [!code focus]\\n        }, // [!code focus]\\n      ], // [!code focus]\\n    } // [!code focus]\\n  ], // [!code focus]\\n  title: 'Viem'\\n})\\n```\\n\\n#### Contextual Sidebars\\n\\nYou can also show a different sidebar for each page. This is useful if you want to show a sidebar for a specific section of the documentation.\\n\\n```tsx [vocs.config.ts]\\nimport { defineConfig } from 'vocs'\\n\\nexport default defineConfig({\\n  sidebar: {\\n    '/docs/': [ // [!code focus]\\n      { \\n        text: 'Getting Started', \\n        link: '/docs', \\n      }, \\n      { \\n        text: 'API', \\n        collapsed: true, \\n        items: [ \\n          { \\n            text: 'Config', \\n            link: '/docs/api/config', \\n          }, \\n        ], \\n      } \\n    ], // [!code focus]\\n    '/examples/': [ // [!code focus]\\n      { text: 'React', link: '/examples/react' } \\n      { text: 'Vue', link: '/examples/vue' }\\n    ] // [!code focus]\\n  }\\n  title: 'Viem'\\n})\\n```\\n\\n### Top Navigation\\n\\nThe `topNav` property is an array of top navigation items. Each top navigation item can have the following properties:\\n\\n- `text`: The text to display for the top nav item.\\n- `link` (optional): The link to navigate to.\\n- `items` (optional): The child top nav items to display.\\n- `match` (optional): The path to match against. If the current path matches the `match` property, the top nav item will be highlighted.\\n\\n```tsx [vocs.config.ts]\\nimport { defineConfig } from 'vocs'\\n\\nexport default defineConfig({\\n  title: 'Viem',\\n  topNav: [ // [!code focus]\\n    { text: 'Guide & API', link: '/docs/getting-started', match: '/docs' }, // [!code focus]\\n    { text: 'Blog', link: '/blog' }, // [!code focus]\\n    { // [!code focus]\\n      text: version, // [!code focus]\\n      items: [ // [!code focus]\\n        { // [!code focus]\\n          text: 'Changelog', // [!code focus]\\n          link: 'https://github.com/wevm/vocs/blob/main/src/CHANGELOG.md', // [!code focus]\\n        }, // [!code focus]\\n        { // [!code focus]\\n          text: 'Contributing', // [!code focus]\\n          link: 'https://github.com/wevm/vocs/blob/main/.github/CONTRIBUTING.md', // [!code focus]\\n        }, // [!code focus]\\n      ], // [!code focus]\\n    }, // [!code focus]\\n  ], // [!code focus]\\n})\\n```\",\"document\":[{\"href\":\"/docs/guides/navigation#sidebar--top-navigation\",\"html\":\"</header>\\n<p>The sidebar and top navigation are the main ways to navigate through the documentation.</p>\\n<p>The sidebar contains the main items to navigate between pages.\\nIt is always visible on larger desktop viewports, but for smaller viewports, the sidebar collapses into a hamburger menu.</p>\\n<p>The top navigation contains higher-level navigation for the documentation, as well as miscellaneous items (social, theme toggle, etc).\\nSuch higher-level navigation could include links to the main website, blog, examples, etc.</p>\\n\",\"id\":\"site/pages/docs/guides/navigation.mdx#sidebar--top-navigation\",\"isPage\":true,\"text\":\"\\nThe sidebar and top navigation are the main ways to navigate through the documentation.\\nThe sidebar contains the main items to navigate between pages.\\nIt is always visible on larger desktop viewports, but for smaller viewports, the sidebar collapses into a hamburger menu.\\nThe top navigation contains higher-level navigation for the documentation, as well as miscellaneous items (social, theme toggle, etc).\\nSuch higher-level navigation could include links to the main website, blog, examples, etc.\\n\",\"title\":\"Sidebar &amp; Top Navigation\",\"titles\":[]},{\"href\":\"/docs/guides/navigation#configuration\",\"html\":\"\\n<p>You can configure the sidebar and top navigation via your <code>vocs.config.ts</code> file.</p>\\n\",\"id\":\"site/pages/docs/guides/navigation.mdx#configuration\",\"isPage\":false,\"text\":\"\\nYou can configure the sidebar and top navigation via your vocs.config.ts file.\\n\",\"title\":\"Configuration\",\"titles\":[\"Sidebar &amp; Top Navigation\"]},{\"href\":\"/docs/guides/navigation#sidebar\",\"html\":\"\\n<p>The <code>sidebar</code> property is an array of sidebar items. Each sidebar item can have the following properties:</p>\\n<ul>\\n<li><code>text</code>: The text to display for the sidebar item.</li>\\n<li><code>collapsed</code> (optional): Whether the sidebar item should be collapsed by default.</li>\\n<li><code>link</code> (optional): The link to navigate to.</li>\\n<li><code>items</code> (optional): The child sidebar items to display.</li>\\n</ul>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"vocs.config.ts\\\" data-lang=\\\"tsx\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  sidebar: [ </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      text: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Getting Started&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      link: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;/docs&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      text: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;API&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      collapsed: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">true</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      items: [ </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">          text: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Config&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">          link: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;/docs/api/config&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      ], </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    } </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  ]</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/guides/navigation.mdx#sidebar\",\"isPage\":false,\"text\":\"\\nThe sidebar property is an array of sidebar items. Each sidebar item can have the following properties:\\n\\ntext: The text to display for the sidebar item.\\ncollapsed (optional): Whether the sidebar item should be collapsed by default.\\nlink (optional): The link to navigate to.\\nitems (optional): The child sidebar items to display.\\n\\nimport { defineConfig } from &#x27;vocs&#x27;\\n \\nexport default defineConfig({\\n  sidebar: [ \\n    { \\n      text: &#x27;Getting Started&#x27;, \\n      link: &#x27;/docs&#x27;, \\n    }, \\n    { \\n      text: &#x27;API&#x27;, \\n      collapsed: true, \\n      items: [ \\n        { \\n          text: &#x27;Config&#x27;, \\n          link: &#x27;/docs/api/config&#x27;, \\n        }, \\n      ], \\n    } \\n  ], \\n  title: &#x27;Viem&#x27;\\n})\\n\",\"title\":\"Sidebar\",\"titles\":[\"Sidebar &amp; Top Navigation\",\"Configuration\"]},{\"href\":\"/docs/guides/navigation#contextual-sidebars\",\"html\":\"\\n<p>You can also show a different sidebar for each page. This is useful if you want to show a sidebar for a specific section of the documentation.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"vocs.config.ts\\\" data-lang=\\\"tsx\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  sidebar: {</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">    &#x27;/docs/&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: [ </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      { </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        text: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Getting Started&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        link: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;/docs&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      }, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      { </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        text: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;API&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        collapsed: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">true</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        items: [ </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">          { </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            text: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Config&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            link: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;/docs/api/config&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">          }, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        ], </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      } </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    ], </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">    &#x27;/examples/&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: [ </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      { text: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;React&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, link: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;/examples/react&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> } </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      { text: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Vue&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, link: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;/examples/vue&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> }</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    ] </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/guides/navigation.mdx#contextual-sidebars\",\"isPage\":false,\"text\":\"\\nYou can also show a different sidebar for each page. This is useful if you want to show a sidebar for a specific section of the documentation.\\nimport { defineConfig } from &#x27;vocs&#x27;\\n \\nexport default defineConfig({\\n  sidebar: {\\n    &#x27;/docs/&#x27;: [ \\n      { \\n        text: &#x27;Getting Started&#x27;, \\n        link: &#x27;/docs&#x27;, \\n      }, \\n      { \\n        text: &#x27;API&#x27;, \\n        collapsed: true, \\n        items: [ \\n          { \\n            text: &#x27;Config&#x27;, \\n            link: &#x27;/docs/api/config&#x27;, \\n          }, \\n        ], \\n      } \\n    ], \\n    &#x27;/examples/&#x27;: [ \\n      { text: &#x27;React&#x27;, link: &#x27;/examples/react&#x27; } \\n      { text: &#x27;Vue&#x27;, link: &#x27;/examples/vue&#x27; }\\n    ] \\n  }\\n  title: &#x27;Viem&#x27;\\n})\\n\",\"title\":\"Contextual Sidebars\",\"titles\":[\"Sidebar &amp; Top Navigation\",\"Configuration\",\"Sidebar\"]},{\"href\":\"/docs/guides/navigation#top-navigation\",\"html\":\"\\n<p>The <code>topNav</code> property is an array of top navigation items. Each top navigation item can have the following properties:</p>\\n<ul>\\n<li><code>text</code>: The text to display for the top nav item.</li>\\n<li><code>link</code> (optional): The link to navigate to.</li>\\n<li><code>items</code> (optional): The child top nav items to display.</li>\\n<li><code>match</code> (optional): The path to match against. If the current path matches the <code>match</code> property, the top nav item will be highlighted.</li>\\n</ul>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"vocs.config.ts\\\" data-lang=\\\"tsx\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">,</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  topNav: [ </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    { text: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Guide &amp; API&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, link: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;/docs/getting-started&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, match: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;/docs&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> }, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    { text: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Blog&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, link: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;/blog&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> }, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      text: version, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      items: [ </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">          text: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Changelog&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">          link: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;https://github.com/wevm/vocs/blob/main/src/CHANGELOG.md&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">          text: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Contributing&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">          link: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;https://github.com/wevm/vocs/blob/main/.github/CONTRIBUTING.md&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      ], </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  ]</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\",\"id\":\"site/pages/docs/guides/navigation.mdx#top-navigation\",\"isPage\":false,\"text\":\"\\nThe topNav property is an array of top navigation items. Each top navigation item can have the following properties:\\n\\ntext: The text to display for the top nav item.\\nlink (optional): The link to navigate to.\\nitems (optional): The child top nav items to display.\\nmatch (optional): The path to match against. If the current path matches the match property, the top nav item will be highlighted.\\n\\nimport { defineConfig } from &#x27;vocs&#x27;\\n \\nexport default defineConfig({\\n  title: &#x27;Viem&#x27;,\\n  topNav: [ \\n    { text: &#x27;Guide &amp; API&#x27;, link: &#x27;/docs/getting-started&#x27;, match: &#x27;/docs&#x27; }, \\n    { text: &#x27;Blog&#x27;, link: &#x27;/blog&#x27; }, \\n    { \\n      text: version, \\n      items: [ \\n        { \\n          text: &#x27;Changelog&#x27;, \\n          link: &#x27;https://github.com/wevm/vocs/blob/main/src/CHANGELOG.md&#x27;, \\n        }, \\n        { \\n          text: &#x27;Contributing&#x27;, \\n          link: &#x27;https://github.com/wevm/vocs/blob/main/.github/CONTRIBUTING.md&#x27;, \\n        }, \\n      ], \\n    }, \\n  ], \\n})\",\"title\":\"Top Navigation\",\"titles\":[\"Sidebar &amp; Top Navigation\",\"Configuration\"]}]}],[\"index.afd6b300d331fd8047257015974da5d66d89253363e09f8e94e5d89761edb49d\",{\"mdx\":\"# Theming \\n\\nTheming in Vocs is highly configurable. You can either theme your documentation via **CSS variables** through the [configuration (`vocs.config.ts`)](/docs/api/config), or via [CSS classes](#class-theming).\\n\\n## Configuration\\n\\nYou can modify the default accent color, color scheme, and other variables via the [`vocs.config.ts` file](/docs/api/config).\\n\\n### Accent Color\\n\\nThe accent color of your documentation can be modified via the `accentColor` property.\\n\\n```tsx [vocs.config.ts]\\nimport { defineConfig } from 'vocs'\\n\\nexport default defineConfig({\\n  theme: { \\n    accentColor: '#ff0000', // [!code focus]\\n  }, \\n  title: 'Viem'\\n})\\n```\\n\\n#### Light & Dark Accent Colors\\n\\nYou can also chose separate colors for light and dark mode.\\n\\n```tsx [vocs.config.ts]\\nimport { defineConfig } from 'vocs'\\n\\nexport default defineConfig({\\n  theme: { \\n    accentColor: { // [!code focus]\\n      light: 'black', // [!code focus]\\n      dark: 'white', // [!code focus]\\n    } // [!code focus]\\n  }, \\n  title: 'Viem'\\n})\\n```\\n\\n#### Engrained Accent Colors\\n\\nYou can even get more engrained control of the primitive accent colors.\\n\\n```tsx [vocs.config.ts]\\nimport { defineConfig } from 'vocs'\\n\\nexport default defineConfig({\\n  theme: { \\n    accentColor: {\\n      backgroundAccent: { light: 'white', dark: 'black' },\\n      backgroundAccentHover: { light: 'whitesmoke', dark: 'gray' },\\n      backgroundAccentText: { light: 'black', dark: 'white' },\\n      textAccent: { light: 'black', dark: 'white' },\\n    }\\n  }, \\n  title: 'Viem'\\n})\\n```\\n\\n### Color Scheme\\n\\nThe color scheme is the overall contextual \\\"color mode\\\" for your documentation. It can be\\neither a \\\"light mode\\\" or a \\\"dark mode\\\". By default, Vocs detects the system's preferred\\ncolor scheme, and adapts to that.\\n\\nYou can specify and force a color scheme for your documentation. If a `colorScheme` property\\nis specified, Vocs will always use that, regardless of the system's preferred\\ncolor scheme.\\n\\n```ts [vocs.config.ts]\\nexport default defineConfig({\\n  theme: { \\n    colorScheme: 'dark' // [!code focus]\\n  }, \\n  title: 'Viem'\\n})\\n```\\n\\n### Variables\\n\\nYou can also modify any of the CSS variables used in Vocs. This is useful if you want to\\nhave more control over the styling of your documentation.\\n\\n```tsx [vocs.config.ts]\\nimport { defineConfig } from 'vocs'\\n\\nexport default defineConfig({\\n  theme: { \\n    variables: { // [!code focus]\\n      color: { // [!code focus]\\n        background: { // [!code focus]\\n          light: 'white', // [!code focus]\\n          dark: 'black' // [!code focus]\\n        } // [!code focus]\\n      }, // [!code focus]\\n      content: { // [!code focus]\\n        horizontalPadding: '40px', // [!code focus]\\n        verticalPadding: '80px' // [!code focus]\\n      } // [!code focus]\\n    } // [!code focus]\\n  }, \\n  title: 'Viem'\\n})\\n```\\n\\n::::note\\n:::details[Theme Reference]\\n```ts\\ntype Theme = {\\n  accentColor?: string\\n  colorScheme?: 'dark' | 'light' | 'system'\\n  variables?: {\\n    borderRadius?: {\\n      '0': string,\\n      '2': string,\\n      '4': string,\\n      '8': string,\\n    },\\n    color?: {\\n      white: { light: string, dark: string },\\n      black: { light: string, dark: string },\\n      background: { light: string, dark: string },\\n      background2: { light: string, dark: string },\\n      background3: { light: string, dark: string },\\n      background4: { light: string, dark: string },\\n      background5: { light: string, dark: string },\\n      backgroundAccent: { light: string, dark: string },\\n      backgroundAccentHover: { light: string, dark: string },\\n      backgroundAccentText: { light: string, dark: string },\\n      backgroundBlueTint: { light: string, dark: string },\\n      backgroundDark: { light: string, dark: string },\\n      backgroundGreenTint: { light: string, dark: string },\\n      backgroundGreenTint2: { light: string, dark: string },\\n      backgroundIrisTint: { light: string, dark: string },\\n      backgroundRedTint: { light: string, dark: string },\\n      backgroundRedTint2: { light: string, dark: string },\\n      backgroundYellowTint: { light: string, dark: string },\\n      border: { light: string, dark: string },\\n      border2: { light: string, dark: string },\\n      borderAccent: { light: string, dark: string },\\n      borderBlue: { light: string, dark: string },\\n      borderGreen: { light: string, dark: string },\\n      borderIris: { light: string, dark: string },\\n      borderRed: { light: string, dark: string },\\n      borderYellow: { light: string, dark: string },\\n      heading: { light: string, dark: string },\\n      shadow: { light: string, dark: string },\\n      text: { light: string, dark: string },\\n      text2: { light: string, dark: string },\\n      text3: { light: string, dark: string },\\n      text4: { light: string, dark: string },\\n      textAccent: { light: string, dark: string },\\n      textAccentHover: { light: string, dark: string },\\n      textBlue: { light: string, dark: string },\\n      textBlueHover: { light: string, dark: string },\\n      textGreen: { light: string, dark: string },\\n      textGreenHover: { light: string, dark: string },\\n      textIris: { light: string, dark: string },\\n      textIrisHover: { light: string, dark: string },\\n      textRed: { light: string, dark: string },\\n      textRedHover: { light: string, dark: string },\\n      textYellow: { light: string, dark: string },\\n      textYellowHover: { light: string, dark: string },\\n\\n      blockquoteBorder: { light: string, dark: string },\\n      blockquoteText: { light: string, dark: string },\\n      codeBlockBackground: { light: string, dark: string },\\n      codeCharacterHighlightBackground: { light: string, dark: string },\\n      codeHighlightBackground: { light: string, dark: string },\\n      codeHighlightBorder: { light: string, dark: string },\\n      codeInlineBackground: { light: string, dark: string },\\n      codeInlineBorder: { light: string, dark: string },\\n      codeInlineText: { light: string, dark: string },\\n      codeTitleBackground: { light: string, dark: string },\\n      dangerBackground: { light: string, dark: string },\\n      dangerBorder: { light: string, dark: string },\\n      dangerText: { light: string, dark: string },\\n      dangerTextHover: { light: string, dark: string },\\n      hr: { light: string, dark: string },\\n      infoBackground: { light: string, dark: string },\\n      infoBorder: { light: string, dark: string },\\n      infoText: { light: string, dark: string },\\n      infoTextHover: { light: string, dark: string },\\n      lineNumber: { light: string, dark: string },\\n      link: { light: string, dark: string },\\n      linkHover: { light: string, dark: string },\\n      noteBackground: { light: string, dark: string },\\n      noteBorder: { light: string, dark: string },\\n      noteText: { light: string, dark: string },\\n      successBackground: { light: string, dark: string },\\n      successBorder: { light: string, dark: string },\\n      successText: { light: string, dark: string },\\n      successTextHover: { light: string, dark: string },\\n      tableBorder: { light: string, dark: string },\\n      tableHeaderBackground: { light: string, dark: string },\\n      tableHeaderText: { light: string, dark: string },\\n      tipBackground: { light: string, dark: string },\\n      tipBorder: { light: string, dark: string },\\n      tipText: { light: string, dark: string },\\n      tipTextHover: { light: string, dark: string },\\n      warningBackground: { light: string, dark: string },\\n      warningBorder: { light: string, dark: string },\\n      warningText: { light: string, dark: string },\\n      warningTextHover: { light: string, dark: string },\\n    },\\n    content: {\\n      horizontalPadding: string,\\n      verticalPadding: string,\\n      width: string,\\n    },\\n    fontFamily: {\\n      default: string,\\n      mono: string,\\n    },\\n    fontSize: {\\n      root: string,\\n      '9': string,\\n      '11': string,\\n      '12': string,\\n      '13': string,\\n      '14': string,\\n      '15': string,\\n      '16': string,\\n      '18': string,\\n      '20': string,\\n      '24': string,\\n      '32': string,\\n      h1: string,\\n      h2: string,\\n      h3: string,\\n      h4: string,\\n      h5: string,\\n      h6: string,\\n      code: string,\\n      codeBlock: string,\\n      lineNumber: string,\\n      subtitle: string,\\n      th: string,\\n      td: string,\\n    },\\n    fontWeight: {\\n      regular: string,\\n      medium: string,\\n      semibold: string,\\n    },\\n    lineHeight: {\\n      code: string,\\n      heading: string,\\n      listItem: string,\\n      outlineItem: string,\\n      paragraph: string,\\n    },\\n    space: {\\n      '0': string,\\n      '1': string,\\n      '2': string,\\n      '3': string,\\n      '4': string,\\n      '6': string,\\n      '8': string,\\n      '12': string,\\n      '14': string,\\n      '16': string,\\n      '18': string,\\n      '20': string,\\n      '22': string,\\n      '24': string,\\n      '28': string,\\n      '32': string,\\n      '40': string,\\n      '44': string,\\n      '48': string,\\n      '56': string,\\n      '64': string,\\n      '72': string,\\n      '80': string,\\n    }\\n  }\\n}\\n```\\n:::\\n::::\\n\\n## Class Theming\\n\\nEvery element in Vocs is designed to be customized via CSS classes. You can\\noverride any of the default styles by modifying the `.Vocs_{element}` class. If you inspect\\nyour documentation's HTML, you can see the classes that are applied to each element, and it is\\njust a matter of overriding those classes in your own CSS.\\n\\nFor example, if you want to change the color of the `h1` headings in your documentation, you can\\noverride the `.Vocs_H1` class.\\n\\n```css [styles.css]\\n.Vocs_H1 {\\n  color: red;\\n}\\n```\\n\\n:::tip[Tip]\\nIf you create a `styles.css` file in your Vocs project root, it will be automatically imported into\\nyour documentation. This is a great place to put your custom CSS. [Read more](/docs/structure#global-styles)\\n:::\",\"document\":[{\"href\":\"/docs/guides/theming#theming\",\"html\":\"</header>\\n<p>Theming in Vocs is highly configurable. You can either theme your documentation via <strong>CSS variables</strong> through the <a href=\\\"/docs/api/config\\\">configuration (<code>vocs.config.ts</code>)</a>, or via <a href=\\\"#class-theming\\\">CSS classes</a>.</p>\\n\",\"id\":\"site/pages/docs/guides/theming.mdx#theming\",\"isPage\":true,\"text\":\"\\nTheming in Vocs is highly configurable. You can either theme your documentation via CSS variables through the configuration (vocs.config.ts), or via CSS classes.\\n\",\"title\":\"Theming\",\"titles\":[]},{\"href\":\"/docs/guides/theming#configuration\",\"html\":\"\\n<p>You can modify the default accent color, color scheme, and other variables via the <a href=\\\"/docs/api/config\\\"><code>vocs.config.ts</code> file</a>.</p>\\n\",\"id\":\"site/pages/docs/guides/theming.mdx#configuration\",\"isPage\":false,\"text\":\"\\nYou can modify the default accent color, color scheme, and other variables via the vocs.config.ts file.\\n\",\"title\":\"Configuration\",\"titles\":[\"Theming\"]},{\"href\":\"/docs/guides/theming#accent-color\",\"html\":\"\\n<p>The accent color of your documentation can be modified via the <code>accentColor</code> property.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"vocs.config.ts\\\" data-lang=\\\"tsx\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  theme: { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    accentColor: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;#ff0000&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  }</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/guides/theming.mdx#accent-color\",\"isPage\":false,\"text\":\"\\nThe accent color of your documentation can be modified via the accentColor property.\\nimport { defineConfig } from &#x27;vocs&#x27;\\n \\nexport default defineConfig({\\n  theme: { \\n    accentColor: &#x27;#ff0000&#x27;, \\n  }, \\n  title: &#x27;Viem&#x27;\\n})\\n\",\"title\":\"Accent Color\",\"titles\":[\"Theming\",\"Configuration\"]},{\"href\":\"/docs/guides/theming#light--dark-accent-colors\",\"html\":\"\\n<p>You can also chose separate colors for light and dark mode.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"vocs.config.ts\\\" data-lang=\\\"tsx\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  theme: { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    accentColor: { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      light: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;black&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      dark: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;white&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    } </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  }</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/guides/theming.mdx#light--dark-accent-colors\",\"isPage\":false,\"text\":\"\\nYou can also chose separate colors for light and dark mode.\\nimport { defineConfig } from &#x27;vocs&#x27;\\n \\nexport default defineConfig({\\n  theme: { \\n    accentColor: { \\n      light: &#x27;black&#x27;, \\n      dark: &#x27;white&#x27;, \\n    } \\n  }, \\n  title: &#x27;Viem&#x27;\\n})\\n\",\"title\":\"Light &amp; Dark Accent Colors\",\"titles\":[\"Theming\",\"Configuration\",\"Accent Color\"]},{\"href\":\"/docs/guides/theming#engrained-accent-colors\",\"html\":\"\\n<p>You can even get more engrained control of the primitive accent colors.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"vocs.config.ts\\\" data-lang=\\\"tsx\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  theme: { </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    accentColor: {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      backgroundAccent: { light: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;white&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, dark: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;black&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      backgroundAccentHover: { light: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;whitesmoke&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, dark: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;gray&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      backgroundAccentText: { light: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;black&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, dark: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;white&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      textAccent: { light: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;black&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, dark: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;white&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  }</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/guides/theming.mdx#engrained-accent-colors\",\"isPage\":false,\"text\":\"\\nYou can even get more engrained control of the primitive accent colors.\\nimport { defineConfig } from &#x27;vocs&#x27;\\n \\nexport default defineConfig({\\n  theme: { \\n    accentColor: {\\n      backgroundAccent: { light: &#x27;white&#x27;, dark: &#x27;black&#x27; },\\n      backgroundAccentHover: { light: &#x27;whitesmoke&#x27;, dark: &#x27;gray&#x27; },\\n      backgroundAccentText: { light: &#x27;black&#x27;, dark: &#x27;white&#x27; },\\n      textAccent: { light: &#x27;black&#x27;, dark: &#x27;white&#x27; },\\n    }\\n  }, \\n  title: &#x27;Viem&#x27;\\n})\\n\",\"title\":\"Engrained Accent Colors\",\"titles\":[\"Theming\",\"Configuration\",\"Accent Color\"]},{\"href\":\"/docs/guides/theming#color-scheme\",\"html\":\"\\n<p>The color scheme is the overall contextual &quot;color mode&quot; for your documentation. It can be\\neither a &quot;light mode&quot; or a &quot;dark mode&quot;. By default, Vocs detects the system&#x27;s preferred\\ncolor scheme, and adapts to that.</p>\\n<p>You can specify and force a color scheme for your documentation. If a <code>colorScheme</code> property\\nis specified, Vocs will always use that, regardless of the system&#x27;s preferred\\ncolor scheme.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"vocs.config.ts\\\" data-lang=\\\"ts\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  theme: { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    colorScheme: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;dark&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  }</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/guides/theming.mdx#color-scheme\",\"isPage\":false,\"text\":\"\\nThe color scheme is the overall contextual &quot;color mode&quot; for your documentation. It can be\\neither a &quot;light mode&quot; or a &quot;dark mode&quot;. By default, Vocs detects the system&#x27;s preferred\\ncolor scheme, and adapts to that.\\nYou can specify and force a color scheme for your documentation. If a colorScheme property\\nis specified, Vocs will always use that, regardless of the system&#x27;s preferred\\ncolor scheme.\\nexport default defineConfig({\\n  theme: { \\n    colorScheme: &#x27;dark&#x27;\\n  }, \\n  title: &#x27;Viem&#x27;\\n})\\n\",\"title\":\"Color Scheme\",\"titles\":[\"Theming\",\"Configuration\"]},{\"href\":\"/docs/guides/theming#variables\",\"html\":\"\\n<p>You can also modify any of the CSS variables used in Vocs. This is useful if you want to\\nhave more control over the styling of your documentation.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"vocs.config.ts\\\" data-lang=\\\"tsx\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  theme: { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    variables: { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      color: { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        background: { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">          light: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;white&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">          dark: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;black&#x27;</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        } </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      }, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      content: { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        horizontalPadding: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;40px&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        verticalPadding: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;80px&#x27;</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      } </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    } </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  }</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\\n<aside data-callout=\\\"note\\\"><details><summary>Theme Reference</summary><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">type</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> Theme</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">  accentColor</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">?:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">  colorScheme</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">?:</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;dark&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> |</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;light&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> |</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;system&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">  variables</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">?:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">    borderRadius</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">?:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;0&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;2&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;4&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;8&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">    color</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">?:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      white</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      black</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      background</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      background2</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      background3</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      background4</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      background5</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      backgroundAccent</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      backgroundAccentHover</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      backgroundAccentText</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      backgroundBlueTint</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      backgroundDark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      backgroundGreenTint</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      backgroundGreenTint2</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      backgroundIrisTint</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      backgroundRedTint</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      backgroundRedTint2</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      backgroundYellowTint</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      border</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      border2</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      borderAccent</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      borderBlue</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      borderGreen</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      borderIris</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      borderRed</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      borderYellow</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      heading</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      shadow</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      text</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      text2</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      text3</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      text4</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      textAccent</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      textAccentHover</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      textBlue</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      textBlueHover</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      textGreen</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      textGreenHover</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      textIris</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      textIrisHover</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      textRed</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      textRedHover</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      textYellow</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      textYellowHover</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      blockquoteBorder</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      blockquoteText</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      codeBlockBackground</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      codeCharacterHighlightBackground</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      codeHighlightBackground</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      codeHighlightBorder</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      codeInlineBackground</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      codeInlineBorder</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      codeInlineText</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      codeTitleBackground</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      dangerBackground</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      dangerBorder</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      dangerText</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      dangerTextHover</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      hr</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      infoBackground</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      infoBorder</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      infoText</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      infoTextHover</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      lineNumber</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      link</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      linkHover</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      noteBackground</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      noteBorder</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      noteText</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      successBackground</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      successBorder</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      successText</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      successTextHover</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      tableBorder</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      tableHeaderBackground</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      tableHeaderText</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      tipBackground</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      tipBorder</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      tipText</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      tipTextHover</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      warningBackground</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      warningBorder</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      warningText</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      warningTextHover</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">light</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">dark</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">    content</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      horizontalPadding</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      verticalPadding</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      width</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">    fontFamily</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      default</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      mono</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">    fontSize</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      root</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;9&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;11&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;12&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;13&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;14&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;15&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;16&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;18&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;20&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;24&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;32&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      h1</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      h2</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      h3</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      h4</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      h5</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      h6</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      code</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      codeBlock</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      lineNumber</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      subtitle</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      th</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      td</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">    fontWeight</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      regular</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      medium</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      semibold</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">    lineHeight</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      code</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      heading</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      listItem</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      outlineItem</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">      paragraph</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">    space</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;0&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;1&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;2&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;3&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;4&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;6&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;8&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;12&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;14&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;16&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;18&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;20&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;22&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;24&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;28&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;32&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;40&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;44&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;48&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;56&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;64&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;72&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;80&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre></details></aside>\\n\",\"id\":\"site/pages/docs/guides/theming.mdx#variables\",\"isPage\":false,\"text\":\"\\nYou can also modify any of the CSS variables used in Vocs. This is useful if you want to\\nhave more control over the styling of your documentation.\\nimport { defineConfig } from &#x27;vocs&#x27;\\n \\nexport default defineConfig({\\n  theme: { \\n    variables: { \\n      color: { \\n        background: { \\n          light: &#x27;white&#x27;, \\n          dark: &#x27;black&#x27;\\n        } \\n      }, \\n      content: { \\n        horizontalPadding: &#x27;40px&#x27;, \\n        verticalPadding: &#x27;80px&#x27;\\n      } \\n    } \\n  }, \\n  title: &#x27;Viem&#x27;\\n})\\nTheme Referencetype Theme = {\\n  accentColor?: string\\n  colorScheme?: &#x27;dark&#x27; | &#x27;light&#x27; | &#x27;system&#x27;\\n  variables?: {\\n    borderRadius?: {\\n      &#x27;0&#x27;: string,\\n      &#x27;2&#x27;: string,\\n      &#x27;4&#x27;: string,\\n      &#x27;8&#x27;: string,\\n    },\\n    color?: {\\n      white: { light: string, dark: string },\\n      black: { light: string, dark: string },\\n      background: { light: string, dark: string },\\n      background2: { light: string, dark: string },\\n      background3: { light: string, dark: string },\\n      background4: { light: string, dark: string },\\n      background5: { light: string, dark: string },\\n      backgroundAccent: { light: string, dark: string },\\n      backgroundAccentHover: { light: string, dark: string },\\n      backgroundAccentText: { light: string, dark: string },\\n      backgroundBlueTint: { light: string, dark: string },\\n      backgroundDark: { light: string, dark: string },\\n      backgroundGreenTint: { light: string, dark: string },\\n      backgroundGreenTint2: { light: string, dark: string },\\n      backgroundIrisTint: { light: string, dark: string },\\n      backgroundRedTint: { light: string, dark: string },\\n      backgroundRedTint2: { light: string, dark: string },\\n      backgroundYellowTint: { light: string, dark: string },\\n      border: { light: string, dark: string },\\n      border2: { light: string, dark: string },\\n      borderAccent: { light: string, dark: string },\\n      borderBlue: { light: string, dark: string },\\n      borderGreen: { light: string, dark: string },\\n      borderIris: { light: string, dark: string },\\n      borderRed: { light: string, dark: string },\\n      borderYellow: { light: string, dark: string },\\n      heading: { light: string, dark: string },\\n      shadow: { light: string, dark: string },\\n      text: { light: string, dark: string },\\n      text2: { light: string, dark: string },\\n      text3: { light: string, dark: string },\\n      text4: { light: string, dark: string },\\n      textAccent: { light: string, dark: string },\\n      textAccentHover: { light: string, dark: string },\\n      textBlue: { light: string, dark: string },\\n      textBlueHover: { light: string, dark: string },\\n      textGreen: { light: string, dark: string },\\n      textGreenHover: { light: string, dark: string },\\n      textIris: { light: string, dark: string },\\n      textIrisHover: { light: string, dark: string },\\n      textRed: { light: string, dark: string },\\n      textRedHover: { light: string, dark: string },\\n      textYellow: { light: string, dark: string },\\n      textYellowHover: { light: string, dark: string },\\n \\n      blockquoteBorder: { light: string, dark: string },\\n      blockquoteText: { light: string, dark: string },\\n      codeBlockBackground: { light: string, dark: string },\\n      codeCharacterHighlightBackground: { light: string, dark: string },\\n      codeHighlightBackground: { light: string, dark: string },\\n      codeHighlightBorder: { light: string, dark: string },\\n      codeInlineBackground: { light: string, dark: string },\\n      codeInlineBorder: { light: string, dark: string },\\n      codeInlineText: { light: string, dark: string },\\n      codeTitleBackground: { light: string, dark: string },\\n      dangerBackground: { light: string, dark: string },\\n      dangerBorder: { light: string, dark: string },\\n      dangerText: { light: string, dark: string },\\n      dangerTextHover: { light: string, dark: string },\\n      hr: { light: string, dark: string },\\n      infoBackground: { light: string, dark: string },\\n      infoBorder: { light: string, dark: string },\\n      infoText: { light: string, dark: string },\\n      infoTextHover: { light: string, dark: string },\\n      lineNumber: { light: string, dark: string },\\n      link: { light: string, dark: string },\\n      linkHover: { light: string, dark: string },\\n      noteBackground: { light: string, dark: string },\\n      noteBorder: { light: string, dark: string },\\n      noteText: { light: string, dark: string },\\n      successBackground: { light: string, dark: string },\\n      successBorder: { light: string, dark: string },\\n      successText: { light: string, dark: string },\\n      successTextHover: { light: string, dark: string },\\n      tableBorder: { light: string, dark: string },\\n      tableHeaderBackground: { light: string, dark: string },\\n      tableHeaderText: { light: string, dark: string },\\n      tipBackground: { light: string, dark: string },\\n      tipBorder: { light: string, dark: string },\\n      tipText: { light: string, dark: string },\\n      tipTextHover: { light: string, dark: string },\\n      warningBackground: { light: string, dark: string },\\n      warningBorder: { light: string, dark: string },\\n      warningText: { light: string, dark: string },\\n      warningTextHover: { light: string, dark: string },\\n    },\\n    content: {\\n      horizontalPadding: string,\\n      verticalPadding: string,\\n      width: string,\\n    },\\n    fontFamily: {\\n      default: string,\\n      mono: string,\\n    },\\n    fontSize: {\\n      root: string,\\n      &#x27;9&#x27;: string,\\n      &#x27;11&#x27;: string,\\n      &#x27;12&#x27;: string,\\n      &#x27;13&#x27;: string,\\n      &#x27;14&#x27;: string,\\n      &#x27;15&#x27;: string,\\n      &#x27;16&#x27;: string,\\n      &#x27;18&#x27;: string,\\n      &#x27;20&#x27;: string,\\n      &#x27;24&#x27;: string,\\n      &#x27;32&#x27;: string,\\n      h1: string,\\n      h2: string,\\n      h3: string,\\n      h4: string,\\n      h5: string,\\n      h6: string,\\n      code: string,\\n      codeBlock: string,\\n      lineNumber: string,\\n      subtitle: string,\\n      th: string,\\n      td: string,\\n    },\\n    fontWeight: {\\n      regular: string,\\n      medium: string,\\n      semibold: string,\\n    },\\n    lineHeight: {\\n      code: string,\\n      heading: string,\\n      listItem: string,\\n      outlineItem: string,\\n      paragraph: string,\\n    },\\n    space: {\\n      &#x27;0&#x27;: string,\\n      &#x27;1&#x27;: string,\\n      &#x27;2&#x27;: string,\\n      &#x27;3&#x27;: string,\\n      &#x27;4&#x27;: string,\\n      &#x27;6&#x27;: string,\\n      &#x27;8&#x27;: string,\\n      &#x27;12&#x27;: string,\\n      &#x27;14&#x27;: string,\\n      &#x27;16&#x27;: string,\\n      &#x27;18&#x27;: string,\\n      &#x27;20&#x27;: string,\\n      &#x27;22&#x27;: string,\\n      &#x27;24&#x27;: string,\\n      &#x27;28&#x27;: string,\\n      &#x27;32&#x27;: string,\\n      &#x27;40&#x27;: string,\\n      &#x27;44&#x27;: string,\\n      &#x27;48&#x27;: string,\\n      &#x27;56&#x27;: string,\\n      &#x27;64&#x27;: string,\\n      &#x27;72&#x27;: string,\\n      &#x27;80&#x27;: string,\\n    }\\n  }\\n}\\n\",\"title\":\"Variables\",\"titles\":[\"Theming\",\"Configuration\"]},{\"href\":\"/docs/guides/theming#class-theming\",\"html\":\"\\n<p>Every element in Vocs is designed to be customized via CSS classes. You can\\noverride any of the default styles by modifying the <code>.Vocs_{element}</code> class. If you inspect\\nyour documentation&#x27;s HTML, you can see the classes that are applied to each element, and it is\\njust a matter of overriding those classes in your own CSS.</p>\\n<p>For example, if you want to change the color of the <code>h1</code> headings in your documentation, you can\\noverride the <code>.Vocs_H1</code> class.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"styles.css\\\" data-lang=\\\"css\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">.Vocs_H1</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">  color</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">red</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n<aside data-callout=\\\"tip\\\"><strong data-callout-title=\\\"true\\\">Tip</strong><p>If you create a <code>styles.css</code> file in your Vocs project root, it will be automatically imported into\\nyour documentation. This is a great place to put your custom CSS. <a href=\\\"/docs/structure#global-styles\\\">Read more</a></p></aside>\",\"id\":\"site/pages/docs/guides/theming.mdx#class-theming\",\"isPage\":false,\"text\":\"\\nEvery element in Vocs is designed to be customized via CSS classes. You can\\noverride any of the default styles by modifying the .Vocs_{element} class. If you inspect\\nyour documentation&#x27;s HTML, you can see the classes that are applied to each element, and it is\\njust a matter of overriding those classes in your own CSS.\\nFor example, if you want to change the color of the h1 headings in your documentation, you can\\noverride the .Vocs_H1 class.\\n.Vocs_H1 {\\n  color: red;\\n}\\nTipIf you create a styles.css file in your Vocs project root, it will be automatically imported into\\nyour documentation. This is a great place to put your custom CSS. Read more\",\"title\":\"Class Theming\",\"titles\":[\"Theming\"]}]}],[\"index.0189c1fb5de2e8227fe310c80ffa323cae0c1f4003ae538ba6d82864033f34cd\",{\"mdx\":\"# Blog\\n\\nBelow are the steps to set up a blog using Vocs.\\n\\n::::steps\\n\\n## Set up a post list page\\n\\nFirst, create a new directory called `blog/`, and inside of it, create an index page (`index.mdx`).\\n\\n```\\nmy-project/             \\n├── docs/\\n│   ├── pages/\\n│   │   └── blog/ // [!code ++] // [!code focus]\\n|   |       └── index.mdx // [!code ++] // [!code focus]\\n│   └── public/\\n│       └── favicon.ico \\n├── node_modules/\\n│   ...\\n```\\n\\nInside of `index.mdx`, add the following code:\\n\\n```md [blog/index.mdx]\\n---\\nlayout: minimal\\n---\\n\\n# Blog\\n\\n::blog-posts\\n```\\n\\n:::tip[Tip]\\nThe `\\\"::\\\"` syntax refers to the [Directives Syntax Proposal](https://talk.commonmark.org/t/generic-directives-plugins-syntax/444).\\n:::\\n\\nYou have now created a blog post list page. The `::blog-posts` component will automatically generate a list of all blog posts in the `blog/` directory.\\n\\n## Write a blog post\\n\\nNow, create a new post in your `blog/` directory named `my-first-post.mdx`.\\n\\n```\\nmy-project/             \\n├── docs/\\n│   ├── pages/\\n│   │   └── blog/ // [!code focus]\\n|   |       ├── index.mdx // [!code focus]\\n|   |       └── my-first-post.mdx // [!code ++] // [!code focus]\\n│   └── public/\\n│       └── favicon.ico \\n├── node_modules/\\n│   ...\\n```\\n\\nInside of the `my-first-post.mdx` file, you can write your blog content:\\n\\n```md [blog/my-first-post.mdx]\\n---\\nlayout: minimal\\n---\\n\\n# My First Post\\n\\nHello everyone, this is my first post!\\n```\\n\\nYou can also add `authors` and a `date` to your frontmatter, and then display it in the post.\\n\\n```md [blog/my-first-post.mdx]\\n---\\nlayout: minimal\\nauthors: // [!code focus]\\n  - \\\"[jxom](https://twitter.com/_jxom)\\\" // [!code focus]\\n  - \\\"[awkweb](https://twitter.com/awkweb)\\\" // [!code focus]\\ndate: 2023-11-25 // [!code focus]\\n---\\n\\n# My First Post\\n\\n::authors // [!code focus]\\n\\nHello everyone, this is my first post!\\n```\\n\\n::::\",\"document\":[{\"href\":\"/docs/guides/blog#blog\",\"html\":\"</header>\\n<p>Below are the steps to set up a blog using Vocs.</p>\\n<div data-vocs-steps=\\\"true\\\"><div data-depth=\\\"2\\\">\",\"id\":\"site/pages/docs/guides/blog.mdx#blog\",\"isPage\":true,\"text\":\"\\nBelow are the steps to set up a blog using Vocs.\\n\",\"title\":\"Blog\",\"titles\":[]},{\"href\":\"/docs/guides/blog#set-up-a-post-list-page\",\"html\":\"<p>First, create a new directory called <code>blog/</code>, and inside of it, create an index page (<code>index.mdx</code>).</p><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span>my-project/             </span></span>\\n<span class=\\\"line\\\"><span>├── docs/</span></span>\\n<span class=\\\"line\\\"><span>│   ├── pages/</span></span>\\n<span class=\\\"line focused\\\"><span>│   │   └── blog/ // [!code ++]</span></span>\\n<span class=\\\"line focused\\\"><span>|   |       └── index.mdx // [!code ++]</span></span>\\n<span class=\\\"line\\\"><span>│   └── public/</span></span>\\n<span class=\\\"line\\\"><span>│       └── favicon.ico </span></span>\\n<span class=\\\"line\\\"><span>├── node_modules/</span></span>\\n<span class=\\\"line\\\"><span>│   ...</span></span></code></pre><p>Inside of <code>index.mdx</code>, add the following code:</p><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"blog/index.mdx\\\" data-lang=\\\"md\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">---</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">layout</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">minimal</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">---</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF;font-weight:bold;--shiki-dark-font-weight:bold\\\"># Blog</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">::blog-posts</span></span></code></pre><aside data-callout=\\\"tip\\\"><strong data-callout-title=\\\"true\\\">Tip</strong><p>The <code>&quot;::&quot;</code> syntax refers to the <a href=\\\"https://talk.commonmark.org/t/generic-directives-plugins-syntax/444\\\">Directives Syntax Proposal</a>.</p></aside><p>You have now created a blog post list page. The <code>::blog-posts</code> component will automatically generate a list of all blog posts in the <code>blog/</code> directory.</p></div><div data-depth=\\\"2\\\">\",\"id\":\"site/pages/docs/guides/blog.mdx#set-up-a-post-list-page\",\"isPage\":false,\"text\":\"First, create a new directory called blog/, and inside of it, create an index page (index.mdx).my-project/             \\n├── docs/\\n│   ├── pages/\\n│   │   └── blog/ // [!code ++]\\n|   |       └── index.mdx // [!code ++]\\n│   └── public/\\n│       └── favicon.ico \\n├── node_modules/\\n│   ...Inside of index.mdx, add the following code:---\\nlayout: minimal\\n---\\n \\n# Blog\\n \\n::blog-postsTipThe &quot;::&quot; syntax refers to the Directives Syntax Proposal.You have now created a blog post list page. The ::blog-posts component will automatically generate a list of all blog posts in the blog/ directory.\",\"title\":\"Set up a post list page\",\"titles\":[\"Blog\"]},{\"href\":\"/docs/guides/blog#write-a-blog-post\",\"html\":\"<p>Now, create a new post in your <code>blog/</code> directory named <code>my-first-post.mdx</code>.</p><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span>my-project/             </span></span>\\n<span class=\\\"line\\\"><span>├── docs/</span></span>\\n<span class=\\\"line\\\"><span>│   ├── pages/</span></span>\\n<span class=\\\"line focused\\\"><span>│   │   └── blog/</span></span>\\n<span class=\\\"line focused\\\"><span>|   |       ├── index.mdx</span></span>\\n<span class=\\\"line focused\\\"><span>|   |       └── my-first-post.mdx // [!code ++]</span></span>\\n<span class=\\\"line\\\"><span>│   └── public/</span></span>\\n<span class=\\\"line\\\"><span>│       └── favicon.ico </span></span>\\n<span class=\\\"line\\\"><span>├── node_modules/</span></span>\\n<span class=\\\"line\\\"><span>│   ...</span></span></code></pre><p>Inside of the <code>my-first-post.mdx</code> file, you can write your blog content:</p><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"blog/my-first-post.mdx\\\" data-lang=\\\"md\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">---</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">layout</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">minimal</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">---</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF;font-weight:bold;--shiki-dark-font-weight:bold\\\"># My First Post</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Hello everyone, this is my first post!</span></span></code></pre><p>You can also add <code>authors</code> and a <code>date</code> to your frontmatter, and then display it in the post.</p><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"blog/my-first-post.mdx\\\" data-lang=\\\"md\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">---</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">layout</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">minimal</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">authors</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  - </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;[jxom](https://twitter.com/_jxom)&quot;</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  - </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;[awkweb](https://twitter.com/awkweb)&quot;</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">date</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">2023-11-25</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">---</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF;font-weight:bold;--shiki-dark-font-weight:bold\\\"># My First Post</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">::authors</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Hello everyone, this is my first post!</span></span></code></pre></div></div>\",\"id\":\"site/pages/docs/guides/blog.mdx#write-a-blog-post\",\"isPage\":false,\"text\":\"Now, create a new post in your blog/ directory named my-first-post.mdx.my-project/             \\n├── docs/\\n│   ├── pages/\\n│   │   └── blog/\\n|   |       ├── index.mdx\\n|   |       └── my-first-post.mdx // [!code ++]\\n│   └── public/\\n│       └── favicon.ico \\n├── node_modules/\\n│   ...Inside of the my-first-post.mdx file, you can write your blog content:---\\nlayout: minimal\\n---\\n \\n# My First Post\\n \\nHello everyone, this is my first post!You can also add authors and a date to your frontmatter, and then display it in the post.---\\nlayout: minimal\\nauthors: \\n  - &quot;[jxom](https://twitter.com/_jxom)&quot;\\n  - &quot;[awkweb](https://twitter.com/awkweb)&quot;\\ndate: 2023-11-25\\n---\\n \\n# My First Post\\n \\n::authors\\n \\nHello everyone, this is my first post!\",\"title\":\"Write a blog post\",\"titles\":[\"Blog\"]}]}],[\"index.a2db30c4b2d73f7a4196ed9ff2d9d2e78e9e4803c7f9485d2090c340b7bf2ef0\",{\"mdx\":\"# Project Structure [Overview of the structure of a Vocs project]\\n\\n## Overview\\n\\nA general overview of the structure of a Vocs project:\\n\\n```\\nmy-project/             # Your project's root directory.\\n├── docs/               # The root directory of your documentation. // [!code hl] // [!code focus]\\n│   ├── pages/          # Directory for your documentation pages (routes). // [!code hl] // [!code focus]\\n│   │   └── index.mdx   // [!code hl] // [!code focus]\\n│   └── public/         # Directory for static assets. // [!code hl] // [!code focus]\\n│       └── favicon.ico // [!code hl] // [!code focus]\\n├── node_modules/\\n├── src/\\n├── .gitignore\\n├── package.json\\n└── vocs.config.ts      # Vocs configuration file. // [!code hl] // [!code focus]\\n```\\n\\nVocs is designed to reside within a [subdirectory](/docs/api/config#rootdir) (default: `\\\"./docs\\\"`) of a larger project (ie. a library). However, it is also possible to use Vocs standalone, and you can [change the root directory](/docs/api/config#rootdir) from `\\\"./docs\\\"` to `\\\".\\\"` if you wish.\\n\\n## Configuration File\\n\\nVocs uses a configuration file (`vocs.config.ts`) to define global metadata for your documentation. \\nThis includes things like the site title, description, logo, sidebar, and more for your project. \\n\\n```\\nmy-project/   \\n│   ...\\n├── .gitignore\\n├── package.json\\n└── vocs.config.ts  // [!code focus]\\n```\\n\\nA basic `vocs.config.ts` could look like this:\\n\\n```ts [vocs.config.ts] twoslash\\nimport { defineConfig } from 'vocs'\\n \\nexport default defineConfig({\\n  description: 'Build reliable apps & libraries with lightweight, \\\\\\n    composable, and type-safe modules that interface with Ethereum.', \\n  title: 'Viem'\\n})\\n```\\n\\n[Read the Config API](/docs/api/config)\\n\\n\\n## Root Directory\\n\\nThe Root Directory contains all of your documentation pages, static assets, components, etc. \\nBy default, Vocs will look for a directory named `./docs` in your project's root directory. \\nYou can change this directory by setting the [`rootDir` property](/docs/api/config#rootdir) in your [vocs.config.ts](/docs/api/config).\\n\\n```\\nmy-project/             \\n├── docs/ // [!code focus]\\n│   ├── pages/\\n│   │   └── index.mdx   \\n│   └── public/\\n│       └── favicon.ico \\n├── node_modules/\\n│   ...\\n```\\n\\n## Routing\\n\\nVocs uses file-based routing. This means that each file inside of the `./docs/pages` directory will be treated as a route. \\nFiles within the pages directory can be: Markdown or MDX files, or React components (for more customizability).\\n\\n```\\nmy-project/             \\n├── docs/\\n│   ├── pages/ // [!code focus]\\n|   |   ├── index.mdx // [!code focus]\\n|   |   └── about.tsx // [!code focus]\\n│   └── public/\\n│       └── favicon.ico \\n├── node_modules/\\n│   ...\\n```\\n\\n[Read the Routing Guide](#TODO)\\n\\n## Static Assets\\n\\nStatic assets (images, fonts, etc.) can be placed in the `public` directory.\\n\\n```\\nmy-project/             \\n├── docs/\\n│   ├── pages/ \\n|   |   ├── index.mdx \\n|   |   └── about.tsx \\n│   └── public/ // [!code focus]\\n│       ├── logo.svg // [!code focus]\\n│       └── favicon.ico // [!code focus]\\n├── node_modules/\\n│   ...\\n```\\n\\nThey can be referenced in code like so:\\n\\n```md [example.mdx]\\n![Logo](/logo.svg)\\n```\\n\\n```tsx [Example.tsx]\\n<img src=\\\"/logo.svg\\\" />\\n```\\n\\n\\n## Layout Component\\n\\nA layout React component can be added to your Vocs root directory. \\nThe layout component will be used to wrap all of your documentation pages. \\nThis can be useful for adding static CSS files, or further customizing the layout of your documentation.\\n\\n```\\nmy-project/             \\n├── docs/\\n│   ├── pages/ \\n|   |   ├── index.mdx \\n|   |   └── about.tsx \\n│   └── public/\\n│   |   └── favicon.ico\\n|   └── layout.tsx // [!code focus]\\n├── node_modules/\\n│   ...\\n```\\n\\nThe `layout.tsx` component could look like:\\n\\n```tsx [layout.tsx]\\nimport { CustomLayout } from './Layout'\\n\\nexport default function Layout({ children }) {\\n  return <CustomLayout>{children}</CustomLayout>\\n}\\n```\\n\\n## Footer Component\\n\\nA footer React component can be added to your Vocs root directory. \\nThe footer component will be displayed at the bottom of all documentation pages. \\n\\n```\\nmy-project/             \\n├── docs/\\n│   ├── pages/ \\n|   |   ├── index.mdx \\n|   |   └── about.tsx \\n│   └── public/\\n│   |   └── favicon.ico\\n|   └── footer.tsx // [!code focus]\\n├── node_modules/\\n│   ...\\n```\\n\\nThe `footer.tsx` component could look like:\\n\\n```tsx [footer.tsx]\\nexport default function Footer() {\\n  return (\\n    <div>\\n      <div>Released under the MIT License.</div>\\n      <div>Copyright © 2022-present weth, LLC.</div>\\n    </div>\\n  )\\n}\\n```\\n\\n## Global Styles\\n\\nGlobal styles can be added under a `styles.css` file.\\n\\n```\\nmy-project/             \\n├── docs/\\n│   ├── pages/ \\n|   |   ├── index.mdx \\n|   |   └── about.tsx \\n│   └── public/\\n│   |   └── favicon.ico\\n|   └── styles.css // [!code focus]\\n├── node_modules/\\n│   ...\\n```\\n\\nThe `styles.css` file could look like:\\n\\n```css [styles.css]\\n@tailwind base;\\n@tailwind components;\\n@tailwind utilities;\\n\\n:root {\\n  --vocs-color_background: white;\\n}\\n\\n:root.dark {\\n  --vocs-color_background: #232225;\\n}\\n```\\n\\n:::tip[Tip]\\nYou can also utilize the [CSS `@import`](https://vitejs.dev/guide/features.html#import-inlining-and-rebasing) statement to import other CSS files.\\n:::\",\"document\":[{\"href\":\"/docs/structure#project-structure\",\"html\":\"<div role=\\\"doc-subtitle\\\">Overview of the structure of a Vocs project</div></header>\\n\",\"id\":\"site/pages/docs/structure.mdx#project-structure\",\"isPage\":true,\"text\":\"Overview of the structure of a Vocs project\\n\",\"title\":\"Project Structure\",\"titles\":[]},{\"href\":\"/docs/structure#overview\",\"html\":\"\\n<p>A general overview of the structure of a Vocs project:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused has-highlighted\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span>my-project/             # Your project&#x27;s root directory.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>├── docs/               # The root directory of your documentation.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│   ├── pages/          # Directory for your documentation pages (routes).</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│   │   └── index.mdx</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│   └── public/         # Directory for static assets.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│       └── favicon.ico</span></span>\\n<span class=\\\"line\\\"><span>├── node_modules/</span></span>\\n<span class=\\\"line\\\"><span>├── src/</span></span>\\n<span class=\\\"line\\\"><span>├── .gitignore</span></span>\\n<span class=\\\"line\\\"><span>├── package.json</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>└── vocs.config.ts      # Vocs configuration file.</span></span></code></pre>\\n<p>Vocs is designed to reside within a <a href=\\\"/docs/api/config#rootdir\\\">subdirectory</a> (default: <code>&quot;./docs&quot;</code>) of a larger project (ie. a library). However, it is also possible to use Vocs standalone, and you can <a href=\\\"/docs/api/config#rootdir\\\">change the root directory</a> from <code>&quot;./docs&quot;</code> to <code>&quot;.&quot;</code> if you wish.</p>\\n\",\"id\":\"site/pages/docs/structure.mdx#overview\",\"isPage\":false,\"text\":\"\\nA general overview of the structure of a Vocs project:\\nmy-project/             # Your project&#x27;s root directory.\\n├── docs/               # The root directory of your documentation.\\n│   ├── pages/          # Directory for your documentation pages (routes).\\n│   │   └── index.mdx\\n│   └── public/         # Directory for static assets.\\n│       └── favicon.ico\\n├── node_modules/\\n├── src/\\n├── .gitignore\\n├── package.json\\n└── vocs.config.ts      # Vocs configuration file.\\nVocs is designed to reside within a subdirectory (default: &quot;./docs&quot;) of a larger project (ie. a library). However, it is also possible to use Vocs standalone, and you can change the root directory from &quot;./docs&quot; to &quot;.&quot; if you wish.\\n\",\"title\":\"Overview\",\"titles\":[\"Project Structure\"]},{\"href\":\"/docs/structure#configuration-file\",\"html\":\"\\n<p>Vocs uses a configuration file (<code>vocs.config.ts</code>) to define global metadata for your documentation.\\nThis includes things like the site title, description, logo, sidebar, and more for your project.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span>my-project/   </span></span>\\n<span class=\\\"line\\\"><span>│   ...</span></span>\\n<span class=\\\"line\\\"><span>├── .gitignore</span></span>\\n<span class=\\\"line\\\"><span>├── package.json</span></span>\\n<span class=\\\"line focused\\\"><span>└── vocs.config.ts</span></span></code></pre>\\n<p>A basic <code>vocs.config.ts</code> could look like this:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"vocs.config.ts\\\" data-lang=\\\"ts\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  description: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Build reliable apps &amp; libraries with lightweight, </span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">\\\\</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">    composable, and type-safe modules that interface with Ethereum.&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\\n<p><a href=\\\"/docs/api/config\\\">Read the Config API</a></p>\\n\",\"id\":\"site/pages/docs/structure.mdx#configuration-file\",\"isPage\":false,\"text\":\"\\nVocs uses a configuration file (vocs.config.ts) to define global metadata for your documentation.\\nThis includes things like the site title, description, logo, sidebar, and more for your project.\\nmy-project/   \\n│   ...\\n├── .gitignore\\n├── package.json\\n└── vocs.config.ts\\nA basic vocs.config.ts could look like this:\\nimport { defineConfig } from &#x27;vocs&#x27;\\n \\nexport default defineConfig({\\n  description: &#x27;Build reliable apps &amp; libraries with lightweight, \\\\\\n    composable, and type-safe modules that interface with Ethereum.&#x27;, \\n  title: &#x27;Viem&#x27;\\n})\\nRead the Config API\\n\",\"title\":\"Configuration File\",\"titles\":[\"Project Structure\"]},{\"href\":\"/docs/structure#root-directory\",\"html\":\"\\n<p>The Root Directory contains all of your documentation pages, static assets, components, etc.\\nBy default, Vocs will look for a directory named <code>./docs</code> in your project&#x27;s root directory.\\nYou can change this directory by setting the <a href=\\\"/docs/api/config#rootdir\\\"><code>rootDir</code> property</a> in your <a href=\\\"/docs/api/config\\\">vocs.config.ts</a>.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span>my-project/             </span></span>\\n<span class=\\\"line focused\\\"><span>├── docs/</span></span>\\n<span class=\\\"line\\\"><span>│   ├── pages/</span></span>\\n<span class=\\\"line\\\"><span>│   │   └── index.mdx   </span></span>\\n<span class=\\\"line\\\"><span>│   └── public/</span></span>\\n<span class=\\\"line\\\"><span>│       └── favicon.ico </span></span>\\n<span class=\\\"line\\\"><span>├── node_modules/</span></span>\\n<span class=\\\"line\\\"><span>│   ...</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/structure.mdx#root-directory\",\"isPage\":false,\"text\":\"\\nThe Root Directory contains all of your documentation pages, static assets, components, etc.\\nBy default, Vocs will look for a directory named ./docs in your project&#x27;s root directory.\\nYou can change this directory by setting the rootDir property in your vocs.config.ts.\\nmy-project/             \\n├── docs/\\n│   ├── pages/\\n│   │   └── index.mdx   \\n│   └── public/\\n│       └── favicon.ico \\n├── node_modules/\\n│   ...\\n\",\"title\":\"Root Directory\",\"titles\":[\"Project Structure\"]},{\"href\":\"/docs/structure#routing\",\"html\":\"\\n<p>Vocs uses file-based routing. This means that each file inside of the <code>./docs/pages</code> directory will be treated as a route.\\nFiles within the pages directory can be: Markdown or MDX files, or React components (for more customizability).</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span>my-project/             </span></span>\\n<span class=\\\"line\\\"><span>├── docs/</span></span>\\n<span class=\\\"line focused\\\"><span>│   ├── pages/</span></span>\\n<span class=\\\"line focused\\\"><span>|   |   ├── index.mdx</span></span>\\n<span class=\\\"line focused\\\"><span>|   |   └── about.tsx</span></span>\\n<span class=\\\"line\\\"><span>│   └── public/</span></span>\\n<span class=\\\"line\\\"><span>│       └── favicon.ico </span></span>\\n<span class=\\\"line\\\"><span>├── node_modules/</span></span>\\n<span class=\\\"line\\\"><span>│   ...</span></span></code></pre>\\n<p><a href=\\\"#TODO\\\">Read the Routing Guide</a></p>\\n\",\"id\":\"site/pages/docs/structure.mdx#routing\",\"isPage\":false,\"text\":\"\\nVocs uses file-based routing. This means that each file inside of the ./docs/pages directory will be treated as a route.\\nFiles within the pages directory can be: Markdown or MDX files, or React components (for more customizability).\\nmy-project/             \\n├── docs/\\n│   ├── pages/\\n|   |   ├── index.mdx\\n|   |   └── about.tsx\\n│   └── public/\\n│       └── favicon.ico \\n├── node_modules/\\n│   ...\\nRead the Routing Guide\\n\",\"title\":\"Routing\",\"titles\":[\"Project Structure\"]},{\"href\":\"/docs/structure#static-assets\",\"html\":\"\\n<p>Static assets (images, fonts, etc.) can be placed in the <code>public</code> directory.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span>my-project/             </span></span>\\n<span class=\\\"line\\\"><span>├── docs/</span></span>\\n<span class=\\\"line\\\"><span>│   ├── pages/ </span></span>\\n<span class=\\\"line\\\"><span>|   |   ├── index.mdx </span></span>\\n<span class=\\\"line\\\"><span>|   |   └── about.tsx </span></span>\\n<span class=\\\"line focused\\\"><span>│   └── public/</span></span>\\n<span class=\\\"line focused\\\"><span>│       ├── logo.svg</span></span>\\n<span class=\\\"line focused\\\"><span>│       └── favicon.ico</span></span>\\n<span class=\\\"line\\\"><span>├── node_modules/</span></span>\\n<span class=\\\"line\\\"><span>│   ...</span></span></code></pre>\\n<p>They can be referenced in code like so:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"example.mdx\\\" data-lang=\\\"md\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">![</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF;text-decoration:underline;--shiki-dark-text-decoration:inherit\\\">Logo</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">](</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7;text-decoration:underline;--shiki-dark-text-decoration:underline\\\">/logo.svg</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span></code></pre>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Example.tsx\\\" data-lang=\\\"tsx\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">&lt;</span><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">img</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\"> src</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;/logo.svg&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> /&gt;</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/structure.mdx#static-assets\",\"isPage\":false,\"text\":\"\\nStatic assets (images, fonts, etc.) can be placed in the public directory.\\nmy-project/             \\n├── docs/\\n│   ├── pages/ \\n|   |   ├── index.mdx \\n|   |   └── about.tsx \\n│   └── public/\\n│       ├── logo.svg\\n│       └── favicon.ico\\n├── node_modules/\\n│   ...\\nThey can be referenced in code like so:\\n![Logo](/logo.svg)\\n&lt;img src=&quot;/logo.svg&quot; /&gt;\\n\",\"title\":\"Static Assets\",\"titles\":[\"Project Structure\"]},{\"href\":\"/docs/structure#layout-component\",\"html\":\"\\n<p>A layout React component can be added to your Vocs root directory.\\nThe layout component will be used to wrap all of your documentation pages.\\nThis can be useful for adding static CSS files, or further customizing the layout of your documentation.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span>my-project/             </span></span>\\n<span class=\\\"line\\\"><span>├── docs/</span></span>\\n<span class=\\\"line\\\"><span>│   ├── pages/ </span></span>\\n<span class=\\\"line\\\"><span>|   |   ├── index.mdx </span></span>\\n<span class=\\\"line\\\"><span>|   |   └── about.tsx </span></span>\\n<span class=\\\"line\\\"><span>│   └── public/</span></span>\\n<span class=\\\"line\\\"><span>│   |   └── favicon.ico</span></span>\\n<span class=\\\"line focused\\\"><span>|   └── layout.tsx</span></span>\\n<span class=\\\"line\\\"><span>├── node_modules/</span></span>\\n<span class=\\\"line\\\"><span>│   ...</span></span></code></pre>\\n<p>The <code>layout.tsx</code> component could look like:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"layout.tsx\\\" data-lang=\\\"tsx\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { CustomLayout } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;./Layout&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> function</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> Layout</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({ </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">children</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\"> }) </span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">  return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> &lt;</span><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">CustomLayout</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">&gt;</span><span style=\\\"color:#24292E;--shiki-dark:#F47067\\\">{</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">children</span><span style=\\\"color:#24292E;--shiki-dark:#F47067\\\">}</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">&lt;/</span><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">CustomLayout</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">&gt;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/structure.mdx#layout-component\",\"isPage\":false,\"text\":\"\\nA layout React component can be added to your Vocs root directory.\\nThe layout component will be used to wrap all of your documentation pages.\\nThis can be useful for adding static CSS files, or further customizing the layout of your documentation.\\nmy-project/             \\n├── docs/\\n│   ├── pages/ \\n|   |   ├── index.mdx \\n|   |   └── about.tsx \\n│   └── public/\\n│   |   └── favicon.ico\\n|   └── layout.tsx\\n├── node_modules/\\n│   ...\\nThe layout.tsx component could look like:\\nimport { CustomLayout } from &#x27;./Layout&#x27;\\n \\nexport default function Layout({ children }) {\\n  return &lt;CustomLayout&gt;{children}&lt;/CustomLayout&gt;\\n}\\n\",\"title\":\"Layout Component\",\"titles\":[\"Project Structure\"]},{\"href\":\"/docs/structure#footer-component\",\"html\":\"\\n<p>A footer React component can be added to your Vocs root directory.\\nThe footer component will be displayed at the bottom of all documentation pages.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span>my-project/             </span></span>\\n<span class=\\\"line\\\"><span>├── docs/</span></span>\\n<span class=\\\"line\\\"><span>│   ├── pages/ </span></span>\\n<span class=\\\"line\\\"><span>|   |   ├── index.mdx </span></span>\\n<span class=\\\"line\\\"><span>|   |   └── about.tsx </span></span>\\n<span class=\\\"line\\\"><span>│   └── public/</span></span>\\n<span class=\\\"line\\\"><span>│   |   └── favicon.ico</span></span>\\n<span class=\\\"line focused\\\"><span>|   └── footer.tsx</span></span>\\n<span class=\\\"line\\\"><span>├── node_modules/</span></span>\\n<span class=\\\"line\\\"><span>│   ...</span></span></code></pre>\\n<p>The <code>footer.tsx</code> component could look like:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"footer.tsx\\\" data-lang=\\\"tsx\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> function</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> Footer</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">() </span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">  return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    &lt;</span><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">div</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">&gt;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      &lt;</span><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">div</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">&gt;Released under the MIT License.&lt;/</span><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">div</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">&gt;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      &lt;</span><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">div</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">&gt;Copyright © 2022-present weth, LLC.&lt;/</span><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">div</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">&gt;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    &lt;/</span><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">div</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">&gt;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  )</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/structure.mdx#footer-component\",\"isPage\":false,\"text\":\"\\nA footer React component can be added to your Vocs root directory.\\nThe footer component will be displayed at the bottom of all documentation pages.\\nmy-project/             \\n├── docs/\\n│   ├── pages/ \\n|   |   ├── index.mdx \\n|   |   └── about.tsx \\n│   └── public/\\n│   |   └── favicon.ico\\n|   └── footer.tsx\\n├── node_modules/\\n│   ...\\nThe footer.tsx component could look like:\\nexport default function Footer() {\\n  return (\\n    &lt;div&gt;\\n      &lt;div&gt;Released under the MIT License.&lt;/div&gt;\\n      &lt;div&gt;Copyright © 2022-present weth, LLC.&lt;/div&gt;\\n    &lt;/div&gt;\\n  )\\n}\\n\",\"title\":\"Footer Component\",\"titles\":[\"Project Structure\"]},{\"href\":\"/docs/structure#global-styles\",\"html\":\"\\n<p>Global styles can be added under a <code>styles.css</code> file.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span>my-project/             </span></span>\\n<span class=\\\"line\\\"><span>├── docs/</span></span>\\n<span class=\\\"line\\\"><span>│   ├── pages/ </span></span>\\n<span class=\\\"line\\\"><span>|   |   ├── index.mdx </span></span>\\n<span class=\\\"line\\\"><span>|   |   └── about.tsx </span></span>\\n<span class=\\\"line\\\"><span>│   └── public/</span></span>\\n<span class=\\\"line\\\"><span>│   |   └── favicon.ico</span></span>\\n<span class=\\\"line focused\\\"><span>|   └── styles.css</span></span>\\n<span class=\\\"line\\\"><span>├── node_modules/</span></span>\\n<span class=\\\"line\\\"><span>│   ...</span></span></code></pre>\\n<p>The <code>styles.css</code> file could look like:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"styles.css\\\" data-lang=\\\"css\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">@tailwind</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> base;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">@tailwind</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> components;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">@tailwind</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> utilities;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">:root</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">  --vocs-color_background</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">white</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">:root.dark</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">  --vocs-color_background</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">#232225</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n<aside data-callout=\\\"tip\\\"><strong data-callout-title=\\\"true\\\">Tip</strong><p>You can also utilize the <a href=\\\"https://vitejs.dev/guide/features.html#import-inlining-and-rebasing\\\">CSS <code>@import</code></a> statement to import other CSS files.</p></aside>\",\"id\":\"site/pages/docs/structure.mdx#global-styles\",\"isPage\":false,\"text\":\"\\nGlobal styles can be added under a styles.css file.\\nmy-project/             \\n├── docs/\\n│   ├── pages/ \\n|   |   ├── index.mdx \\n|   |   └── about.tsx \\n│   └── public/\\n│   |   └── favicon.ico\\n|   └── styles.css\\n├── node_modules/\\n│   ...\\nThe styles.css file could look like:\\n@tailwind base;\\n@tailwind components;\\n@tailwind utilities;\\n \\n:root {\\n  --vocs-color_background: white;\\n}\\n \\n:root.dark {\\n  --vocs-color_background: #232225;\\n}\\nTipYou can also utilize the CSS @import statement to import other CSS files.\",\"title\":\"Global Styles\",\"titles\":[\"Project Structure\"]}]}],[\"index.db65638ac5c0a483fbd836a1dcc6bf886617a8a78cd2a94b41472b458c373117\",{\"mdx\":\"# Dynamic OG Images [Customizing the Open Graph Image in Vocs]\\n\\nVocs has built-in support for dynamic open graph images. \\n\\nOpen graph images are displayed when you share a link on an external platform such as Twitter, Slack, Telegram, etc.\\n\\nEvery page in Vocs can come with a accompanying customized OG image. For example, the image for this page looks like:\\n\\n<div style={{ backgroundColor: 'var(--vocs-color_background3)', borderRadius: '4px', display: 'flex', justifyContent: 'center', paddingTop: '40px', paddingBottom: '40px' }}><img width=\\\"70%\\\" src=\\\"https://vocs.dev/api/og?logo=https://vocs.dev/vocs-logo-dark.svg&title=Dynamic OG Images&description=Customizing the Open Graph Image in Vocs\\\" style={{ borderRadius: '4px' }} /></div>\\n\\n## Quick Start\\n\\n### Use our OG Image API\\n\\nWe've built an OG Image API that you can use to generate OG images for your Vocs documentation.\\n\\nTo use it, simply set the `ogImageUrl` property in your [Vocs config](/docs/structure#configuration-file) to `https://vocs.dev/api/og?logo=%logo&title=%title&description=%description`.\\n\\n```tsx [vocs.config.ts]\\nimport { defineConfig } from 'vocs'\\n\\nexport default defineConfig({\\n  ogImageUrl: 'https://vocs.dev/api/og?logo=%logo&title=%title&description=%description', // [!code focus]\\n  title: 'Viem'\\n})\\n```\\n\\n:::info\\nThe `%logo`, `%title`, and `%description` template variables will be replaced with the corresponding `logo`, `title` and `description` values defined in your [Vocs config](/docs/structure#configuration-file).\\n:::\\n\\n### Deploy your own\\n\\nThe easiest way to get up and running with a dynamic OG Image API is to use [Vercel's Edge Functions](https://vercel.com/docs/functions/edge-functions) & [`@vercel/og`](https://vercel.com/docs/functions/edge-functions/og-image-generation).\\n\\nYou can get up-and-running right away by cloning & deploying our OG Image API example repository below:\\n\\n[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fwevm%2Fvocs-og)\\n\\nAfter the project is deployed, change the `ogImageUrl` in your [Vocs config](/docs/structure#configuration-file) to the URL of your deployed OG Image API.\\n\\n```tsx [vocs.config.ts]\\nimport { defineConfig } from 'vocs'\\n\\nexport default defineConfig({\\n  ogImageUrl: 'https://<my-project>.vercel.app/api/og?logo=%logo&title=%title&description=%description', // [!code focus]\\n  title: 'Viem'\\n})\\n```\\n\\n## Configuration\\n\\nTo customize the open graph image for your documentation, you can set the `ogImageUrl` property in your `vocs.config.ts` file.\\n\\nThe following template variables are available:\\n\\n- `%logo`: The URL of the logo image\\n- `%title`: The title of the page\\n- `%description`: The description of the page\\n\\n```tsx [vocs.config.ts]\\nimport { defineConfig } from 'vocs'\\n\\nexport default defineConfig({\\n  ogImageUrl: 'https://vocs.dev/api/og?logo=%logo&title=%title&description=%description', // [!code focus]\\n  title: 'Viem'\\n})\\n```\\n\\n### Path-based OG Images\\n\\nYou can also specify an object for the `ogImageUrl` with paths as keys.\\n\\nThis will render a different OG image depending on the path the user is on.\\n\\n```tsx\\nimport { defineConfig } from 'vocs'\\n\\nexport default defineConfig({\\n  ogImageUrl: { // [!code focus]\\n    '/': 'https://vocs.dev/og-image.png', // [!code focus]\\n    '/docs': 'https://vocs.dev/api/og?logo=%logo&title=%title&description=%description', // [!code focus]\\n  }, // [!code focus]\\n  title: 'Viem'\\n})\\n```\",\"document\":[{\"href\":\"/docs/guides/og-images#dynamic-og-images\",\"html\":\"<div role=\\\"doc-subtitle\\\">Customizing the Open Graph Image in Vocs</div></header>\\n<p>Vocs has built-in support for dynamic open graph images.</p>\\n<p>Open graph images are displayed when you share a link on an external platform such as Twitter, Slack, Telegram, etc.</p>\\n<p>Every page in Vocs can come with a accompanying customized OG image. For example, the image for this page looks like:</p>\\n<div style=\\\"background-color:var(--vocs-color_background3);border-radius:4px;display:flex;justify-content:center;padding-top:40px;padding-bottom:40px\\\"><img width=\\\"70%\\\" src=\\\"https://vocs.dev/api/og?logo=https://vocs.dev/vocs-logo-dark.svg&amp;title=Dynamic OG Images&amp;description=Customizing the Open Graph Image in Vocs\\\" style=\\\"border-radius:4px\\\"/></div>\\n\",\"id\":\"site/pages/docs/guides/og-images.mdx#dynamic-og-images\",\"isPage\":true,\"text\":\"Customizing the Open Graph Image in Vocs\\nVocs has built-in support for dynamic open graph images.\\nOpen graph images are displayed when you share a link on an external platform such as Twitter, Slack, Telegram, etc.\\nEvery page in Vocs can come with a accompanying customized OG image. For example, the image for this page looks like:\\n\\n\",\"title\":\"Dynamic OG Images\",\"titles\":[]},{\"href\":\"/docs/guides/og-images#quick-start\",\"html\":\"\\n\",\"id\":\"site/pages/docs/guides/og-images.mdx#quick-start\",\"isPage\":false,\"text\":\"\\n\",\"title\":\"Quick Start\",\"titles\":[\"Dynamic OG Images\"]},{\"href\":\"/docs/guides/og-images#use-our-og-image-api\",\"html\":\"\\n<p>We&#x27;ve built an OG Image API that you can use to generate OG images for your Vocs documentation.</p>\\n<p>To use it, simply set the <code>ogImageUrl</code> property in your <a href=\\\"/docs/structure#configuration-file\\\">Vocs config</a> to <code>https://vocs.dev/api/og?logo=%logo&amp;title=%title&amp;description=%description</code>.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"vocs.config.ts\\\" data-lang=\\\"tsx\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  ogImageUrl: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;https://vocs.dev/api/og?logo=%logo&amp;title=%title&amp;description=%description&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\\n<aside data-callout=\\\"info\\\"><p>The <code>%logo</code>, <code>%title</code>, and <code>%description</code> template variables will be replaced with the corresponding <code>logo</code>, <code>title</code> and <code>description</code> values defined in your <a href=\\\"/docs/structure#configuration-file\\\">Vocs config</a>.</p></aside>\\n\",\"id\":\"site/pages/docs/guides/og-images.mdx#use-our-og-image-api\",\"isPage\":false,\"text\":\"\\nWe&#x27;ve built an OG Image API that you can use to generate OG images for your Vocs documentation.\\nTo use it, simply set the ogImageUrl property in your Vocs config to https://vocs.dev/api/og?logo=%logo&amp;title=%title&amp;description=%description.\\nimport { defineConfig } from &#x27;vocs&#x27;\\n \\nexport default defineConfig({\\n  ogImageUrl: &#x27;https://vocs.dev/api/og?logo=%logo&amp;title=%title&amp;description=%description&#x27;, \\n  title: &#x27;Viem&#x27;\\n})\\nThe %logo, %title, and %description template variables will be replaced with the corresponding logo, title and description values defined in your Vocs config.\\n\",\"title\":\"Use our OG Image API\",\"titles\":[\"Dynamic OG Images\",\"Quick Start\"]},{\"href\":\"/docs/guides/og-images#deploy-your-own\",\"html\":\"\\n<p>The easiest way to get up and running with a dynamic OG Image API is to use <a href=\\\"https://vercel.com/docs/functions/edge-functions\\\">Vercel&#x27;s Edge Functions</a> &amp; <a href=\\\"https://vercel.com/docs/functions/edge-functions/og-image-generation\\\"><code>@vercel/og</code></a>.</p>\\n<p>You can get up-and-running right away by cloning &amp; deploying our OG Image API example repository below:</p>\\n<p><a href=\\\"https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fwevm%2Fvocs-og\\\"><img src=\\\"https://vercel.com/button\\\" alt=\\\"Deploy with Vercel\\\"/></a></p>\\n<p>After the project is deployed, change the <code>ogImageUrl</code> in your <a href=\\\"/docs/structure#configuration-file\\\">Vocs config</a> to the URL of your deployed OG Image API.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"vocs.config.ts\\\" data-lang=\\\"tsx\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  ogImageUrl: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;https://&lt;my-project&gt;.vercel.app/api/og?logo=%logo&amp;title=%title&amp;description=%description&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/guides/og-images.mdx#deploy-your-own\",\"isPage\":false,\"text\":\"\\nThe easiest way to get up and running with a dynamic OG Image API is to use Vercel&#x27;s Edge Functions &amp; @vercel/og.\\nYou can get up-and-running right away by cloning &amp; deploying our OG Image API example repository below:\\n\\nAfter the project is deployed, change the ogImageUrl in your Vocs config to the URL of your deployed OG Image API.\\nimport { defineConfig } from &#x27;vocs&#x27;\\n \\nexport default defineConfig({\\n  ogImageUrl: &#x27;https://&lt;my-project&gt;.vercel.app/api/og?logo=%logo&amp;title=%title&amp;description=%description&#x27;, \\n  title: &#x27;Viem&#x27;\\n})\\n\",\"title\":\"Deploy your own\",\"titles\":[\"Dynamic OG Images\",\"Quick Start\"]},{\"href\":\"/docs/guides/og-images#configuration\",\"html\":\"\\n<p>To customize the open graph image for your documentation, you can set the <code>ogImageUrl</code> property in your <code>vocs.config.ts</code> file.</p>\\n<p>The following template variables are available:</p>\\n<ul>\\n<li><code>%logo</code>: The URL of the logo image</li>\\n<li><code>%title</code>: The title of the page</li>\\n<li><code>%description</code>: The description of the page</li>\\n</ul>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"vocs.config.ts\\\" data-lang=\\\"tsx\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  ogImageUrl: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;https://vocs.dev/api/og?logo=%logo&amp;title=%title&amp;description=%description&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\\n\",\"id\":\"site/pages/docs/guides/og-images.mdx#configuration\",\"isPage\":false,\"text\":\"\\nTo customize the open graph image for your documentation, you can set the ogImageUrl property in your vocs.config.ts file.\\nThe following template variables are available:\\n\\n%logo: The URL of the logo image\\n%title: The title of the page\\n%description: The description of the page\\n\\nimport { defineConfig } from &#x27;vocs&#x27;\\n \\nexport default defineConfig({\\n  ogImageUrl: &#x27;https://vocs.dev/api/og?logo=%logo&amp;title=%title&amp;description=%description&#x27;, \\n  title: &#x27;Viem&#x27;\\n})\\n\",\"title\":\"Configuration\",\"titles\":[\"Dynamic OG Images\"]},{\"href\":\"/docs/guides/og-images#path-based-og-images\",\"html\":\"\\n<p>You can also specify an object for the <code>ogImageUrl</code> with paths as keys.</p>\\n<p>This will render a different OG image depending on the path the user is on.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineConfig } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;vocs&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> default</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineConfig</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">({</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  ogImageUrl: { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">    &#x27;/&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;https://vocs.dev/og-image.png&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">    &#x27;/docs&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;https://vocs.dev/api/og?logo=%logo&amp;title=%title&amp;description=%description&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  }</span><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#F69D50\\\">})</span></span></code></pre>\",\"id\":\"site/pages/docs/guides/og-images.mdx#path-based-og-images\",\"isPage\":false,\"text\":\"\\nYou can also specify an object for the ogImageUrl with paths as keys.\\nThis will render a different OG image depending on the path the user is on.\\nimport { defineConfig } from &#x27;vocs&#x27;\\n \\nexport default defineConfig({\\n  ogImageUrl: { \\n    &#x27;/&#x27;: &#x27;https://vocs.dev/og-image.png&#x27;, \\n    &#x27;/docs&#x27;: &#x27;https://vocs.dev/api/og?logo=%logo&amp;title=%title&amp;description=%description&#x27;, \\n  }, \\n  title: &#x27;Viem&#x27;\\n})\",\"title\":\"Path-based OG Images\",\"titles\":[\"Dynamic OG Images\",\"Configuration\"]}]}],[\"index.7bffc58f3da7335f3cfcebf2ed0258052405328ed6c59a44be6920a384149c2f\",{\"mdx\":\"# Getting Started\\n\\n## Overview\\n\\nVocs is a [React](https://react.dev)-based static documentation generator, powered by [Vite](https://vitejs.dev).\\n\\nWrite your content in [Markdown](https://en.wikipedia.org/wiki/Markdown) or [MDX](https://mdxjs.com/), and Vocs will generate a static site with a default theme.\\n\\n## Quick Start\\n\\n### Bootstrap via CLI\\n\\nScaffold a new project with the command line:\\n\\n:::code-group\\n\\n```bash [npm]\\nnpm init vocs\\n```\\n\\n```bash [pnpm]\\npnpm create vocs\\n```\\n\\n```bash [yarn]\\nyarn create vocs\\n```\\n\\n```bash [bun]\\nbun create vocs\\n```\\n\\n:::\\n\\n### Bootstrap via Vercel\\n\\nScaffold a new project and deploy it instantly with Vercel:\\n\\n[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fwevm%2Fvocs%2Ftree%2Fmain%2Fcreate-vocs%2Ftemplates%2Fdefault)\\n\\n## Manual Installation\\n\\nYou can install Vocs in an existing project, or start from scratch, by installing Vocs as a dependency.\\n\\n::::steps\\n\\n### Install\\n\\nFirst, we will install `vocs` as a dependency in our project.\\n\\n:::code-group\\n\\n```bash [npm]\\nnpm i vocs\\n```\\n\\n```bash [pnpm]\\npnpm i vocs\\n```\\n\\n```bash [yarn]\\nyarn add vocs\\n```\\n\\n```bash [bun]\\nbun i vocs\\n```\\n\\n:::\\n\\n### Add Scripts to `package.json`\\n\\nAfter that, let's add some scripts to our `package.json` for Vocs.\\n\\n```json [package.json]\\n{\\n  \\\"name\\\": \\\"example\\\",\\n  \\\"version\\\": \\\"0.0.0\\\",\\n  \\\"scripts\\\": { // [!code focus]\\n    \\\"docs:dev\\\": \\\"vocs dev\\\", // [!code focus] \\n    \\\"docs:build\\\": \\\"vocs build\\\", // [!code focus]\\n    \\\"docs:preview\\\": \\\"vocs preview\\\" // [!code focus]\\n  } // [!code focus]\\n}\\n```\\n\\n### Build your First Page\\n\\nCreate a directory called `docs`, and add a file inside of it called `index.mdx` under a `pages` directory:\\n\\n```\\nmy-project/      \\n├── docs/                // [!code focus]\\n│   ├── pages/           // [!code focus]\\n│   │   └── index.mdx   // [!code focus]\\n├── node_modules/\\n└── package.json  \\n```\\n\\n```markdown [docs/pages/index.mdx]\\n# Hello, World! [This is my first page]\\n\\nWelcome to my docs. \\n```\\n\\n### Run\\n\\nNext, run the development server:\\n\\n```bash [Terminal]\\nnpm run docs:dev\\n```\\n\\nThen open up your browser to `http://localhost:5173`, and you can see your first page!\\n\\n### Next Steps\\n\\nNow that you have a basic documentation site up and running, you can learn more about how Vocs projects are structured in [Project Structure](/docs/structure).\\n\\n::::\\n\",\"document\":[{\"href\":\"/docs#getting-started\",\"html\":\"</header>\\n\",\"id\":\"site/pages/docs/#getting-started\",\"isPage\":true,\"text\":\"\\n\",\"title\":\"Getting Started\",\"titles\":[]},{\"href\":\"/docs#overview\",\"html\":\"\\n<p>Vocs is a <a href=\\\"https://react.dev\\\">React</a>-based static documentation generator, powered by <a href=\\\"https://vitejs.dev\\\">Vite</a>.</p>\\n<p>Write your content in <a href=\\\"https://en.wikipedia.org/wiki/Markdown\\\">Markdown</a> or <a href=\\\"https://mdxjs.com/\\\">MDX</a>, and Vocs will generate a static site with a default theme.</p>\\n\",\"id\":\"site/pages/docs/#overview\",\"isPage\":false,\"text\":\"\\nVocs is a React-based static documentation generator, powered by Vite.\\nWrite your content in Markdown or MDX, and Vocs will generate a static site with a default theme.\\n\",\"title\":\"Overview\",\"titles\":[\"Getting Started\"]},{\"href\":\"/docs#quick-start\",\"html\":\"\\n\",\"id\":\"site/pages/docs/#quick-start\",\"isPage\":false,\"text\":\"\\n\",\"title\":\"Quick Start\",\"titles\":[\"Getting Started\"]},{\"href\":\"/docs#bootstrap-via-cli\",\"html\":\"\\n<p>Scaffold a new project with the command line:</p>\\n<div class=\\\"code-group\\\"><div data-title=\\\"npm\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"npm\\\" data-lang=\\\"bash\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">npm</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> init</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> vocs</span></span></code></pre></div><div data-title=\\\"pnpm\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"pnpm\\\" data-lang=\\\"bash\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">pnpm</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> create</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> vocs</span></span></code></pre></div><div data-title=\\\"yarn\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"yarn\\\" data-lang=\\\"bash\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">yarn</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> create</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> vocs</span></span></code></pre></div><div data-title=\\\"bun\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"bun\\\" data-lang=\\\"bash\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">bun</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> create</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> vocs</span></span></code></pre></div></div>\\n\",\"id\":\"site/pages/docs/#bootstrap-via-cli\",\"isPage\":false,\"text\":\"\\nScaffold a new project with the command line:\\nnpm init vocspnpm create vocsyarn create vocsbun create vocs\\n\",\"title\":\"Bootstrap via CLI\",\"titles\":[\"Getting Started\",\"Quick Start\"]},{\"href\":\"/docs#bootstrap-via-vercel\",\"html\":\"\\n<p>Scaffold a new project and deploy it instantly with Vercel:</p>\\n<p><a href=\\\"https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fwevm%2Fvocs%2Ftree%2Fmain%2Fcreate-vocs%2Ftemplates%2Fdefault\\\"><img src=\\\"https://vercel.com/button\\\" alt=\\\"Deploy with Vercel\\\"/></a></p>\\n\",\"id\":\"site/pages/docs/#bootstrap-via-vercel\",\"isPage\":false,\"text\":\"\\nScaffold a new project and deploy it instantly with Vercel:\\n\\n\",\"title\":\"Bootstrap via Vercel\",\"titles\":[\"Getting Started\",\"Quick Start\"]},{\"href\":\"/docs#manual-installation\",\"html\":\"\\n<p>You can install Vocs in an existing project, or start from scratch, by installing Vocs as a dependency.</p>\\n<div data-vocs-steps=\\\"true\\\"><div data-depth=\\\"3\\\">\",\"id\":\"site/pages/docs/#manual-installation\",\"isPage\":false,\"text\":\"\\nYou can install Vocs in an existing project, or start from scratch, by installing Vocs as a dependency.\\n\",\"title\":\"Manual Installation\",\"titles\":[\"Getting Started\"]},{\"href\":\"/docs#install\",\"html\":\"<p>First, we will install <code>vocs</code> as a dependency in our project.</p><div class=\\\"code-group\\\"><div data-title=\\\"npm\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"npm\\\" data-lang=\\\"bash\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">npm</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> i</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> vocs</span></span></code></pre></div><div data-title=\\\"pnpm\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"pnpm\\\" data-lang=\\\"bash\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">pnpm</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> i</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> vocs</span></span></code></pre></div><div data-title=\\\"yarn\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"yarn\\\" data-lang=\\\"bash\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">yarn</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> add</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> vocs</span></span></code></pre></div><div data-title=\\\"bun\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"bun\\\" data-lang=\\\"bash\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">bun</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> i</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> vocs</span></span></code></pre></div></div></div><div data-depth=\\\"3\\\">\",\"id\":\"site/pages/docs/#install\",\"isPage\":false,\"text\":\"First, we will install vocs as a dependency in our project.npm i vocspnpm i vocsyarn add vocsbun i vocs\",\"title\":\"Install\",\"titles\":[\"Getting Started\",\"Manual Installation\"]},{\"href\":\"/docs#add-scripts-to-packagejson\",\"html\":\"<p>After that, let&#x27;s add some scripts to our <code>package.json</code> for Vocs.</p><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"package.json\\\" data-lang=\\\"json\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">  &quot;name&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;example&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">  &quot;version&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;0.0.0&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">  &quot;scripts&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">    &quot;docs:dev&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;vocs dev&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">    &quot;docs:build&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;vocs build&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">    &quot;docs:preview&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;vocs preview&quot;</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  } </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre></div><div data-depth=\\\"3\\\">\",\"id\":\"site/pages/docs/#add-scripts-to-packagejson\",\"isPage\":false,\"text\":\"After that, let&#x27;s add some scripts to our package.json for Vocs.{\\n  &quot;name&quot;: &quot;example&quot;,\\n  &quot;version&quot;: &quot;0.0.0&quot;,\\n  &quot;scripts&quot;: { \\n    &quot;docs:dev&quot;: &quot;vocs dev&quot;, \\n    &quot;docs:build&quot;: &quot;vocs build&quot;, \\n    &quot;docs:preview&quot;: &quot;vocs preview&quot;\\n  } \\n}\",\"title\":\"Add Scripts to package.json\",\"titles\":[\"Getting Started\",\"Manual Installation\"]},{\"href\":\"/docs#build-your-first-page\",\"html\":\"<p>Create a directory called <code>docs</code>, and add a file inside of it called <code>index.mdx</code> under a <code>pages</code> directory:</p><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span>my-project/      </span></span>\\n<span class=\\\"line focused\\\"><span>├── docs/</span></span>\\n<span class=\\\"line focused\\\"><span>│   ├── pages/</span></span>\\n<span class=\\\"line focused\\\"><span>│   │   └── index.mdx</span></span>\\n<span class=\\\"line\\\"><span>├── node_modules/</span></span>\\n<span class=\\\"line\\\"><span>└── package.json  </span></span></code></pre><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"docs/pages/index.mdx\\\" data-lang=\\\"markdown\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF;font-weight:bold;--shiki-dark-font-weight:bold\\\"># Hello, World! [This is my first page]</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Welcome to my docs. </span></span></code></pre></div><div data-depth=\\\"3\\\">\",\"id\":\"site/pages/docs/#build-your-first-page\",\"isPage\":false,\"text\":\"Create a directory called docs, and add a file inside of it called index.mdx under a pages directory:my-project/      \\n├── docs/\\n│   ├── pages/\\n│   │   └── index.mdx\\n├── node_modules/\\n└── package.json  # Hello, World! [This is my first page]\\n \\nWelcome to my docs. \",\"title\":\"Build your First Page\",\"titles\":[\"Getting Started\",\"Manual Installation\"]},{\"href\":\"/docs#run\",\"html\":\"<p>Next, run the development server:</p><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Terminal\\\" data-lang=\\\"bash\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">npm</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> run</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> docs:dev</span></span></code></pre><p>Then open up your browser to <code>http://localhost:5173</code>, and you can see your first page!</p></div><div data-depth=\\\"3\\\">\",\"id\":\"site/pages/docs/#run\",\"isPage\":false,\"text\":\"Next, run the development server:npm run docs:devThen open up your browser to http://localhost:5173, and you can see your first page!\",\"title\":\"Run\",\"titles\":[\"Getting Started\",\"Manual Installation\"]},{\"href\":\"/docs#next-steps\",\"html\":\"<p>Now that you have a basic documentation site up and running, you can learn more about how Vocs projects are structured in <a href=\\\"/docs/structure\\\">Project Structure</a>.</p></div></div>\",\"id\":\"site/pages/docs/#next-steps\",\"isPage\":false,\"text\":\"Now that you have a basic documentation site up and running, you can learn more about how Vocs projects are structured in Project Structure.\",\"title\":\"Next Steps\",\"titles\":[\"Getting Started\",\"Manual Installation\"]}]}],[\"index.26f3aed59dd7d71760724e6dd530bff20c4035fa03578422b6a077f0530d8766\",{\"mdx\":\"---\\nlayout: minimal\\n---\\n\\n# Blog\\n\\n::blog-posts\",\"document\":[{\"href\":\"/blog#blog\",\"html\":\"</header>\\n<div data-blog-posts=\\\"true\\\"></div>\",\"id\":\"site/pages/blog/#blog\",\"isPage\":true,\"text\":\"\\n\",\"title\":\"Blog\",\"titles\":[]}]}],[\"index.b219e8b8cd826cb76425d07e22ae3f71da2e1520110c3841cebc706539dda57a\",{\"mdx\":\"---\\nlayout: landing\\n---\\n\\nimport { HomePage } from \\\"vocs/components\\\";\\nimport { Hero } from \\\"../components/Hero\\\";\\nimport { Downloads } from \\\"../components/Downloads\\\";\\n\\n<HomePage.Root>\\n  <Hero />\\n  <HomePage.InstallPackage name=\\\"ao-dapp\\\" type=\\\"init\\\" />\\n  <HomePage.Description>\\n    The create-ao-dapp provides a comprehensive boilerplate for setting up an AO\\n    process, including testing, modules, and amalgamation alongside a React\\n    application.\\n  </HomePage.Description>\\n  <HomePage.Buttons>\\n    <HomePage.Button href=\\\"/getting-started\\\" variant=\\\"accent\\\">\\n      Get started\\n    </HomePage.Button>\\n    <HomePage.Button href=\\\"https://github.com/Autonomous-Finance/create-ao-dapp\\\">\\n      GitHub\\n    </HomePage.Button>\\n  </HomePage.Buttons>\\n  <Downloads />\\n</HomePage.Root>\\n\",\"document\":[]}],[\"index.836f7b1a9bd15668afa456497982a618f51d2bdb71a00df0eb3b8efc8e293a30\",{\"mdx\":\"import { Authors, BlogPosts, Button, Callout, HomePage, Raw, Sponsors, Steps, Step  } from 'vocs/components'\\nimport * as MyButton from '../../../components/MyButton';\\n\\n# Components [How to use Vocs components & build your own]\\n\\n## Vocs Components\\n\\nThe following are components native to Vocs and that can be used throughout your docs.\\n\\n### Authors\\n\\nDisplays author or authors in a specific format.\\n\\n:::code-group\\n\\n<div data-title=\\\"Preview\\\">\\n  <Authors authors=\\\"codingwithmanny\\\" date=\\\"2024-01-01\\\" />\\n</div>\\n\\n```mdx [index.mdx]\\nimport { Authors } from 'vocs/components'\\n\\n<Authors authors=\\\"codingwithmanny\\\" date=\\\"2024-01-01\\\" />\\n```\\n:::\\n\\n### BlogPosts\\n\\nDisplays blog posts within the [`blogDir`](/docs/api/config#blogdir).\\n\\n:::code-group\\n\\n<div data-title=\\\"Preview\\\">\\n  <BlogPosts />\\n</div>\\n\\n```mdx [index.mdx]\\nimport { BlogPosts } from 'vocs/components'\\n\\n<BlogPosts />\\n```\\n\\n:::\\n\\n### Button\\n\\nDisplay a Vocs-flavored button.\\n\\n:::code-group\\n\\n<div data-title=\\\"Preview\\\">\\n  <div style={{ display: 'flex' }}>\\n    <Button>Default Button</Button>\\n    <div style={{ width: 8 }} />\\n    <Button variant=\\\"accent\\\">Accent Button</Button>\\n    <div style={{ width: 8 }} />\\n    <Button href=\\\"https://github.com/wevm\\\">Link Button</Button>\\n  </div>\\n</div>\\n\\n```mdx [index.mdx]\\nimport { Button } from 'vocs/components'\\n\\n<Button>Default Button</Button>\\n<Button className=\\\"custom-class\\\">Custom Class Button</Button>\\n<Button href=\\\"https://github.com/wevm\\\">Ahref Button</Button>\\n```\\n\\n:::\\n\\n### Callout\\n\\nDisplays a callout with content.\\n\\n:::code-group\\n\\n<div data-title=\\\"Preview\\\">\\n  <div style={{ display: 'flex', flexDirection: 'column', gap: 8 }}>\\n    <Callout>\\n      Default Callout\\n    </Callout>\\n    <Callout type=\\\"note\\\">\\n      Note Callout\\n    </Callout>\\n    <Callout type=\\\"info\\\">\\n      Info Callout\\n    </Callout>\\n    <Callout type=\\\"warning\\\">\\n      Warning Callout\\n    </Callout>\\n    <Callout type=\\\"danger\\\">\\n      Danger Callout\\n    </Callout>\\n    <Callout type=\\\"tip\\\">\\n      Tip Callout\\n    </Callout>\\n    <Callout type=\\\"success\\\">\\n      Success Callout\\n    </Callout>\\n  </div>\\n</div>\\n\\n```mdx [index.mdx]\\nimport { Callout } from 'vocs/components'\\n\\n<Callout>\\n  Default Callout\\n</Callout>\\n<Callout type=\\\"note\\\">\\n  Note Callout\\n</Callout>\\n<Callout type=\\\"info\\\">\\n  Info Callout\\n</Callout>\\n<Callout type=\\\"warning\\\">\\n  Warning Callout\\n</Callout>\\n<Callout type=\\\"danger\\\">\\n  Danger Callout\\n</Callout>\\n<Callout type=\\\"tip\\\">\\n  Tip Callout\\n</Callout>\\n<Callout type=\\\"success\\\">\\n  Success Callout\\n</Callout>\\n```\\n\\n:::\\n\\n### HomePage\\n\\nDisplays a \\\"home page\\\" section.\\n\\n:::code-group\\n\\n<div data-title=\\\"Preview\\\">\\n  <HomePage.Root>\\n    <HomePage.Logo />\\n    <HomePage.Tagline>Minimal Documentation Framework, powered by React + Vite.</HomePage.Tagline>\\n    <HomePage.InstallPackage name=\\\"vocs\\\" type=\\\"init\\\" />\\n    <HomePage.Description>Vocs is a minimal static documentation generator designed to supercharge your documentation workflow, built with modern web technologies.</HomePage.Description>\\n    <HomePage.Buttons>\\n      <HomePage.Button href=\\\"/docs\\\" variant=\\\"accent\\\">Get started</HomePage.Button>\\n      <HomePage.Button href=\\\"https://github.com/wevm/vocs\\\">GitHub</HomePage.Button>\\n    </HomePage.Buttons>\\n  </HomePage.Root>\\n</div>\\n\\n```mdx [index.mdx]\\nimport { HomePage } from 'vocs/components'\\n\\n<HomePage.Root>\\n  <HomePage.Logo />\\n  <HomePage.Tagline>Minimal Documentation Framework, powered by React + Vite.</HomePage.Tagline>\\n  <HomePage.InstallPackage name=\\\"vocs\\\" type=\\\"init\\\" />\\n  <HomePage.Description>Vocs is a minimal static documentation generator designed to supercharge your documentation workflow, built with modern web technologies.</HomePage.Description>\\n  <HomePage.Buttons>\\n    <HomePage.Button href=\\\"/docs\\\" variant=\\\"accent\\\">Get started</HomePage.Button>\\n    <HomePage.Button href=\\\"https://github.com/wevm/vocs\\\">GitHub</HomePage.Button>\\n  </HomePage.Buttons>\\n</HomePage.Root>\\n```\\n\\n:::\\n\\n### Sponsors\\n\\nRenders a list of [sponsors defined in the Vocs config](/docs/api/config#sponsors).\\n\\n:::code-group\\n\\n<div data-title=\\\"Preview\\\">\\n  <Sponsors />\\n</div>\\n\\n```mdx [index.mdx]\\nimport { Sponsors } from 'vocs/components'\\n\\n<Sponsors />\\n```\\n\\n:::\\n\\n## Custom Components\\n\\nYou can also bring your own custom components by importing them in your MDX files.\\n\\n:::code-group\\n\\n<div data-title=\\\"Preview\\\">\\n  <button\\n    style={{\\n      background: 'var(--vocs-color_backgroundAccent)',\\n      paddingLeft: 'var(--vocs-space_16)',\\n      paddingRight: 'var(--vocs-space_16)',\\n      borderRadius: 'var(--vocs-space_4)',\\n      lineHeight: 'var(--vocs-space_32)',\\n      fontWeight: 'var(--vocs-fontWeight_medium)',\\n      fontSize: 'var(--vocs-fontSize_14)',\\n    }}\\n    type=\\\"button\\\"\\n  >\\n    Hello world\\n  </button>\\n</div>\\n\\n```mdx [pages/index.mdx]\\nimport Custom from '../components/Custom';\\n\\n<Custom>Hello world</Custom>\\n```\\n\\n```tsx [components/Custom.tsx]\\nimport * as React from 'react'\\n\\nexport default function Custom({ children }: { children: React.ReactNode }) {\\n  return (\\n    <button className=\\\"primary\\\">\\n      {children}\\n    </button>\\n  )\\n}\\n```\\n\\n```css [styles.css]\\nbutton.primary {\\n  background: var(--vocs-color_backgroundAccent);\\n  padding-left: var(--vocs-space_16);\\n  padding-right: var(--vocs-space_16);\\n  border-radius: var(--vocs-space_4);\\n  line-height: var(--vocs-space_32);\\n  font-weight: var(--vocs-fontWeight_medium);\\n  font-size: var(--vocs-fontSize_14);\\n}\\n```\\n\\n:::\\n\\n\",\"document\":[]}],[\"index.d090065b6468f5cae5aba952a523f1345b042260fa5b86fb94cf7820f2cc03eb\",{\"mdx\":\"# AO Process Testing [This section provides an overview of how to test AO processes.]\\n\\nIn order to test AO processes, you need to have a basic understanding of the following:\\n\\n- **busted** - Busted is a unit testing framework for Lua. You can learn more about Busted from the [official documentation](https://lunarmodules.github.io/busted/)\\n- **Ao Process Testing Suite** - AO processes are tested using the AO Testing Suite. You can learn more about the AO Testing Suite from the [official documentation](https://github.com/Autonomous-Finance/ao-process-testing)\\n\\n## Process Testing Directory Structure\\n\\nIf you generate a new process using the Create Ao dApp, the directory structure of the process will look somewhat like this:\\n\\n```\\nprocess-name/             # Your process's root directory.\\n├── scripts/              # Utility scripts for the process.\\n│   ├── build.sh          # Build script for the process.\\n│   ├── deploy.sh         # Deploy script for the process.\\n│   └── test.sh           # Test script for the process. // [!code hl] // [!code focus]\\n└── src/                  # Source code for the process.\\n    ├── test/             # Test directory for the process. // [!code hl] // [!code focus]\\n    │   ├── mocked-env    # Mocked env files to test the process. // [!code hl] // [!code focus]\\n    │   ├── setup.lua     # AO Testing Suite setup file. // [!code hl] // [!code focus]\\n    │   └── process_test.lua # Test script for the process. // [!code hl] // [!code focus]\\n    ├── process_lib.lua   # Library for the process.\\n    ├── process.lua       # Entry point for the process.\\n    └── reset_modules.lua # Reset preloaded modules.\\n```\\n\\nWe will now discuss the contents of the `test` directory in detail.\\n\\n## Test Directory\\nThe `test` directory contains the following files:\\n\\n- **mocked-env** - This directory contains the mocked environment files that are used to test the process. The mocked environment files are used to mock the environment variables that are used in the process. The mocked environment files are used to test the process in different environments.\\n- **setup.lua** - This file is used to set up the AO Testing Suite. The setup file is used to set up the AO Testing Suite before running the tests. The setup file is used to set up the environment variables that are used in the process.\\n- **process_test.lua** - This file contains the actual test script and cases for the process.\\n\\n## Writing tests\\n\\nNow that you have a basic understanding of the directory structure of the process, let's write some tests for the process.\\n\\n### Writing a test case\\n\\nTo write a test case for the process, you need to create a new test case in the `process_test.lua` file. The test case should be written using the Busted syntax.\\n\\n:::tip\\nCreate Ao dApp generates a sample test case for the process. You can modify the sample test case to write your own test cases.\\n:::\\n\\n```lua [process-name/src/test/process_test.lua]\\n---@diagnostic disable: duplicate-set-field\\nrequire(\\\"test.setup\\\")()\\n\\n_G.IsInUnitTest    = true -- set this per test file to keep ao.send() from doing anything\\n_G.VerboseTests    = 2    -- how much logging to see (0 - none at all, 1 - important ones, 2 - everything)\\n-- optional logging function that allows for different verbosity levels\\n_G.printVerb       = function(level)\\n    level = level or 2\\n    return function(...) -- define here as global so we can use it in application code too\\n        if _G.VerboseTests >= level then print(table.unpack({ ... })) end\\n    end\\nend\\n\\n\\n-- Require the process library and the process file\\nlocal process      = require \\\"process_lib\\\" -- [!code hl] -- [!code focus]\\n\\n-- Define initial state\\n_G.Version = \\\"1.0.0\\\" -- [!code hl] -- [!code focus]\\n_G.Balances = _G.Balances or { [\\\"0x123\\\"] = 1000 } -- [!code hl] -- [!code focus]\\n_G.TotalSupply = _G.TotalSupply or 1000 -- [!code hl] -- [!code focus]\\n_G.Name = \\\"test token\\\" -- [!code hl] -- [!code focus]\\n\\n-- This function resets the global variables to their initial state\\nlocal resetGlobals = function() -- [!code hl] -- [!code focus]\\n  _G.Version = \\\"1.0.0\\\" -- [!code hl] -- [!code focus]\\n  _G.Balances = _G.Balances or { [\\\"0x123\\\"] = 1000 } -- [!code hl] -- [!code focus]\\n  _G.TotalSupply = _G.TotalSupply or 1000 -- [!code hl] -- [!code focus]\\n  _G.Name = \\\"test token\\\" -- [!code hl] -- [!code focus]\\nend -- [!code hl] -- [!code focus]\\n\\ndescribe(\\\"token process\\\", function() -- [!code hl] -- [!code focus]\\n    setup(function() -- [!code hl] -- [!code focus]\\n        -- Mock the sendReply function -- [!code hl] -- [!code focus]\\n        process.sendReply = function(message) -- [!code hl] -- [!code focus]\\n            return message -- [!code hl] -- [!code focus]\\n        end -- [!code hl] -- [!code focus]\\n    end) -- [!code hl] -- [!code focus]\\n\\n    describe(\\\"getBalance\\\", function() -- [!code hl] -- [!code focus]\\n        it(\\\"should return correct Balance\\\", function() -- [!code hl] -- [!code focus]\\n            local message = { -- [!code hl] -- [!code focus]\\n                From = \\\"0x123\\\", -- [!code hl] -- [!code focus]\\n                Action = \\\"Balance\\\", -- [!code hl] -- [!code focus]\\n                Tags = {} -- [!code hl] -- [!code focus]\\n            } -- [!code hl] -- [!code focus]\\n\\n            local response = process.getBalance(message) -- [!code hl] -- [!code focus]\\n            assert.are.same(1000, response.Balance) -- [!code hl] -- [!code focus]\\n\\n            -- reset globals\\n            resetGlobals() -- [!code hl] -- [!code focus]\\n        end) -- [!code hl] -- [!code focus]\\n    end) -- [!code hl] -- [!code focus]\\nend) -- [!code hl] -- [!code focus]\\n```\\n\\n\\n### Running the tests\\n:::warning[Busted is required]\\nIn order to write tests for AO processes, you need to have a basic understanding of Busted. You can learn more about Busted from the [official documentation](https://lunarmodules.github.io/busted/).\\n\\nInstalling busted can be done using luarocks by running the following command:\\n\\n```bash [Terminal]\\nluarocks install busted\\n```\\n:::\\n\\nCreate Ao dApp provides a test script that can be used to run the tests for the process. The test script is located in the `./ao/process-name/scripts` directory of the process.\\n\\nTo run the tests for the process, you need to run the test script using the following command from the project root:\\n\\n```bash [Terminal]\\ncd ao/process-name && ./scripts/test.sh\\n```\\n\\n:::tip[Handy Tip]\\nCreate Ao dApp provides a shortcut to run the tests for the process. You can run the tests for the process using the following command from the project root:\\n\\n```bash [Terminal]\\nnpm run myprocess:test\\n```\\n:::\",\"document\":[{\"href\":\"/process-development/testing#ao-process-testing\",\"html\":\"<div role=\\\"doc-subtitle\\\">This section provides an overview of how to test AO processes.</div></header>\\n<p>In order to test AO processes, you need to have a basic understanding of the following:</p>\\n<ul>\\n<li><strong>busted</strong> - Busted is a unit testing framework for Lua. You can learn more about Busted from the <a href=\\\"https://lunarmodules.github.io/busted/\\\">official documentation</a></li>\\n<li><strong>Ao Process Testing Suite</strong> - AO processes are tested using the AO Testing Suite. You can learn more about the AO Testing Suite from the <a href=\\\"https://github.com/Autonomous-Finance/ao-process-testing\\\">official documentation</a></li>\\n</ul>\\n\",\"id\":\"site/pages/process-development/testing.mdx#ao-process-testing\",\"isPage\":true,\"text\":\"This section provides an overview of how to test AO processes.\\nIn order to test AO processes, you need to have a basic understanding of the following:\\n\\nbusted - Busted is a unit testing framework for Lua. You can learn more about Busted from the official documentation\\nAo Process Testing Suite - AO processes are tested using the AO Testing Suite. You can learn more about the AO Testing Suite from the official documentation\\n\\n\",\"title\":\"AO Process Testing\",\"titles\":[]},{\"href\":\"/process-development/testing#process-testing-directory-structure\",\"html\":\"\\n<p>If you generate a new process using the Create Ao dApp, the directory structure of the process will look somewhat like this:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused has-highlighted\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span>process-name/             # Your process&#x27;s root directory.</span></span>\\n<span class=\\\"line\\\"><span>├── scripts/              # Utility scripts for the process.</span></span>\\n<span class=\\\"line\\\"><span>│   ├── build.sh          # Build script for the process.</span></span>\\n<span class=\\\"line\\\"><span>│   ├── deploy.sh         # Deploy script for the process.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│   └── test.sh           # Test script for the process.</span></span>\\n<span class=\\\"line\\\"><span>└── src/                  # Source code for the process.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>    ├── test/             # Test directory for the process.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>    │   ├── mocked-env    # Mocked env files to test the process.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>    │   ├── setup.lua     # AO Testing Suite setup file.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>    │   └── process_test.lua # Test script for the process.</span></span>\\n<span class=\\\"line\\\"><span>    ├── process_lib.lua   # Library for the process.</span></span>\\n<span class=\\\"line\\\"><span>    ├── process.lua       # Entry point for the process.</span></span>\\n<span class=\\\"line\\\"><span>    └── reset_modules.lua # Reset preloaded modules.</span></span></code></pre>\\n<p>We will now discuss the contents of the <code>test</code> directory in detail.</p>\\n\",\"id\":\"site/pages/process-development/testing.mdx#process-testing-directory-structure\",\"isPage\":false,\"text\":\"\\nIf you generate a new process using the Create Ao dApp, the directory structure of the process will look somewhat like this:\\nprocess-name/             # Your process&#x27;s root directory.\\n├── scripts/              # Utility scripts for the process.\\n│   ├── build.sh          # Build script for the process.\\n│   ├── deploy.sh         # Deploy script for the process.\\n│   └── test.sh           # Test script for the process.\\n└── src/                  # Source code for the process.\\n    ├── test/             # Test directory for the process.\\n    │   ├── mocked-env    # Mocked env files to test the process.\\n    │   ├── setup.lua     # AO Testing Suite setup file.\\n    │   └── process_test.lua # Test script for the process.\\n    ├── process_lib.lua   # Library for the process.\\n    ├── process.lua       # Entry point for the process.\\n    └── reset_modules.lua # Reset preloaded modules.\\nWe will now discuss the contents of the test directory in detail.\\n\",\"title\":\"Process Testing Directory Structure\",\"titles\":[\"AO Process Testing\"]},{\"href\":\"/process-development/testing#test-directory\",\"html\":\"\\n<p>The <code>test</code> directory contains the following files:</p>\\n<ul>\\n<li><strong>mocked-env</strong> - This directory contains the mocked environment files that are used to test the process. The mocked environment files are used to mock the environment variables that are used in the process. The mocked environment files are used to test the process in different environments.</li>\\n<li><strong>setup.lua</strong> - This file is used to set up the AO Testing Suite. The setup file is used to set up the AO Testing Suite before running the tests. The setup file is used to set up the environment variables that are used in the process.</li>\\n<li><strong>process_test.lua</strong> - This file contains the actual test script and cases for the process.</li>\\n</ul>\\n\",\"id\":\"site/pages/process-development/testing.mdx#test-directory\",\"isPage\":false,\"text\":\"\\nThe test directory contains the following files:\\n\\nmocked-env - This directory contains the mocked environment files that are used to test the process. The mocked environment files are used to mock the environment variables that are used in the process. The mocked environment files are used to test the process in different environments.\\nsetup.lua - This file is used to set up the AO Testing Suite. The setup file is used to set up the AO Testing Suite before running the tests. The setup file is used to set up the environment variables that are used in the process.\\nprocess_test.lua - This file contains the actual test script and cases for the process.\\n\\n\",\"title\":\"Test Directory\",\"titles\":[\"AO Process Testing\"]},{\"href\":\"/process-development/testing#writing-tests\",\"html\":\"\\n<p>Now that you have a basic understanding of the directory structure of the process, let&#x27;s write some tests for the process.</p>\\n\",\"id\":\"site/pages/process-development/testing.mdx#writing-tests\",\"isPage\":false,\"text\":\"\\nNow that you have a basic understanding of the directory structure of the process, let&#x27;s write some tests for the process.\\n\",\"title\":\"Writing tests\",\"titles\":[\"AO Process Testing\"]},{\"href\":\"/process-development/testing#writing-a-test-case\",\"html\":\"\\n<p>To write a test case for the process, you need to create a new test case in the <code>process_test.lua</code> file. The test case should be written using the Busted syntax.</p>\\n<aside data-callout=\\\"tip\\\"><p>Create Ao dApp generates a sample test case for the process. You can modify the sample test case to write your own test cases.</p></aside>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused has-highlighted\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"process-name/src/test/process_test.lua\\\" data-lang=\\\"lua\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">---</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">@diagnostic</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> disable:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> duplicate-set-field</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">require</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;test.setup&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)()</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">_G</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">IsInUnitTest</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    =</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> true</span><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\"> -- set this per test file to keep ao.send() from doing anything</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">_G</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">VerboseTests</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    =</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 2</span><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    -- how much logging to see (0 - none at all, 1 - important ones, 2 - everything)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">-- optional logging function that allows for different verbosity levels</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">_G</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">printVerb</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">       =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> function</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(level)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    level </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> level </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">or</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 2</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> function</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(...) </span><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">-- define here as global so we can use it in application code too</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        if</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> _G</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">VerboseTests</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> &gt;=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> level </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">then</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> print</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">table.unpack</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({ </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">...</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> })) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">end</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    end</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">end</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">-- Require the process library and the process file</span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">local</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> process      </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> require</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;process_lib&quot; </span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">-- Define initial state</span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">_G</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Version</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;1.0.0&quot; </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">_G</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Balances</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> _G</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Balances</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> or</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { [</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;0x123&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 1000</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> } </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">_G</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">TotalSupply</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> _G</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">TotalSupply</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> or</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 1000</span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">_G</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Name</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;test token&quot; </span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">-- This function resets the global variables to their initial state</span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">local</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> resetGlobals</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> function</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">  _G</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Version</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;1.0.0&quot; </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">  _G</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Balances</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> _G</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Balances</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> or</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { [</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;0x123&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 1000</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> } </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">  _G</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">TotalSupply</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> _G</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">TotalSupply</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> or</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 1000</span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">  _G</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Name</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;test token&quot; </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">end</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">describe</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;token process&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">function</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">    setup</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">function</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">        -- Mock the sendReply function</span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        process.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">sendReply</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> function</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(message) </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> message </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        end</span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    end</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">    describe</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;getBalance&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">function</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">        it</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;should return correct Balance&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">function</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            local</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> message </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                From </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;0x123&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                Action </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;Balance&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                Tags </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {} </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            } </span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            local</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> response </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> process.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">getBalance</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(message) </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">            assert</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">are</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">same</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">1000</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, response.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Balance</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">            -- reset globals</span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">            resetGlobals</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        end</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    end</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">end</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span></span></code></pre>\\n\",\"id\":\"site/pages/process-development/testing.mdx#writing-a-test-case\",\"isPage\":false,\"text\":\"\\nTo write a test case for the process, you need to create a new test case in the process_test.lua file. The test case should be written using the Busted syntax.\\nCreate Ao dApp generates a sample test case for the process. You can modify the sample test case to write your own test cases.\\n---@diagnostic disable: duplicate-set-field\\nrequire(&quot;test.setup&quot;)()\\n \\n_G.IsInUnitTest    = true -- set this per test file to keep ao.send() from doing anything\\n_G.VerboseTests    = 2    -- how much logging to see (0 - none at all, 1 - important ones, 2 - everything)\\n-- optional logging function that allows for different verbosity levels\\n_G.printVerb       = function(level)\\n    level = level or 2\\n    return function(...) -- define here as global so we can use it in application code too\\n        if _G.VerboseTests &gt;= level then print(table.unpack({ ... })) end\\n    end\\nend\\n \\n \\n-- Require the process library and the process file\\nlocal process      = require &quot;process_lib&quot; \\n \\n-- Define initial state\\n_G.Version = &quot;1.0.0&quot; \\n_G.Balances = _G.Balances or { [&quot;0x123&quot;] = 1000 } \\n_G.TotalSupply = _G.TotalSupply or 1000\\n_G.Name = &quot;test token&quot; \\n \\n-- This function resets the global variables to their initial state\\nlocal resetGlobals = function() \\n  _G.Version = &quot;1.0.0&quot; \\n  _G.Balances = _G.Balances or { [&quot;0x123&quot;] = 1000 } \\n  _G.TotalSupply = _G.TotalSupply or 1000\\n  _G.Name = &quot;test token&quot; \\nend\\n \\ndescribe(&quot;token process&quot;, function() \\n    setup(function() \\n        -- Mock the sendReply function\\n        process.sendReply = function(message) \\n            return message \\n        end\\n    end) \\n \\n    describe(&quot;getBalance&quot;, function() \\n        it(&quot;should return correct Balance&quot;, function() \\n            local message = { \\n                From = &quot;0x123&quot;, \\n                Action = &quot;Balance&quot;, \\n                Tags = {} \\n            } \\n \\n            local response = process.getBalance(message) \\n            assert.are.same(1000, response.Balance) \\n \\n            -- reset globals\\n            resetGlobals() \\n        end) \\n    end) \\nend) \\n\",\"title\":\"Writing a test case\",\"titles\":[\"AO Process Testing\",\"Writing tests\"]},{\"href\":\"/process-development/testing#running-the-tests\",\"html\":\"\\n<aside data-callout=\\\"warning\\\"><strong data-callout-title=\\\"true\\\">Busted is required</strong><p>In order to write tests for AO processes, you need to have a basic understanding of Busted. You can learn more about Busted from the <a href=\\\"https://lunarmodules.github.io/busted/\\\">official documentation</a>.</p><p>Installing busted can be done using luarocks by running the following command:</p><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Terminal\\\" data-lang=\\\"bash\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">luarocks</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> install</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> busted</span></span></code></pre></aside>\\n<p>Create Ao dApp provides a test script that can be used to run the tests for the process. The test script is located in the <code>./ao/process-name/scripts</code> directory of the process.</p>\\n<p>To run the tests for the process, you need to run the test script using the following command from the project root:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Terminal\\\" data-lang=\\\"bash\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">cd</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> ao/process-name</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> &amp;&amp; </span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">./scripts/test.sh</span></span></code></pre>\\n<aside data-callout=\\\"tip\\\"><strong data-callout-title=\\\"true\\\">Handy Tip</strong><p>Create Ao dApp provides a shortcut to run the tests for the process. You can run the tests for the process using the following command from the project root:</p><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Terminal\\\" data-lang=\\\"bash\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">npm</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> run</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> myprocess:test</span></span></code></pre></aside>\",\"id\":\"site/pages/process-development/testing.mdx#running-the-tests\",\"isPage\":false,\"text\":\"\\nBusted is requiredIn order to write tests for AO processes, you need to have a basic understanding of Busted. You can learn more about Busted from the official documentation.Installing busted can be done using luarocks by running the following command:luarocks install busted\\nCreate Ao dApp provides a test script that can be used to run the tests for the process. The test script is located in the ./ao/process-name/scripts directory of the process.\\nTo run the tests for the process, you need to run the test script using the following command from the project root:\\ncd ao/process-name &amp;&amp; ./scripts/test.sh\\nHandy TipCreate Ao dApp provides a shortcut to run the tests for the process. You can run the tests for the process using the following command from the project root:npm run myprocess:test\",\"title\":\"Running the tests\",\"titles\":[\"AO Process Testing\",\"Writing tests\"]}]}],[\"index.32500403d89c5337ea48ad4b76cb327593e7afcba8d8846a4da926708d6bf5d2\",{\"mdx\":\"# Create Ao dApp\\n\\nThe create-ao-dapp provides a comprehensive boilerplate for setting up an AO process, including testing, modules, and amalgamation alongside a React application. This starter kit aims to simplify the development and deployment of AO processes by providing pre-configured setups and example processes.\\n\\n## Features\\n\\n- **Modular**: The create-ao-dapp is designed to be modular, allowing you to easily add and remove modules as needed.\\n- **Testing**: The create-ao-dapp includes a comprehensive testing suite, allowing you to test your AO processes with ease.\\n- **Amalgamation**: The create-ao-dapp includes an amalgamation tool, allowing you to easily combine multiple AO processes into a single process.\\n- **Permaweb Deployment**: The create-ao-dapp includes a deployment script that allows you to deploy your AO processes to the Permaweb with ease.\",\"document\":[{\"href\":\"/introduction#create-ao-dapp\",\"html\":\"</header>\\n<p>The create-ao-dapp provides a comprehensive boilerplate for setting up an AO process, including testing, modules, and amalgamation alongside a React application. This starter kit aims to simplify the development and deployment of AO processes by providing pre-configured setups and example processes.</p>\\n\",\"id\":\"site/pages/introduction.mdx#create-ao-dapp\",\"isPage\":true,\"text\":\"\\nThe create-ao-dapp provides a comprehensive boilerplate for setting up an AO process, including testing, modules, and amalgamation alongside a React application. This starter kit aims to simplify the development and deployment of AO processes by providing pre-configured setups and example processes.\\n\",\"title\":\"Create Ao dApp\",\"titles\":[]},{\"href\":\"/introduction#features\",\"html\":\"\\n<ul>\\n<li><strong>Modular</strong>: The create-ao-dapp is designed to be modular, allowing you to easily add and remove modules as needed.</li>\\n<li><strong>Testing</strong>: The create-ao-dapp includes a comprehensive testing suite, allowing you to test your AO processes with ease.</li>\\n<li><strong>Amalgamation</strong>: The create-ao-dapp includes an amalgamation tool, allowing you to easily combine multiple AO processes into a single process.</li>\\n<li><strong>Permaweb Deployment</strong>: The create-ao-dapp includes a deployment script that allows you to deploy your AO processes to the Permaweb with ease.</li>\\n</ul>\",\"id\":\"site/pages/introduction.mdx#features\",\"isPage\":false,\"text\":\"\\n\\nModular: The create-ao-dapp is designed to be modular, allowing you to easily add and remove modules as needed.\\nTesting: The create-ao-dapp includes a comprehensive testing suite, allowing you to test your AO processes with ease.\\nAmalgamation: The create-ao-dapp includes an amalgamation tool, allowing you to easily combine multiple AO processes into a single process.\\nPermaweb Deployment: The create-ao-dapp includes a deployment script that allows you to deploy your AO processes to the Permaweb with ease.\\n\",\"title\":\"Features\",\"titles\":[\"Create Ao dApp\"]}]}],[\"index.d3e26c13f79dece545deb7b3c820fbf4193646048772966b5774971240f12006\",{\"mdx\":\"# Frontend Development\\n\\nThe provided frontend is a Vite React application. It is a single-page application (SPA) that provides a user interface for the backend services. The frontend is built using the following technologies:\\n\\n- [React](https://reactjs.org/)\\n- [Vite](https://vitejs.dev/)\\n- [TypeScript](https://www.typescriptlang.org/)\\n\\nExtra libraries used in the frontend that we recommend you use:\\n- [Permaweb AoConnect](https://www.npmjs.com/package/@permaweb/aoconnect)\\n- [Arweave Wallet Kit](https://github.com/labscommunity/arweave-wallet-kit)\\n- [TanStack Query](https://tanstack.com/query/latest)\\n\\n:::tip[Handy Tip]\\nTanStack Query is a powerful and flexible data fetching library for React. It is highly recommended to use TanStack Query for data fetching in your frontend. This will enable caching, pagination, and other features out of the box.\\n:::\\n\\n## Directory Structure\\n\\nThe frontend codebase is present in the `apps/frontend` directory. The frontend codebase is structured as follows:\\n\\n```\\napps/frontend/         # Your frontend application.\\n├──public/             # Your project's public assets.\\n├──src/                # Your project's source code.\\n│  ├── components/    # React components.\\n│  │  └── counter.tsx # Example of a React component.\\n│  ├── constants/         # Constants used in the frontend. This will include injected backend process.\\n|  |   └── counter_process.ts # Example of a backend process.\\n|  ├── App.css       # CSS file for the App component.\\n│  ├── App.tsx       # The main React component.\\n│  ├── index.css     # CSS file for the index.html file.\\n│  ├── main.tsx     # The main entry point for the React application.\\n|  └── vite-env.d.ts    # Vite environment types.\\n├── .eslintrc.cjs\\n├── .gitignore\\n├── index.html        # The main HTML file.\\n├── package.json\\n├── README.md\\n├── vite.config.ts   # Vite configuration file.\\n└── tsconfig.json\\n```\\n\\n:::info\\nThe frontend codebase comes with a sample `counter` component that demonstrates how to use the backend process in the frontend. You can use this as a reference to build your own components.\\n:::\",\"document\":[{\"href\":\"/frontend-development/architecture#frontend-development\",\"html\":\"</header>\\n<p>The provided frontend is a Vite React application. It is a single-page application (SPA) that provides a user interface for the backend services. The frontend is built using the following technologies:</p>\\n<ul>\\n<li><a href=\\\"https://reactjs.org/\\\">React</a></li>\\n<li><a href=\\\"https://vitejs.dev/\\\">Vite</a></li>\\n<li><a href=\\\"https://www.typescriptlang.org/\\\">TypeScript</a></li>\\n</ul>\\n<p>Extra libraries used in the frontend that we recommend you use:</p>\\n<ul>\\n<li><a href=\\\"https://www.npmjs.com/package/@permaweb/aoconnect\\\">Permaweb AoConnect</a></li>\\n<li><a href=\\\"https://github.com/labscommunity/arweave-wallet-kit\\\">Arweave Wallet Kit</a></li>\\n<li><a href=\\\"https://tanstack.com/query/latest\\\">TanStack Query</a></li>\\n</ul>\\n<aside data-callout=\\\"tip\\\"><strong data-callout-title=\\\"true\\\">Handy Tip</strong><p>TanStack Query is a powerful and flexible data fetching library for React. It is highly recommended to use TanStack Query for data fetching in your frontend. This will enable caching, pagination, and other features out of the box.</p></aside>\\n\",\"id\":\"site/pages/frontend-development/architecture.mdx#frontend-development\",\"isPage\":true,\"text\":\"\\nThe provided frontend is a Vite React application. It is a single-page application (SPA) that provides a user interface for the backend services. The frontend is built using the following technologies:\\n\\nReact\\nVite\\nTypeScript\\n\\nExtra libraries used in the frontend that we recommend you use:\\n\\nPermaweb AoConnect\\nArweave Wallet Kit\\nTanStack Query\\n\\nHandy TipTanStack Query is a powerful and flexible data fetching library for React. It is highly recommended to use TanStack Query for data fetching in your frontend. This will enable caching, pagination, and other features out of the box.\\n\",\"title\":\"Frontend Development\",\"titles\":[]},{\"href\":\"/frontend-development/architecture#directory-structure\",\"html\":\"\\n<p>The frontend codebase is present in the <code>apps/frontend</code> directory. The frontend codebase is structured as follows:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span>apps/frontend/         # Your frontend application.</span></span>\\n<span class=\\\"line\\\"><span>├──public/             # Your project&#x27;s public assets.</span></span>\\n<span class=\\\"line\\\"><span>├──src/                # Your project&#x27;s source code.</span></span>\\n<span class=\\\"line\\\"><span>│  ├── components/    # React components.</span></span>\\n<span class=\\\"line\\\"><span>│  │  └── counter.tsx # Example of a React component.</span></span>\\n<span class=\\\"line\\\"><span>│  ├── constants/         # Constants used in the frontend. This will include injected backend process.</span></span>\\n<span class=\\\"line\\\"><span>|  |   └── counter_process.ts # Example of a backend process.</span></span>\\n<span class=\\\"line\\\"><span>|  ├── App.css       # CSS file for the App component.</span></span>\\n<span class=\\\"line\\\"><span>│  ├── App.tsx       # The main React component.</span></span>\\n<span class=\\\"line\\\"><span>│  ├── index.css     # CSS file for the index.html file.</span></span>\\n<span class=\\\"line\\\"><span>│  ├── main.tsx     # The main entry point for the React application.</span></span>\\n<span class=\\\"line\\\"><span>|  └── vite-env.d.ts    # Vite environment types.</span></span>\\n<span class=\\\"line\\\"><span>├── .eslintrc.cjs</span></span>\\n<span class=\\\"line\\\"><span>├── .gitignore</span></span>\\n<span class=\\\"line\\\"><span>├── index.html        # The main HTML file.</span></span>\\n<span class=\\\"line\\\"><span>├── package.json</span></span>\\n<span class=\\\"line\\\"><span>├── README.md</span></span>\\n<span class=\\\"line\\\"><span>├── vite.config.ts   # Vite configuration file.</span></span>\\n<span class=\\\"line\\\"><span>└── tsconfig.json</span></span></code></pre>\\n<aside data-callout=\\\"info\\\"><p>The frontend codebase comes with a sample <code>counter</code> component that demonstrates how to use the backend process in the frontend. You can use this as a reference to build your own components.</p></aside>\",\"id\":\"site/pages/frontend-development/architecture.mdx#directory-structure\",\"isPage\":false,\"text\":\"\\nThe frontend codebase is present in the apps/frontend directory. The frontend codebase is structured as follows:\\napps/frontend/         # Your frontend application.\\n├──public/             # Your project&#x27;s public assets.\\n├──src/                # Your project&#x27;s source code.\\n│  ├── components/    # React components.\\n│  │  └── counter.tsx # Example of a React component.\\n│  ├── constants/         # Constants used in the frontend. This will include injected backend process.\\n|  |   └── counter_process.ts # Example of a backend process.\\n|  ├── App.css       # CSS file for the App component.\\n│  ├── App.tsx       # The main React component.\\n│  ├── index.css     # CSS file for the index.html file.\\n│  ├── main.tsx     # The main entry point for the React application.\\n|  └── vite-env.d.ts    # Vite environment types.\\n├── .eslintrc.cjs\\n├── .gitignore\\n├── index.html        # The main HTML file.\\n├── package.json\\n├── README.md\\n├── vite.config.ts   # Vite configuration file.\\n└── tsconfig.json\\nThe frontend codebase comes with a sample counter component that demonstrates how to use the backend process in the frontend. You can use this as a reference to build your own components.\",\"title\":\"Directory Structure\",\"titles\":[\"Frontend Development\"]}]}],[\"index.5d50d22a8a53c48ea2b243da7a23502ac92d9ee374eb8855512bd669dfb6bdb0\",{\"mdx\":\"# Connecting to Backend [In this section, we will learn how to connect the frontend to the backend processes.]\\n\\n## Arweave Wallet Kit\\n\\n- [Arweave Wallet Kit](https://github.com/labscommunity/arweave-wallet-kit)\\n\\nReact Hooks and Components for better interaction with Arweave wallets. Modular, can support any Arweave-based wallet.\\n\\nBy default, Create Ao dApp comes with Arweave Wallet Kit pre-installed. You can use it to interact with Arweave wallets in your frontend.\\n\\nConfiguration of the Arweave Wallet Kit is present in `apps/frontend/src/main.tsx`. You can modify the configuration as per your requirements.\\n\\n```tsx [apps/frontend/src/main.tsx]\\nimport { QueryClient, QueryClientProvider } from \\\"@tanstack/react-query\\\";\\nimport { ArweaveWalletKit } from \\\"arweave-wallet-kit\\\"; // [!code hl] // [!code focus]\\nimport React from \\\"react\\\";\\nimport ReactDOM from \\\"react-dom/client\\\";\\nimport App from \\\"./App.tsx\\\";\\nimport \\\"./index.css\\\";\\n\\n// Create a React Query client \\nconst queryClient = new QueryClient();\\n\\n// biome-ignore lint/style/noNonNullAssertion: <explanation>\\nReactDOM.createRoot(document.getElementById(\\\"root\\\")!).render(\\n\\t<React.StrictMode>\\n\\t\\t<ArweaveWalletKit // [!code hl] // [!code focus]\\n\\t\\t\\tconfig={{// [!code hl] // [!code focus]\\n\\t\\t\\t\\tpermissions: [\\\"SIGN_TRANSACTION\\\", \\\"ACCESS_ADDRESS\\\"], // [!code hl] // [!code focus]\\n\\t\\t\\t\\tensurePermissions: true, // [!code hl] // [!code focus]\\n\\t\\t\\t}} // [!code hl] // [!code focus]\\n\\t\\t\\ttheme={{ // [!code hl] // [!code focus]\\n\\t\\t\\t\\tdisplayTheme: \\\"light\\\", // [!code hl] // [!code focus]\\n\\t\\t\\t}} // [!code hl] // [!code focus]\\n\\t\\t> // [!code hl] // [!code focus]\\n\\t\\t\\t<QueryClientProvider client={queryClient}>\\n\\t\\t\\t\\t<App />\\n\\t\\t\\t</QueryClientProvider>\\n\\t\\t</ArweaveWalletKit> // [!code hl] // [!code focus]\\n\\t</React.StrictMode>,\\n);\\n```\\n\\n## TanStack Query\\n\\n[TanStack Query](https://tanstack.com/query/latest) is a powerful and flexible data fetching library for React. It is highly recommended to use TanStack Query for data fetching in your frontend. This will enable caching, pagination, and other features out of the box.\\n\\nBy default, Create Ao dApp comes with TanStack Query pre-installed. You can use it to fetch data from the backend processes.\\n\\nConfiguration of the QueryClient is present in `apps/frontend/src/main.tsx`. You can modify the configuration as per your requirements.\\n\\n```tsx [apps/frontend/src/main.tsx]\\nimport { QueryClient, QueryClientProvider } from \\\"@tanstack/react-query\\\"; // [!code hl] // [!code focus]\\nimport { ArweaveWalletKit } from \\\"arweave-wallet-kit\\\";\\nimport React from \\\"react\\\";\\nimport ReactDOM from \\\"react-dom/client\\\";\\nimport App from \\\"./App.tsx\\\";\\nimport \\\"./index.css\\\";\\n\\n// Create a React Query client // [!code hl] // [!code focus]\\nconst queryClient = new QueryClient(); // [!code hl] // [!code focus]\\n\\n// biome-ignore lint/style/noNonNullAssertion: <explanation>\\nReactDOM.createRoot(document.getElementById(\\\"root\\\")!).render(\\n\\t<React.StrictMode>\\n\\t\\t<ArweaveWalletKit\\n\\t\\t\\tconfig={{\\n\\t\\t\\t\\tpermissions: [\\\"SIGN_TRANSACTION\\\", \\\"ACCESS_ADDRESS\\\"],\\n\\t\\t\\t\\tensurePermissions: true,\\n\\t\\t\\t}}\\n\\t\\t\\ttheme={{\\n\\t\\t\\t\\tdisplayTheme: \\\"light\\\",\\n\\t\\t\\t}}\\n\\t\\t>\\n\\t\\t\\t<QueryClientProvider client={queryClient}> // [!code hl] // [!code focus]\\n\\t\\t\\t\\t<App />\\n\\t\\t\\t</QueryClientProvider> // [!code hl] // [!code focus]\\n\\t\\t</ArweaveWalletKit>\\n\\t</React.StrictMode>,\\n);\\n```\\n\\n## Interacting with Backend Processes\\n\\n:::tip[Handy Tip]\\nThe backend processes are injected into the frontend as constants. You can access these processes in the frontend by importing them from the `constants` directory.\\n:::\\n\\nBy default the Create Ao dApp comes with a sample `counter` component that demonstrates how to use the backend process in the frontend. You can use this as a reference to build your own components.\\n\\n- The backend process address is present in `apps/frontend/src/constants/counter_process.ts`. You can import this process in your components and use it as per your requirements.\\n\\n- The counter component is present in `apps/frontend/src/components/counter.tsx`. You can check out this component to understand how to use the backend process in the frontend.\\n\\n## Reading Data from Backend Process\\n\\n- It imports the backend process from the `constants` directory.\\n- It uses the `useQuery` hook from TanStack Query to fetch the counter value from the backend process.\\n\\n```tsx [apps/frontend/src/components/counter.tsx]\\nimport { COUNTER } from \\\"../constants/counter_process\\\";\\nimport { useMutation, useQuery, useQueryClient } from \\\"@tanstack/react-query\\\";\\n\\nconst {\\n\\t\\tdata: counter,\\n\\t\\terror,\\n\\t\\tisLoading,\\n\\t\\tisFetching,\\n\\t} = useQuery({\\n\\t\\tqueryKey: [\\\"counter\\\"],\\n\\t\\tqueryFn: async () => {\\n\\t\\t\\tconst dryrunResult = await dryrun({\\n\\t\\t\\t\\tprocess: COUNTER,\\n\\t\\t\\t\\ttags: [\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tname: \\\"Action\\\",\\n\\t\\t\\t\\t\\t\\tvalue: \\\"Info\\\",\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t],\\n\\t\\t\\t});\\n\\n\\t\\t\\tif (dryrunResult.Messages[0].Data) {\\n\\t\\t\\t\\treturn JSON.parse(dryrunResult.Messages[0].Data);\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn undefined;\\n\\t\\t},\\n\\t});\\n```\\n\\nUsing react-query hooks, you can fetch data from the backend processes and update the UI based on the fetched data. The `queryFn` function is calling the `dryrun` function from the `@permaweb/aoconnect` library to fetch the counter value from the backend process and then returns the counter value.\\n\\n:::tip[Handy Tip]\\nSome cool features of TanStack Query:\\n- **Caching**: Automatically cache data and keep it up to date.\\n- **isLoading**: A boolean that is `true` when the query is in a loading state.\\n- **isFetching**: A boolean that is `true` when the query is fetching data.\\n- **error**: An error object if the query failed.\\n:::\\n\\n## Sending Data to Backend Process\\n\\nYou can always send messages using `useMutation` hook provided by TanStack Query. The `useMutation` hook is used to send messages to the backend processes. You can use this hook to send messages to the backend processes and update the UI based on the response.\\n\\nAn example is the Increase button in the `counter` component. When the Increase button is clicked, it sends a message to the backend process to increase the counter value.\\n\\n```tsx [apps/frontend/src/components/counter.tsx]\\nconst increaseCounter = useMutation({\\n\\t\\tmutationKey: [\\\"IncreaseCounter\\\"],\\n\\t\\tmutationFn: async () => {\\n\\t\\t\\tconst messageId = await message({\\n\\t\\t\\t\\tprocess: COUNTER,\\n\\t\\t\\t\\ttags: [\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tname: \\\"Action\\\",\\n\\t\\t\\t\\t\\t\\tvalue: \\\"IncreaseCounter\\\",\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t],\\n\\t\\t\\t\\tdata: \\\"\\\",\\n\\t\\t\\t\\tsigner: createDataItemSigner(window.arweaveWallet),\\n\\t\\t\\t});\\n\\n\\t\\t\\tconst messageResult = await result({\\n\\t\\t\\t\\tprocess: COUNTER,\\n\\t\\t\\t\\tmessage: messageId,\\n\\t\\t\\t});\\n\\n\\t\\t\\tif (messageResult.Messages[0].Data) {\\n\\t\\t\\t\\treturn JSON.parse(messageResult.Messages[0].Data);\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn undefined;\\n\\t\\t},\\n\\t\\tonSuccess: () => {\\n\\t\\t\\tqueryClient.invalidateQueries();\\n\\t\\t},\\n\\t});\\n```\\n\\nThe `mutationFn` function is calling the `message` function from the `@permaweb/aoconnect` library to send a message to the backend process to increase the counter value. The `onSuccess` function is used to invalidate the query cache so that the UI can be updated with the new counter value.\\n\\n:::tip[Handy Tip]\\nSome cool features of TanStack Query:\\n- **mutationFn**: A function that sends a message to the backend process.\\n- **onSuccess**: A function that is called when the mutation is successful.\\n- **invalidateQueries**: A function that invalidates the query cache and re-fetches the data.\\n:::\",\"document\":[{\"href\":\"/frontend-development/connecting-to-backend#connecting-to-backend\",\"html\":\"<div role=\\\"doc-subtitle\\\">In this section, we will learn how to connect the frontend to the backend processes.</div></header>\\n\",\"id\":\"site/pages/frontend-development/connecting-to-backend.mdx#connecting-to-backend\",\"isPage\":true,\"text\":\"In this section, we will learn how to connect the frontend to the backend processes.\\n\",\"title\":\"Connecting to Backend\",\"titles\":[]},{\"href\":\"/frontend-development/connecting-to-backend#arweave-wallet-kit\",\"html\":\"\\n<ul>\\n<li><a href=\\\"https://github.com/labscommunity/arweave-wallet-kit\\\">Arweave Wallet Kit</a></li>\\n</ul>\\n<p>React Hooks and Components for better interaction with Arweave wallets. Modular, can support any Arweave-based wallet.</p>\\n<p>By default, Create Ao dApp comes with Arweave Wallet Kit pre-installed. You can use it to interact with Arweave wallets in your frontend.</p>\\n<p>Configuration of the Arweave Wallet Kit is present in <code>apps/frontend/src/main.tsx</code>. You can modify the configuration as per your requirements.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused has-highlighted\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"apps/frontend/src/main.tsx\\\" data-lang=\\\"tsx\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { QueryClient, QueryClientProvider } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;@tanstack/react-query&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { ArweaveWalletKit } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;arweave-wallet-kit&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">; </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> React </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;react&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> ReactDOM </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;react-dom/client&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> App </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;./App.tsx&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;./index.css&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Create a React Query client </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> queryClient</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> new</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> QueryClient</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">();</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// biome-ignore lint/style/noNonNullAssertion: &lt;explanation&gt;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">ReactDOM.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">createRoot</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(document.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">getElementById</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;root&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">!</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">).</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">render</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t&lt;</span><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">React.StrictMode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">&gt;</span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t&lt;</span><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">ArweaveWalletKit</span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">\\t\\t\\tconfig</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#F47067\\\">{</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\tpermissions: [</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;SIGN_TRANSACTION&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;ACCESS_ADDRESS&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">], </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\tensurePermissions: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">true</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t}</span><span style=\\\"color:#24292E;--shiki-dark:#F47067\\\">}</span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">\\t\\t\\ttheme</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#F47067\\\">{</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{ </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\tdisplayTheme: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;light&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t}</span><span style=\\\"color:#24292E;--shiki-dark:#F47067\\\">}</span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t&gt;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t&lt;</span><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">QueryClientProvider</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\"> client</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#F47067\\\">{</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">queryClient</span><span style=\\\"color:#24292E;--shiki-dark:#F47067\\\">}</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">&gt;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\t&lt;</span><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">App</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> /&gt;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t&lt;/</span><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">QueryClientProvider</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">&gt;</span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t&lt;/</span><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">ArweaveWalletKit</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">&gt;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t&lt;/</span><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">React.StrictMode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">&gt;,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">);</span></span></code></pre>\\n\",\"id\":\"site/pages/frontend-development/connecting-to-backend.mdx#arweave-wallet-kit\",\"isPage\":false,\"text\":\"\\n\\nArweave Wallet Kit\\n\\nReact Hooks and Components for better interaction with Arweave wallets. Modular, can support any Arweave-based wallet.\\nBy default, Create Ao dApp comes with Arweave Wallet Kit pre-installed. You can use it to interact with Arweave wallets in your frontend.\\nConfiguration of the Arweave Wallet Kit is present in apps/frontend/src/main.tsx. You can modify the configuration as per your requirements.\\nimport { QueryClient, QueryClientProvider } from &quot;@tanstack/react-query&quot;;\\nimport { ArweaveWalletKit } from &quot;arweave-wallet-kit&quot;; \\nimport React from &quot;react&quot;;\\nimport ReactDOM from &quot;react-dom/client&quot;;\\nimport App from &quot;./App.tsx&quot;;\\nimport &quot;./index.css&quot;;\\n \\n// Create a React Query client \\nconst queryClient = new QueryClient();\\n \\n// biome-ignore lint/style/noNonNullAssertion: &lt;explanation&gt;\\nReactDOM.createRoot(document.getElementById(&quot;root&quot;)!).render(\\n\\t&lt;React.StrictMode&gt;\\n\\t\\t&lt;ArweaveWalletKit\\n\\t\\t\\tconfig={{\\n\\t\\t\\t\\tpermissions: [&quot;SIGN_TRANSACTION&quot;, &quot;ACCESS_ADDRESS&quot;], \\n\\t\\t\\t\\tensurePermissions: true, \\n\\t\\t\\t}}\\n\\t\\t\\ttheme={{ \\n\\t\\t\\t\\tdisplayTheme: &quot;light&quot;, \\n\\t\\t\\t}}\\n\\t\\t&gt;\\n\\t\\t\\t&lt;QueryClientProvider client={queryClient}&gt;\\n\\t\\t\\t\\t&lt;App /&gt;\\n\\t\\t\\t&lt;/QueryClientProvider&gt;\\n\\t\\t&lt;/ArweaveWalletKit&gt;\\n\\t&lt;/React.StrictMode&gt;,\\n);\\n\",\"title\":\"Arweave Wallet Kit\",\"titles\":[\"Connecting to Backend\"]},{\"href\":\"/frontend-development/connecting-to-backend#tanstack-query\",\"html\":\"\\n<p><a href=\\\"https://tanstack.com/query/latest\\\">TanStack Query</a> is a powerful and flexible data fetching library for React. It is highly recommended to use TanStack Query for data fetching in your frontend. This will enable caching, pagination, and other features out of the box.</p>\\n<p>By default, Create Ao dApp comes with TanStack Query pre-installed. You can use it to fetch data from the backend processes.</p>\\n<p>Configuration of the QueryClient is present in <code>apps/frontend/src/main.tsx</code>. You can modify the configuration as per your requirements.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused has-highlighted\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"apps/frontend/src/main.tsx\\\" data-lang=\\\"tsx\\\"><code><span class=\\\"line focused highlighted\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { QueryClient, QueryClientProvider } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;@tanstack/react-query&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">; </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { ArweaveWalletKit } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;arweave-wallet-kit&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> React </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;react&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> ReactDOM </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;react-dom/client&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> App </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;./App.tsx&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;./index.css&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Create a React Query client</span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> queryClient</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> new</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> QueryClient</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(); </span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// biome-ignore lint/style/noNonNullAssertion: &lt;explanation&gt;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">ReactDOM.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">createRoot</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(document.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">getElementById</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;root&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">!</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">).</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">render</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t&lt;</span><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">React.StrictMode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">&gt;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t&lt;</span><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">ArweaveWalletKit</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">\\t\\t\\tconfig</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#F47067\\\">{</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\tpermissions: [</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;SIGN_TRANSACTION&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;ACCESS_ADDRESS&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\tensurePermissions: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">true</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t}</span><span style=\\\"color:#24292E;--shiki-dark:#F47067\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">\\t\\t\\ttheme</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#F47067\\\">{</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\tdisplayTheme: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;light&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t}</span><span style=\\\"color:#24292E;--shiki-dark:#F47067\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t&gt;</span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t&lt;</span><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">QueryClientProvider</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\"> client</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#F47067\\\">{</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">queryClient</span><span style=\\\"color:#24292E;--shiki-dark:#F47067\\\">}</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">&gt;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\t&lt;</span><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">App</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> /&gt;</span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t&lt;/</span><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">QueryClientProvider</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">&gt;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t&lt;/</span><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">ArweaveWalletKit</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">&gt;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t&lt;/</span><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">React.StrictMode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">&gt;,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">);</span></span></code></pre>\\n\",\"id\":\"site/pages/frontend-development/connecting-to-backend.mdx#tanstack-query\",\"isPage\":false,\"text\":\"\\nTanStack Query is a powerful and flexible data fetching library for React. It is highly recommended to use TanStack Query for data fetching in your frontend. This will enable caching, pagination, and other features out of the box.\\nBy default, Create Ao dApp comes with TanStack Query pre-installed. You can use it to fetch data from the backend processes.\\nConfiguration of the QueryClient is present in apps/frontend/src/main.tsx. You can modify the configuration as per your requirements.\\nimport { QueryClient, QueryClientProvider } from &quot;@tanstack/react-query&quot;; \\nimport { ArweaveWalletKit } from &quot;arweave-wallet-kit&quot;;\\nimport React from &quot;react&quot;;\\nimport ReactDOM from &quot;react-dom/client&quot;;\\nimport App from &quot;./App.tsx&quot;;\\nimport &quot;./index.css&quot;;\\n \\n// Create a React Query client\\nconst queryClient = new QueryClient(); \\n \\n// biome-ignore lint/style/noNonNullAssertion: &lt;explanation&gt;\\nReactDOM.createRoot(document.getElementById(&quot;root&quot;)!).render(\\n\\t&lt;React.StrictMode&gt;\\n\\t\\t&lt;ArweaveWalletKit\\n\\t\\t\\tconfig={{\\n\\t\\t\\t\\tpermissions: [&quot;SIGN_TRANSACTION&quot;, &quot;ACCESS_ADDRESS&quot;],\\n\\t\\t\\t\\tensurePermissions: true,\\n\\t\\t\\t}}\\n\\t\\t\\ttheme={{\\n\\t\\t\\t\\tdisplayTheme: &quot;light&quot;,\\n\\t\\t\\t}}\\n\\t\\t&gt;\\n\\t\\t\\t&lt;QueryClientProvider client={queryClient}&gt;\\n\\t\\t\\t\\t&lt;App /&gt;\\n\\t\\t\\t&lt;/QueryClientProvider&gt;\\n\\t\\t&lt;/ArweaveWalletKit&gt;\\n\\t&lt;/React.StrictMode&gt;,\\n);\\n\",\"title\":\"TanStack Query\",\"titles\":[\"Connecting to Backend\"]},{\"href\":\"/frontend-development/connecting-to-backend#interacting-with-backend-processes\",\"html\":\"\\n<aside data-callout=\\\"tip\\\"><strong data-callout-title=\\\"true\\\">Handy Tip</strong><p>The backend processes are injected into the frontend as constants. You can access these processes in the frontend by importing them from the <code>constants</code> directory.</p></aside>\\n<p>By default the Create Ao dApp comes with a sample <code>counter</code> component that demonstrates how to use the backend process in the frontend. You can use this as a reference to build your own components.</p>\\n<ul>\\n<li>\\n<p>The backend process address is present in <code>apps/frontend/src/constants/counter_process.ts</code>. You can import this process in your components and use it as per your requirements.</p>\\n</li>\\n<li>\\n<p>The counter component is present in <code>apps/frontend/src/components/counter.tsx</code>. You can check out this component to understand how to use the backend process in the frontend.</p>\\n</li>\\n</ul>\\n\",\"id\":\"site/pages/frontend-development/connecting-to-backend.mdx#interacting-with-backend-processes\",\"isPage\":false,\"text\":\"\\nHandy TipThe backend processes are injected into the frontend as constants. You can access these processes in the frontend by importing them from the constants directory.\\nBy default the Create Ao dApp comes with a sample counter component that demonstrates how to use the backend process in the frontend. You can use this as a reference to build your own components.\\n\\n\\nThe backend process address is present in apps/frontend/src/constants/counter_process.ts. You can import this process in your components and use it as per your requirements.\\n\\n\\nThe counter component is present in apps/frontend/src/components/counter.tsx. You can check out this component to understand how to use the backend process in the frontend.\\n\\n\\n\",\"title\":\"Interacting with Backend Processes\",\"titles\":[\"Connecting to Backend\"]},{\"href\":\"/frontend-development/connecting-to-backend#reading-data-from-backend-process\",\"html\":\"\\n<ul>\\n<li>It imports the backend process from the <code>constants</code> directory.</li>\\n<li>It uses the <code>useQuery</code> hook from TanStack Query to fetch the counter value from the backend process.</li>\\n</ul>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"apps/frontend/src/components/counter.tsx\\\" data-lang=\\\"tsx\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { COUNTER } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;../constants/counter_process&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { useMutation, useQuery, useQueryClient } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;@tanstack/react-query&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">\\t\\tdata</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">counter</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">\\t\\terror</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">\\t\\tisLoading</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">\\t\\tisFetching</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t} </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> useQuery</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\tqueryKey: [</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;counter&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">\\t\\tqueryFn</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">async</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> () </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=&gt;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">\\t\\t\\tconst</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> dryrunResult</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> dryrun</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\tprocess: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">COUNTER</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\ttags: [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\t\\t{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\t\\t\\tname: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;Action&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\t\\t\\tvalue: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;Info&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\t\\t},</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\t],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t});</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">\\t\\t\\tif</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (dryrunResult.Messages[</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">0</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">].Data) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">\\t\\t\\t\\treturn</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> JSON</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">parse</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(dryrunResult.Messages[</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">0</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">].Data);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">\\t\\t\\treturn</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> undefined</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t},</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t});</span></span></code></pre>\\n<p>Using react-query hooks, you can fetch data from the backend processes and update the UI based on the fetched data. The <code>queryFn</code> function is calling the <code>dryrun</code> function from the <code>@permaweb/aoconnect</code> library to fetch the counter value from the backend process and then returns the counter value.</p>\\n<aside data-callout=\\\"tip\\\"><strong data-callout-title=\\\"true\\\">Handy Tip</strong><p>Some cool features of TanStack Query:</p><ul>\\n<li><strong>Caching</strong>: Automatically cache data and keep it up to date.</li>\\n<li><strong>isLoading</strong>: A boolean that is <code>true</code> when the query is in a loading state.</li>\\n<li><strong>isFetching</strong>: A boolean that is <code>true</code> when the query is fetching data.</li>\\n<li><strong>error</strong>: An error object if the query failed.</li>\\n</ul></aside>\\n\",\"id\":\"site/pages/frontend-development/connecting-to-backend.mdx#reading-data-from-backend-process\",\"isPage\":false,\"text\":\"\\n\\nIt imports the backend process from the constants directory.\\nIt uses the useQuery hook from TanStack Query to fetch the counter value from the backend process.\\n\\nimport { COUNTER } from &quot;../constants/counter_process&quot;;\\nimport { useMutation, useQuery, useQueryClient } from &quot;@tanstack/react-query&quot;;\\n \\nconst {\\n\\t\\tdata: counter,\\n\\t\\terror,\\n\\t\\tisLoading,\\n\\t\\tisFetching,\\n\\t} = useQuery({\\n\\t\\tqueryKey: [&quot;counter&quot;],\\n\\t\\tqueryFn: async () =&gt; {\\n\\t\\t\\tconst dryrunResult = await dryrun({\\n\\t\\t\\t\\tprocess: COUNTER,\\n\\t\\t\\t\\ttags: [\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tname: &quot;Action&quot;,\\n\\t\\t\\t\\t\\t\\tvalue: &quot;Info&quot;,\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t],\\n\\t\\t\\t});\\n \\n\\t\\t\\tif (dryrunResult.Messages[0].Data) {\\n\\t\\t\\t\\treturn JSON.parse(dryrunResult.Messages[0].Data);\\n\\t\\t\\t}\\n \\n\\t\\t\\treturn undefined;\\n\\t\\t},\\n\\t});\\nUsing react-query hooks, you can fetch data from the backend processes and update the UI based on the fetched data. The queryFn function is calling the dryrun function from the @permaweb/aoconnect library to fetch the counter value from the backend process and then returns the counter value.\\nHandy TipSome cool features of TanStack Query:\\nCaching: Automatically cache data and keep it up to date.\\nisLoading: A boolean that is true when the query is in a loading state.\\nisFetching: A boolean that is true when the query is fetching data.\\nerror: An error object if the query failed.\\n\\n\",\"title\":\"Reading Data from Backend Process\",\"titles\":[\"Connecting to Backend\"]},{\"href\":\"/frontend-development/connecting-to-backend#sending-data-to-backend-process\",\"html\":\"\\n<p>You can always send messages using <code>useMutation</code> hook provided by TanStack Query. The <code>useMutation</code> hook is used to send messages to the backend processes. You can use this hook to send messages to the backend processes and update the UI based on the response.</p>\\n<p>An example is the Increase button in the <code>counter</code> component. When the Increase button is clicked, it sends a message to the backend process to increase the counter value.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"apps/frontend/src/components/counter.tsx\\\" data-lang=\\\"tsx\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> increaseCounter</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> useMutation</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\tmutationKey: [</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;IncreaseCounter&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">\\t\\tmutationFn</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">async</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> () </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=&gt;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">\\t\\t\\tconst</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> messageId</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> message</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\tprocess: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">COUNTER</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\ttags: [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\t\\t{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\t\\t\\tname: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;Action&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\t\\t\\tvalue: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;IncreaseCounter&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\t\\t},</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\t],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\tdata: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\tsigner: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">createDataItemSigner</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(window.arweaveWallet),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t});</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">\\t\\t\\tconst</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> messageResult</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> result</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\tprocess: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">COUNTER</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\tmessage: messageId,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t});</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">\\t\\t\\tif</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (messageResult.Messages[</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">0</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">].Data) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">\\t\\t\\t\\treturn</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> JSON</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">parse</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(messageResult.Messages[</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">0</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">].Data);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">\\t\\t\\treturn</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> undefined</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t},</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">\\t\\tonSuccess</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: () </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=&gt;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\tqueryClient.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">invalidateQueries</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t},</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t});</span></span></code></pre>\\n<p>The <code>mutationFn</code> function is calling the <code>message</code> function from the <code>@permaweb/aoconnect</code> library to send a message to the backend process to increase the counter value. The <code>onSuccess</code> function is used to invalidate the query cache so that the UI can be updated with the new counter value.</p>\\n<aside data-callout=\\\"tip\\\"><strong data-callout-title=\\\"true\\\">Handy Tip</strong><p>Some cool features of TanStack Query:</p><ul>\\n<li><strong>mutationFn</strong>: A function that sends a message to the backend process.</li>\\n<li><strong>onSuccess</strong>: A function that is called when the mutation is successful.</li>\\n<li><strong>invalidateQueries</strong>: A function that invalidates the query cache and re-fetches the data.</li>\\n</ul></aside>\",\"id\":\"site/pages/frontend-development/connecting-to-backend.mdx#sending-data-to-backend-process\",\"isPage\":false,\"text\":\"\\nYou can always send messages using useMutation hook provided by TanStack Query. The useMutation hook is used to send messages to the backend processes. You can use this hook to send messages to the backend processes and update the UI based on the response.\\nAn example is the Increase button in the counter component. When the Increase button is clicked, it sends a message to the backend process to increase the counter value.\\nconst increaseCounter = useMutation({\\n\\t\\tmutationKey: [&quot;IncreaseCounter&quot;],\\n\\t\\tmutationFn: async () =&gt; {\\n\\t\\t\\tconst messageId = await message({\\n\\t\\t\\t\\tprocess: COUNTER,\\n\\t\\t\\t\\ttags: [\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tname: &quot;Action&quot;,\\n\\t\\t\\t\\t\\t\\tvalue: &quot;IncreaseCounter&quot;,\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t],\\n\\t\\t\\t\\tdata: &quot;&quot;,\\n\\t\\t\\t\\tsigner: createDataItemSigner(window.arweaveWallet),\\n\\t\\t\\t});\\n \\n\\t\\t\\tconst messageResult = await result({\\n\\t\\t\\t\\tprocess: COUNTER,\\n\\t\\t\\t\\tmessage: messageId,\\n\\t\\t\\t});\\n \\n\\t\\t\\tif (messageResult.Messages[0].Data) {\\n\\t\\t\\t\\treturn JSON.parse(messageResult.Messages[0].Data);\\n\\t\\t\\t}\\n \\n\\t\\t\\treturn undefined;\\n\\t\\t},\\n\\t\\tonSuccess: () =&gt; {\\n\\t\\t\\tqueryClient.invalidateQueries();\\n\\t\\t},\\n\\t});\\nThe mutationFn function is calling the message function from the @permaweb/aoconnect library to send a message to the backend process to increase the counter value. The onSuccess function is used to invalidate the query cache so that the UI can be updated with the new counter value.\\nHandy TipSome cool features of TanStack Query:\\nmutationFn: A function that sends a message to the backend process.\\nonSuccess: A function that is called when the mutation is successful.\\ninvalidateQueries: A function that invalidates the query cache and re-fetches the data.\\n\",\"title\":\"Sending Data to Backend Process\",\"titles\":[\"Connecting to Backend\"]}]}],[\"index.dd0b11ab05f5a6b17e31c4aab252b8cb5247677d03cbf70506d85df1feef85ef\",{\"mdx\":\"# Developing AO Processes [This section provides an overview of the architecture of AO processes and how they are developed.]\\n\\nIn order to develop AO processes and start using Create Ao dApp, you need to have a basic understanding of the following:\\n\\n- **Lua programming language** - AO processes are written in Lua. If you are not familiar with Lua, you can learn the basics from the [official Lua documentation](https://www.lua.org/manual/5.1/).\\n- **ao + aos** - AO processes are executed by the AO. You need to have a basic understanding of how to use the `ao`. You can learn more about `ao` from the [official documentation](https://cookbook_ao.g8way.io/welcome/index.html)\\n\\n## Process Directory Structure\\nA recommended project structure for developing AO processes is as follows:\\n\\n```\\nproject-name/             # Your project's root directory.\\n├── ao/                   # The root directory of your ao processes.\\n│   └── process-name/          # Process Directory. // [!code hl] // [!code focus]\\n│       ├── scripts/           # Utility scripts for the process. // [!code hl] // [!code focus]\\n|       |   ├── build.sh       # Build script for the process. // [!code hl] // [!code focus]\\n│       │   ├── deploy.sh      # Deploy script for the process. // [!code hl] // [!code focus]\\n|       |   └── test.sh        # Test script for the process. // [!code hl] // [!code focus]\\n│       ├── src/               # Source code for the process. // [!code hl] // [!code focus]\\n│       │   ├── test/                   # Entry point for the process. // [!code hl] // [!code focus]\\n│       │   │   ├── mocked-env          # Mocked env files to test the process. // [!code hl] // [!code focus]\\n|       |   |   ├── setup.lua           # AO Testing Suite setup file. // [!code hl] // [!code focus]\\n│       │   │   └── process_test.lua    # Test script for the process. // [!code hl] // [!code focus]\\n│       |   ├── process_lib.lua         # Library for the process. // [!code hl] // [!code focus]\\n│       |   ├── process.lua             # Entry point for the process. // [!code hl] // [!code focus]\\n│       │   └── reset_modules.lua       # Reset preloaded modules // [!code hl] // [!code focus]\\n│       ├── aoform.yaml        # Configuration for ao-form deployment. // [!code hl] // [!code focus]\\n│       └── squishy            # Squishy configuration for build. // [!code hl] // [!code focus]\\n├── apps/             # The root directory of your frontend applications.\\n│   └── frontend/     # React Vite App connected to ao process.\\n├── utils             # Directory for utility functions.\\n│   └── inject-process.ts # Script to inject process Ids from ao to frontend \\n├── node_modules/\\n├── .gitignore\\n├── package.json\\n├── README.md\\n└── tsconfig.json\\n```\\n\\nDon't be overwhelmed by the structure. We will go through each of the directories and files in detail in the following sections.\",\"document\":[{\"href\":\"/process-development/architecture#developing-ao-processes\",\"html\":\"<div role=\\\"doc-subtitle\\\">This section provides an overview of the architecture of AO processes and how they are developed.</div></header>\\n<p>In order to develop AO processes and start using Create Ao dApp, you need to have a basic understanding of the following:</p>\\n<ul>\\n<li><strong>Lua programming language</strong> - AO processes are written in Lua. If you are not familiar with Lua, you can learn the basics from the <a href=\\\"https://www.lua.org/manual/5.1/\\\">official Lua documentation</a>.</li>\\n<li><strong>ao + aos</strong> - AO processes are executed by the AO. You need to have a basic understanding of how to use the <code>ao</code>. You can learn more about <code>ao</code> from the <a href=\\\"https://cookbook_ao.g8way.io/welcome/index.html\\\">official documentation</a></li>\\n</ul>\\n\",\"id\":\"site/pages/process-development/architecture.mdx#developing-ao-processes\",\"isPage\":true,\"text\":\"This section provides an overview of the architecture of AO processes and how they are developed.\\nIn order to develop AO processes and start using Create Ao dApp, you need to have a basic understanding of the following:\\n\\nLua programming language - AO processes are written in Lua. If you are not familiar with Lua, you can learn the basics from the official Lua documentation.\\nao + aos - AO processes are executed by the AO. You need to have a basic understanding of how to use the ao. You can learn more about ao from the official documentation\\n\\n\",\"title\":\"Developing AO Processes\",\"titles\":[]},{\"href\":\"/process-development/architecture#process-directory-structure\",\"html\":\"\\n<p>A recommended project structure for developing AO processes is as follows:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused has-highlighted\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span>project-name/             # Your project&#x27;s root directory.</span></span>\\n<span class=\\\"line\\\"><span>├── ao/                   # The root directory of your ao processes.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│   └── process-name/          # Process Directory.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│       ├── scripts/           # Utility scripts for the process.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>|       |   ├── build.sh       # Build script for the process.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│       │   ├── deploy.sh      # Deploy script for the process.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>|       |   └── test.sh        # Test script for the process.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│       ├── src/               # Source code for the process.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│       │   ├── test/                   # Entry point for the process.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│       │   │   ├── mocked-env          # Mocked env files to test the process.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>|       |   |   ├── setup.lua           # AO Testing Suite setup file.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│       │   │   └── process_test.lua    # Test script for the process.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│       |   ├── process_lib.lua         # Library for the process.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│       |   ├── process.lua             # Entry point for the process.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│       │   └── reset_modules.lua       # Reset preloaded modules</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│       ├── aoform.yaml        # Configuration for ao-form deployment.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│       └── squishy            # Squishy configuration for build.</span></span>\\n<span class=\\\"line\\\"><span>├── apps/             # The root directory of your frontend applications.</span></span>\\n<span class=\\\"line\\\"><span>│   └── frontend/     # React Vite App connected to ao process.</span></span>\\n<span class=\\\"line\\\"><span>├── utils             # Directory for utility functions.</span></span>\\n<span class=\\\"line\\\"><span>│   └── inject-process.ts # Script to inject process Ids from ao to frontend </span></span>\\n<span class=\\\"line\\\"><span>├── node_modules/</span></span>\\n<span class=\\\"line\\\"><span>├── .gitignore</span></span>\\n<span class=\\\"line\\\"><span>├── package.json</span></span>\\n<span class=\\\"line\\\"><span>├── README.md</span></span>\\n<span class=\\\"line\\\"><span>└── tsconfig.json</span></span></code></pre>\\n<p>Don&#x27;t be overwhelmed by the structure. We will go through each of the directories and files in detail in the following sections.</p>\",\"id\":\"site/pages/process-development/architecture.mdx#process-directory-structure\",\"isPage\":false,\"text\":\"\\nA recommended project structure for developing AO processes is as follows:\\nproject-name/             # Your project&#x27;s root directory.\\n├── ao/                   # The root directory of your ao processes.\\n│   └── process-name/          # Process Directory.\\n│       ├── scripts/           # Utility scripts for the process.\\n|       |   ├── build.sh       # Build script for the process.\\n│       │   ├── deploy.sh      # Deploy script for the process.\\n|       |   └── test.sh        # Test script for the process.\\n│       ├── src/               # Source code for the process.\\n│       │   ├── test/                   # Entry point for the process.\\n│       │   │   ├── mocked-env          # Mocked env files to test the process.\\n|       |   |   ├── setup.lua           # AO Testing Suite setup file.\\n│       │   │   └── process_test.lua    # Test script for the process.\\n│       |   ├── process_lib.lua         # Library for the process.\\n│       |   ├── process.lua             # Entry point for the process.\\n│       │   └── reset_modules.lua       # Reset preloaded modules\\n│       ├── aoform.yaml        # Configuration for ao-form deployment.\\n│       └── squishy            # Squishy configuration for build.\\n├── apps/             # The root directory of your frontend applications.\\n│   └── frontend/     # React Vite App connected to ao process.\\n├── utils             # Directory for utility functions.\\n│   └── inject-process.ts # Script to inject process Ids from ao to frontend \\n├── node_modules/\\n├── .gitignore\\n├── package.json\\n├── README.md\\n└── tsconfig.json\\nDon&#x27;t be overwhelmed by the structure. We will go through each of the directories and files in detail in the following sections.\",\"title\":\"Process Directory Structure\",\"titles\":[\"Developing AO Processes\"]}]}],[\"index.36e7f275e3a01d127b6098204a811e8ce3fd5b6fbb3916c3ec0578547b424ce6\",{\"mdx\":\"# Process deployment [using aoform]\\n\\nThis section will guide you through the process of deploying the process using `aoform`. `aoform` is a tool for deploying AO processes to the AO Network. The configuration for `aoform` is stored in the `aoform.yaml` file in the process directory.\\n\\n:::info\\nDeploying processes is done using `aoform`. Ensure you have `aoform` installed on your project.\\n\\nLearn more about [AOForm](https://github.com/Autonomous-Finance/aoform)\\n:::\\n\\n## Configuring AOForm\\n\\nThe `aoform.yaml` file in the process directory contains the configuration for deploying the process using `aoform`. The basic configuration for `aoform` is as follows:\\n\\n```yaml [./ao/my-process/aoform.yaml]\\n## AoForm Configuration\\n## This file is used to configure the AoForm package\\n## For more information, visit\\n\\n- name: my-process\\n  file: build/process.lua\\n  prerun: ./src/reset_modules.lua\\n  scheduler: _GQ33BkPtZrqxA84vM8Zk-N2aO0toNNu_C-l-rawrBA\\n  module: GYrbbe0VbHim_7Hi6zrOpHQXrSQz07XNtwCnfbFo2I0\\n  tags:\\n    - name: Name\\n      value: my-process\\n```\\n\\nThe configuration specifies the name of the process, the entry point for the process, the prerun script, the scheduler, the module, and the tags for the process.\\n\\n## Deploying the Process\\n\\nTo deploy the process, run the following command in the process directory:\\n\\n```bash [Terminal]\\n# Export the wallet JSON\\nexport WALLET_JSON=\\\"$(cat ~/.aos.json)\\\"\\n\\n# Deploy the process\\ncd ao/process-name && npx aoform deploy\\n```\\n\\n:::tip[Handy Tip]\\nCreate Ao dApp provides a script to deploy the process from the root of the project. You can run the following command to deploy the process:\\n\\n```bash [Terminal]\\nnpm run myprocess:deploy\\n```\",\"document\":[{\"href\":\"/process-development/deployment#process-deployment\",\"html\":\"<div role=\\\"doc-subtitle\\\">using aoform</div></header>\\n<p>This section will guide you through the process of deploying the process using <code>aoform</code>. <code>aoform</code> is a tool for deploying AO processes to the AO Network. The configuration for <code>aoform</code> is stored in the <code>aoform.yaml</code> file in the process directory.</p>\\n<aside data-callout=\\\"info\\\"><p>Deploying processes is done using <code>aoform</code>. Ensure you have <code>aoform</code> installed on your project.</p><p>Learn more about <a href=\\\"https://github.com/Autonomous-Finance/aoform\\\">AOForm</a></p></aside>\\n\",\"id\":\"site/pages/process-development/deployment.mdx#process-deployment\",\"isPage\":true,\"text\":\"using aoform\\nThis section will guide you through the process of deploying the process using aoform. aoform is a tool for deploying AO processes to the AO Network. The configuration for aoform is stored in the aoform.yaml file in the process directory.\\nDeploying processes is done using aoform. Ensure you have aoform installed on your project.Learn more about AOForm\\n\",\"title\":\"Process deployment\",\"titles\":[]},{\"href\":\"/process-development/deployment#configuring-aoform\",\"html\":\"\\n<p>The <code>aoform.yaml</code> file in the process directory contains the configuration for deploying the process using <code>aoform</code>. The basic configuration for <code>aoform</code> is as follows:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"./ao/my-process/aoform.yaml\\\" data-lang=\\\"yaml\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">## AoForm Configuration</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">## This file is used to configure the AoForm package</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">## For more information, visit</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">- </span><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">name</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">my-process</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">  file</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">build/process.lua</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">  prerun</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">./src/reset_modules.lua</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">  scheduler</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">_GQ33BkPtZrqxA84vM8Zk-N2aO0toNNu_C-l-rawrBA</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">  module</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">GYrbbe0VbHim_7Hi6zrOpHQXrSQz07XNtwCnfbFo2I0</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">  tags</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    - </span><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">name</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">Name</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">      value</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">my-process</span></span></code></pre>\\n<p>The configuration specifies the name of the process, the entry point for the process, the prerun script, the scheduler, the module, and the tags for the process.</p>\\n\",\"id\":\"site/pages/process-development/deployment.mdx#configuring-aoform\",\"isPage\":false,\"text\":\"\\nThe aoform.yaml file in the process directory contains the configuration for deploying the process using aoform. The basic configuration for aoform is as follows:\\n## AoForm Configuration\\n## This file is used to configure the AoForm package\\n## For more information, visit\\n \\n- name: my-process\\n  file: build/process.lua\\n  prerun: ./src/reset_modules.lua\\n  scheduler: _GQ33BkPtZrqxA84vM8Zk-N2aO0toNNu_C-l-rawrBA\\n  module: GYrbbe0VbHim_7Hi6zrOpHQXrSQz07XNtwCnfbFo2I0\\n  tags:\\n    - name: Name\\n      value: my-process\\nThe configuration specifies the name of the process, the entry point for the process, the prerun script, the scheduler, the module, and the tags for the process.\\n\",\"title\":\"Configuring AOForm\",\"titles\":[\"Process deployment\"]},{\"href\":\"/process-development/deployment#deploying-the-process\",\"html\":\"\\n<p>To deploy the process, run the following command in the process directory:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Terminal\\\" data-lang=\\\"bash\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\"># Export the wallet JSON</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> WALLET_JSON</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;$(</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">cat</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> ~/.aos.json)&quot;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\"># Deploy the process</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">cd</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> ao/process-name</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> &amp;&amp; </span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">npx</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> aoform</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> deploy</span></span></code></pre>\\n<aside data-callout=\\\"tip\\\"><strong data-callout-title=\\\"true\\\">Handy Tip</strong><p>Create Ao dApp provides a script to deploy the process from the root of the project. You can run the following command to deploy the process:</p><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Terminal\\\" data-lang=\\\"bash\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">npm</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> run</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> myprocess:deploy</span></span></code></pre></aside>\",\"id\":\"site/pages/process-development/deployment.mdx#deploying-the-process\",\"isPage\":false,\"text\":\"\\nTo deploy the process, run the following command in the process directory:\\n# Export the wallet JSON\\nexport WALLET_JSON=&quot;$(cat ~/.aos.json)&quot;\\n \\n# Deploy the process\\ncd ao/process-name &amp;&amp; npx aoform deploy\\nHandy TipCreate Ao dApp provides a script to deploy the process from the root of the project. You can run the following command to deploy the process:npm run myprocess:deploy\",\"title\":\"Deploying the Process\",\"titles\":[\"Process deployment\"]}]}],[\"index.6b3a6ee557d7568e091b0976a68a1f7b7b79622c16f56f0f7c5d4ac169b4da78\",{\"mdx\":\"# Project Structure\\n\",\"document\":[{\"href\":\"/project-structure#project-structure\",\"html\":\"</header>\",\"id\":\"site/pages/project-structure.mdx#project-structure\",\"isPage\":true,\"text\":\"\",\"title\":\"Project Structure\",\"titles\":[]}]}],[\"index.0abfff1e971a0e0b8731e4a40e0bfc7ef23c1d1eac2d5710d1df102f87fce452\",{\"mdx\":\"# Building the process using amalg.lua\\n\\nThis section will guide you through the process of building the process. The process is built using the `build` script in the `process` directory. The `build` script is a simple shell script that uses the `amalg.lua` script to build the process.\\n\\n:::info \\nDeploying a Lua application that is split among multiple modules is a challenge. A tool that can package a Lua script and its modules into a single file is a valuable help. This is such a tool.\\n:::\\n\\nLearn more about [amalg.lua](https://github.com/siffiejoe/lua-amalg/).\\n\\n## Configuring build script\\n\\nCreate AO dApp provides a script to build the process using `amalg.lua`. The configuration for `amalg.lua` is stored in the `scripts/build.sh` file in the process directory.\\n\\nThe configuration specifies the entry point for the process, the modules to include, the minify level, and the output file.\\n\\n## Building the Process\\n\\nTo build the process, run the following command in the process directory:\\n\\n```bash [Terminal]\\ncd ao/process-name && ./scripts/build.sh\\n```\\n\\n:::tip[Handy Tip]\\nCreate Ao dApp provides a script to build the process from the root of the project. You can run the following command to build the process:\\n\\n```bash [Terminal]\\nnpm run myprocess:build\\n```\\n:::\\n\",\"document\":[{\"href\":\"/process-development/building-with-amalg#building-the-process-using-amalglua\",\"html\":\"</header>\\n<p>This section will guide you through the process of building the process. The process is built using the <code>build</code> script in the <code>process</code> directory. The <code>build</code> script is a simple shell script that uses the <code>amalg.lua</code> script to build the process.</p>\\n<aside data-callout=\\\"info\\\"><p>Deploying a Lua application that is split among multiple modules is a challenge. A tool that can package a Lua script and its modules into a single file is a valuable help. This is such a tool.</p></aside>\\n<p>Learn more about <a href=\\\"https://github.com/siffiejoe/lua-amalg/\\\">amalg.lua</a>.</p>\\n\",\"id\":\"site/pages/process-development/building-with-amalg.mdx#building-the-process-using-amalglua\",\"isPage\":true,\"text\":\"\\nThis section will guide you through the process of building the process. The process is built using the build script in the process directory. The build script is a simple shell script that uses the amalg.lua script to build the process.\\nDeploying a Lua application that is split among multiple modules is a challenge. A tool that can package a Lua script and its modules into a single file is a valuable help. This is such a tool.\\nLearn more about amalg.lua.\\n\",\"title\":\"Building the process using amalg.lua\",\"titles\":[]},{\"href\":\"/process-development/building-with-amalg#configuring-build-script\",\"html\":\"\\n<p>Create AO dApp provides a script to build the process using <code>amalg.lua</code>. The configuration for <code>amalg.lua</code> is stored in the <code>scripts/build.sh</code> file in the process directory.</p>\\n<p>The configuration specifies the entry point for the process, the modules to include, the minify level, and the output file.</p>\\n\",\"id\":\"site/pages/process-development/building-with-amalg.mdx#configuring-build-script\",\"isPage\":false,\"text\":\"\\nCreate AO dApp provides a script to build the process using amalg.lua. The configuration for amalg.lua is stored in the scripts/build.sh file in the process directory.\\nThe configuration specifies the entry point for the process, the modules to include, the minify level, and the output file.\\n\",\"title\":\"Configuring build script\",\"titles\":[\"Building the process using amalg.lua\"]},{\"href\":\"/process-development/building-with-amalg#building-the-process\",\"html\":\"\\n<p>To build the process, run the following command in the process directory:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Terminal\\\" data-lang=\\\"bash\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">cd</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> ao/process-name</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> &amp;&amp; </span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">./scripts/build.sh</span></span></code></pre>\\n<aside data-callout=\\\"tip\\\"><strong data-callout-title=\\\"true\\\">Handy Tip</strong><p>Create Ao dApp provides a script to build the process from the root of the project. You can run the following command to build the process:</p><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Terminal\\\" data-lang=\\\"bash\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">npm</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> run</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> myprocess:build</span></span></code></pre></aside>\",\"id\":\"site/pages/process-development/building-with-amalg.mdx#building-the-process\",\"isPage\":false,\"text\":\"\\nTo build the process, run the following command in the process directory:\\ncd ao/process-name &amp;&amp; ./scripts/build.sh\\nHandy TipCreate Ao dApp provides a script to build the process from the root of the project. You can run the following command to build the process:npm run myprocess:build\",\"title\":\"Building the Process\",\"titles\":[\"Building the process using amalg.lua\"]}]}],[\"index.949331f5d742d243404d02299ce62337e9d671580b8a7fc4acdb23e9da78c0ea\",{\"mdx\":\"# Getting Started\\n\\nTo get started with the create-ao-dapp, you can run the following command:\\n\\n:::code-group\\n```bash [bun]\\nbun create ao-dapp\\n```\\n\\n```bash [pnpm]\\npnpm create ao-dapp\\n```\\n\\n```bash [yarn]\\nyarn create ao-dapp\\n```\\n\\n```bash [npm]\\nnpm init ao-dapp\\n```\\n:::\\n\\n\\n## Project Setup\\n\\nRunning the above command will prompt you to complete multiple steps to set up your project. The steps include:\\n\\n::::steps\\n### Enter the name of your project\\n\\nThis will be used as the root directory for your project, relative to the current directory. (eg: my-project)\\n \\n### What should we name the backend process?\\n \\nYou can name your backend process anything you like. The name you provide will be used to create the process \\ndirectory and files. (eg: myprocess)\\n\\n:::warning\\nNaming your process is important, as it will be used to create the process directory and files. Only valid lua identifier names are allowed.\\n:::\\n \\n### Pick a process type within myprocess\\n\\nYou can choose from the following process types:\\n- `lua`: A simple Lua process.\\n- `teal`: Lua process using the [Teal language](https://github.com/teal-language/tl).\\n\\n### Select the features you want to include\\n\\nYou can choose from the following features:\\n- `testing`: Include AO Process Testing suite for your process. [AO Process Testing](https://github.com/Autonomous-Finance/ao-process-testing)\\n- `squishy`: Tool for combining multiple files into a single one. [Squish](https://github.com/LuaDist/squish)\\n- `aoform`: Include AO Form for deploying your process. [AOForm](https://github.com/Autonomous-Finance/aoform)\\n\\n### Pick a frontend framework within my-project\\n\\nYou can choose from the following frontend frameworks:\\n- `vite-react`: A React application using Vite.\\n\\n::::\\n\\n## Project Structure\\n\\nBy selecting all the options, you will have a project structure similar to the following:\\n\\n```\\nproject-name/             # Your project's root directory.\\n├── ao/                   # The root directory of your ao processes. // [!code hl] // [!code focus]\\n│   └── process-name/          # Process Directory. // [!code hl] // [!code focus]\\n│       ├── scripts/           # Utility scripts for the process. // [!code hl] // [!code focus]\\n│       ├── src/               # Source code for the process. // [!code hl] // [!code focus]\\n│       │   ├── test/                   # Entry point for the process. // [!code hl] // [!code focus]\\n│       │   │   └── process_test.lua    # Test script for the process. // [!code hl] // [!code focus]\\n│       │   └── process.lua             # Entry point for the process. // [!code hl] // [!code focus]\\n│       ├── aoform.yaml        # Configuration for ao-form deployment. // [!code hl] // [!code focus]\\n│       └── squishy            # Squishy configuration for build. // [!code hl] // [!code focus]\\n├── apps/             # The root directory of your frontend applications. // [!code hl] // [!code focus]\\n│   └── frontend/     # React Vite App connected to ao process. // [!code hl] // [!code focus]\\n├── utils             # Directory for utility functions. // [!code hl] // [!code focus]\\n│   └── inject-process.ts # Script to inject process Ids from ao to frontend // [!code hl] // [!code focus]\\n├── node_modules/\\n├── .gitignore\\n├── package.json\\n├── README.md\\n└── tsconfig.json\\n```\\n\\nThis structure includes the following directories:\\n\\n- `ao/`: The root directory of your ao processes.\\n- `apps/`: The root directory of your frontend applications.\\n- `utils/`: Directory for utility functions.\\n\\n## Preconfigured Scripts\\n\\nThe `package.json` file in the root directory of your project includes the following preconfigured scripts:\\n\\n- `myprocess:deploy`: Deploys the process using aoform.\\n- `myprocess:test`: Runs the test script for the process.\\n- `myprocess:build`: Builds the process using squishy.\\n- `frontend:dev`: Starts the development server for the frontend application.\\n- `frontend:build`: Builds the frontend application.\\n\\n\\n## Next Steps\\n\\nYou can now start developing your ao processes and frontend applications. For more information on how to use the create-ao-dapp, follow along with the rest of the documentation. If you have any questions or need help, feel free to reach out to us on dedicated channels.\\n\",\"document\":[{\"href\":\"/getting-started#getting-started\",\"html\":\"</header>\\n<p>To get started with the create-ao-dapp, you can run the following command:</p>\\n<div class=\\\"code-group\\\"><div data-title=\\\"bun\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"bun\\\" data-lang=\\\"bash\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">bun</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> create</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> ao-dapp</span></span></code></pre></div><div data-title=\\\"pnpm\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"pnpm\\\" data-lang=\\\"bash\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">pnpm</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> create</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> ao-dapp</span></span></code></pre></div><div data-title=\\\"yarn\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"yarn\\\" data-lang=\\\"bash\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">yarn</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> create</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> ao-dapp</span></span></code></pre></div><div data-title=\\\"npm\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"npm\\\" data-lang=\\\"bash\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">npm</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> init</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> ao-dapp</span></span></code></pre></div></div>\\n\",\"id\":\"site/pages/getting-started.mdx#getting-started\",\"isPage\":true,\"text\":\"\\nTo get started with the create-ao-dapp, you can run the following command:\\nbun create ao-dapppnpm create ao-dappyarn create ao-dappnpm init ao-dapp\\n\",\"title\":\"Getting Started\",\"titles\":[]},{\"href\":\"/getting-started#project-setup\",\"html\":\"\\n<p>Running the above command will prompt you to complete multiple steps to set up your project. The steps include:</p>\\n<div data-vocs-steps=\\\"true\\\"><div data-depth=\\\"3\\\">\",\"id\":\"site/pages/getting-started.mdx#project-setup\",\"isPage\":false,\"text\":\"\\nRunning the above command will prompt you to complete multiple steps to set up your project. The steps include:\\n\",\"title\":\"Project Setup\",\"titles\":[\"Getting Started\"]},{\"href\":\"/getting-started#enter-the-name-of-your-project\",\"html\":\"<p>This will be used as the root directory for your project, relative to the current directory. (eg: my-project)</p></div><div data-depth=\\\"3\\\">\",\"id\":\"site/pages/getting-started.mdx#enter-the-name-of-your-project\",\"isPage\":false,\"text\":\"This will be used as the root directory for your project, relative to the current directory. (eg: my-project)\",\"title\":\"Enter the name of your project\",\"titles\":[\"Getting Started\",\"Project Setup\"]},{\"href\":\"/getting-started#what-should-we-name-the-backend-process\",\"html\":\"<p>You can name your backend process anything you like. The name you provide will be used to create the process\\ndirectory and files. (eg: myprocess)</p><aside data-callout=\\\"warning\\\"><p>Naming your process is important, as it will be used to create the process directory and files. Only valid lua identifier names are allowed.</p></aside></div><div data-depth=\\\"3\\\">\",\"id\":\"site/pages/getting-started.mdx#what-should-we-name-the-backend-process\",\"isPage\":false,\"text\":\"You can name your backend process anything you like. The name you provide will be used to create the process\\ndirectory and files. (eg: myprocess)Naming your process is important, as it will be used to create the process directory and files. Only valid lua identifier names are allowed.\",\"title\":\"What should we name the backend process?\",\"titles\":[\"Getting Started\",\"Project Setup\"]},{\"href\":\"/getting-started#pick-a-process-type-within-myprocess\",\"html\":\"<p>You can choose from the following process types:</p><ul>\\n<li><code>lua</code>: A simple Lua process.</li>\\n<li><code>teal</code>: Lua process using the <a href=\\\"https://github.com/teal-language/tl\\\">Teal language</a>.</li>\\n</ul></div><div data-depth=\\\"3\\\">\",\"id\":\"site/pages/getting-started.mdx#pick-a-process-type-within-myprocess\",\"isPage\":false,\"text\":\"You can choose from the following process types:\\nlua: A simple Lua process.\\nteal: Lua process using the Teal language.\\n\",\"title\":\"Pick a process type within myprocess\",\"titles\":[\"Getting Started\",\"Project Setup\"]},{\"href\":\"/getting-started#select-the-features-you-want-to-include\",\"html\":\"<p>You can choose from the following features:</p><ul>\\n<li><code>testing</code>: Include AO Process Testing suite for your process. <a href=\\\"https://github.com/Autonomous-Finance/ao-process-testing\\\">AO Process Testing</a></li>\\n<li><code>squishy</code>: Tool for combining multiple files into a single one. <a href=\\\"https://github.com/LuaDist/squish\\\">Squish</a></li>\\n<li><code>aoform</code>: Include AO Form for deploying your process. <a href=\\\"https://github.com/Autonomous-Finance/aoform\\\">AOForm</a></li>\\n</ul></div><div data-depth=\\\"3\\\">\",\"id\":\"site/pages/getting-started.mdx#select-the-features-you-want-to-include\",\"isPage\":false,\"text\":\"You can choose from the following features:\\ntesting: Include AO Process Testing suite for your process. AO Process Testing\\nsquishy: Tool for combining multiple files into a single one. Squish\\naoform: Include AO Form for deploying your process. AOForm\\n\",\"title\":\"Select the features you want to include\",\"titles\":[\"Getting Started\",\"Project Setup\"]},{\"href\":\"/getting-started#pick-a-frontend-framework-within-my-project\",\"html\":\"<p>You can choose from the following frontend frameworks:</p><ul>\\n<li><code>vite-react</code>: A React application using Vite.</li>\\n</ul></div></div>\\n\",\"id\":\"site/pages/getting-started.mdx#pick-a-frontend-framework-within-my-project\",\"isPage\":false,\"text\":\"You can choose from the following frontend frameworks:\\nvite-react: A React application using Vite.\\n\\n\",\"title\":\"Pick a frontend framework within my-project\",\"titles\":[\"Getting Started\",\"Project Setup\"]},{\"href\":\"/getting-started#project-structure\",\"html\":\"\\n<p>By selecting all the options, you will have a project structure similar to the following:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused has-highlighted\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span>project-name/             # Your project&#x27;s root directory.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>├── ao/                   # The root directory of your ao processes.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│   └── process-name/          # Process Directory.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│       ├── scripts/           # Utility scripts for the process.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│       ├── src/               # Source code for the process.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│       │   ├── test/                   # Entry point for the process.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│       │   │   └── process_test.lua    # Test script for the process.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│       │   └── process.lua             # Entry point for the process.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│       ├── aoform.yaml        # Configuration for ao-form deployment.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│       └── squishy            # Squishy configuration for build.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>├── apps/             # The root directory of your frontend applications.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│   └── frontend/     # React Vite App connected to ao process.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>├── utils             # Directory for utility functions.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│   └── inject-process.ts # Script to inject process Ids from ao to frontend</span></span>\\n<span class=\\\"line\\\"><span>├── node_modules/</span></span>\\n<span class=\\\"line\\\"><span>├── .gitignore</span></span>\\n<span class=\\\"line\\\"><span>├── package.json</span></span>\\n<span class=\\\"line\\\"><span>├── README.md</span></span>\\n<span class=\\\"line\\\"><span>└── tsconfig.json</span></span></code></pre>\\n<p>This structure includes the following directories:</p>\\n<ul>\\n<li><code>ao/</code>: The root directory of your ao processes.</li>\\n<li><code>apps/</code>: The root directory of your frontend applications.</li>\\n<li><code>utils/</code>: Directory for utility functions.</li>\\n</ul>\\n\",\"id\":\"site/pages/getting-started.mdx#project-structure\",\"isPage\":false,\"text\":\"\\nBy selecting all the options, you will have a project structure similar to the following:\\nproject-name/             # Your project&#x27;s root directory.\\n├── ao/                   # The root directory of your ao processes.\\n│   └── process-name/          # Process Directory.\\n│       ├── scripts/           # Utility scripts for the process.\\n│       ├── src/               # Source code for the process.\\n│       │   ├── test/                   # Entry point for the process.\\n│       │   │   └── process_test.lua    # Test script for the process.\\n│       │   └── process.lua             # Entry point for the process.\\n│       ├── aoform.yaml        # Configuration for ao-form deployment.\\n│       └── squishy            # Squishy configuration for build.\\n├── apps/             # The root directory of your frontend applications.\\n│   └── frontend/     # React Vite App connected to ao process.\\n├── utils             # Directory for utility functions.\\n│   └── inject-process.ts # Script to inject process Ids from ao to frontend\\n├── node_modules/\\n├── .gitignore\\n├── package.json\\n├── README.md\\n└── tsconfig.json\\nThis structure includes the following directories:\\n\\nao/: The root directory of your ao processes.\\napps/: The root directory of your frontend applications.\\nutils/: Directory for utility functions.\\n\\n\",\"title\":\"Project Structure\",\"titles\":[\"Getting Started\"]},{\"href\":\"/getting-started#preconfigured-scripts\",\"html\":\"\\n<p>The <code>package.json</code> file in the root directory of your project includes the following preconfigured scripts:</p>\\n<ul>\\n<li><code>myprocess:deploy</code>: Deploys the process using aoform.</li>\\n<li><code>myprocess:test</code>: Runs the test script for the process.</li>\\n<li><code>myprocess:build</code>: Builds the process using squishy.</li>\\n<li><code>frontend:dev</code>: Starts the development server for the frontend application.</li>\\n<li><code>frontend:build</code>: Builds the frontend application.</li>\\n</ul>\\n\",\"id\":\"site/pages/getting-started.mdx#preconfigured-scripts\",\"isPage\":false,\"text\":\"\\nThe package.json file in the root directory of your project includes the following preconfigured scripts:\\n\\nmyprocess:deploy: Deploys the process using aoform.\\nmyprocess:test: Runs the test script for the process.\\nmyprocess:build: Builds the process using squishy.\\nfrontend:dev: Starts the development server for the frontend application.\\nfrontend:build: Builds the frontend application.\\n\\n\",\"title\":\"Preconfigured Scripts\",\"titles\":[\"Getting Started\"]},{\"href\":\"/getting-started#next-steps\",\"html\":\"\\n<p>You can now start developing your ao processes and frontend applications. For more information on how to use the create-ao-dapp, follow along with the rest of the documentation. If you have any questions or need help, feel free to reach out to us on dedicated channels.</p>\",\"id\":\"site/pages/getting-started.mdx#next-steps\",\"isPage\":false,\"text\":\"\\nYou can now start developing your ao processes and frontend applications. For more information on how to use the create-ao-dapp, follow along with the rest of the documentation. If you have any questions or need help, feel free to reach out to us on dedicated channels.\",\"title\":\"Next Steps\",\"titles\":[\"Getting Started\"]}]}],[\"index.779cb42303ba3afe5224996b16b89fcfa2c86b57c8351d1c665c661a464589ee\",{\"mdx\":\"# Building the process using Squishy\\n\\nThis section will guide you through the process of building the process. The process is built using the `build` script in the `process` directory. The `build` script is a simple shell script that uses the `docker` command to build the process.\\n\\n:::info \\nBuilding processes is done using Squish via Docker. Ensure you have Docker installed on your machine.\\n:::\\n\\nLearn more about [Squish](https://github.com/LuaDist/squish).\\n\\n## Configuring Squish\\n\\nSquish is a tool for combining multiple files into a single one. It is used to build the process into a single file. The configuration for Squish is stored in the `squishy` file in the process directory.\\n\\nThe basic configuration for Squish is as follows:\\n\\n```lua [./ao/my-process/squishy]\\nMain \\\"src/process.lua\\\"\\n\\nModule \\\"process_lib\\\" \\\"./src/process_lib.lua\\\"\\n\\nOption \\\"minify-level\\\" \\\"none\\\"\\nOutput 'build/process.lua'\\n```\\n\\nThe configuration specifies the entry point for the process, the modules to include, the minify level, and the output file.\\n\\n## Building the Process\\n\\nTo build the process, run the following command in the process directory:\\n\\n```bash [Terminal]\\ncd ao/process-name && ./scripts/build.sh\\n```\\n\\n:::tip[Handy Tip]\\nCreate Ao dApp provides a script to build the process from the root of the project. You can run the following command to build the process:\\n\\n```bash [Terminal]\\nnpm run myprocess:build\\n```\\n:::\\n\",\"document\":[{\"href\":\"/process-development/building-with-squish#building-the-process-using-squishy\",\"html\":\"</header>\\n<p>This section will guide you through the process of building the process. The process is built using the <code>build</code> script in the <code>process</code> directory. The <code>build</code> script is a simple shell script that uses the <code>docker</code> command to build the process.</p>\\n<aside data-callout=\\\"info\\\"><p>Building processes is done using Squish via Docker. Ensure you have Docker installed on your machine.</p></aside>\\n<p>Learn more about <a href=\\\"https://github.com/LuaDist/squish\\\">Squish</a>.</p>\\n\",\"id\":\"site/pages/process-development/building-with-squish.mdx#building-the-process-using-squishy\",\"isPage\":true,\"text\":\"\\nThis section will guide you through the process of building the process. The process is built using the build script in the process directory. The build script is a simple shell script that uses the docker command to build the process.\\nBuilding processes is done using Squish via Docker. Ensure you have Docker installed on your machine.\\nLearn more about Squish.\\n\",\"title\":\"Building the process using Squishy\",\"titles\":[]},{\"href\":\"/process-development/building-with-squish#configuring-squish\",\"html\":\"\\n<p>Squish is a tool for combining multiple files into a single one. It is used to build the process into a single file. The configuration for Squish is stored in the <code>squishy</code> file in the process directory.</p>\\n<p>The basic configuration for Squish is as follows:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"./ao/my-process/squishy\\\" data-lang=\\\"lua\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">Main</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;src/process.lua&quot;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">Module</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;process_lib&quot; &quot;./src/process_lib.lua&quot;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">Option</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;minify-level&quot; &quot;none&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">Output</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;build/process.lua&#x27;</span></span></code></pre>\\n<p>The configuration specifies the entry point for the process, the modules to include, the minify level, and the output file.</p>\\n\",\"id\":\"site/pages/process-development/building-with-squish.mdx#configuring-squish\",\"isPage\":false,\"text\":\"\\nSquish is a tool for combining multiple files into a single one. It is used to build the process into a single file. The configuration for Squish is stored in the squishy file in the process directory.\\nThe basic configuration for Squish is as follows:\\nMain &quot;src/process.lua&quot;\\n \\nModule &quot;process_lib&quot; &quot;./src/process_lib.lua&quot;\\n \\nOption &quot;minify-level&quot; &quot;none&quot;\\nOutput &#x27;build/process.lua&#x27;\\nThe configuration specifies the entry point for the process, the modules to include, the minify level, and the output file.\\n\",\"title\":\"Configuring Squish\",\"titles\":[\"Building the process using Squishy\"]},{\"href\":\"/process-development/building-with-squish#building-the-process\",\"html\":\"\\n<p>To build the process, run the following command in the process directory:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Terminal\\\" data-lang=\\\"bash\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">cd</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> ao/process-name</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> &amp;&amp; </span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">./scripts/build.sh</span></span></code></pre>\\n<aside data-callout=\\\"tip\\\"><strong data-callout-title=\\\"true\\\">Handy Tip</strong><p>Create Ao dApp provides a script to build the process from the root of the project. You can run the following command to build the process:</p><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Terminal\\\" data-lang=\\\"bash\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">npm</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> run</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> myprocess:build</span></span></code></pre></aside>\",\"id\":\"site/pages/process-development/building-with-squish.mdx#building-the-process\",\"isPage\":false,\"text\":\"\\nTo build the process, run the following command in the process directory:\\ncd ao/process-name &amp;&amp; ./scripts/build.sh\\nHandy TipCreate Ao dApp provides a script to build the process from the root of the project. You can run the following command to build the process:npm run myprocess:build\",\"title\":\"Building the Process\",\"titles\":[\"Building the process using Squishy\"]}]}],[\"index.9449524c668cbf66ed869dd8907f0afa27982d53e77c92add840d60f2ec49b67\",{\"mdx\":\"# Process Design [This section provides an overview of the process design and best practices for writing AO processes.]\\n\\nIn this section, we will discuss the design principles and best practices for writing AO processes. AO processes are written in Lua, a lightweight, high-level, multi-paradigm programming language. Lua is designed to be embedded in other applications, making it an ideal choice for writing AO processes.\\n\\nAn over simplified AO token process could look like this, however, try and follow along with the code below. It's not really easy to comprehend and follow, but we will break it down and explain how things can be improved in the following sections.\\n\\n```lua [process.lua]\\nlocal ao = require('ao')\\n\\nVersion = \\\"1.0.0\\\"\\n\\n-- token should be idempotent and not change previous state updates\\nBalances = Balances or { [ao.id] = 1000 }\\nTotalSupply = TotalSupply or 1000\\nName = \\\"test token\\\"\\n\\nHandlers.add('info', Handlers.utils.hasMatchingTag('Action', 'Info'), function(msg)\\n  ao.send({\\n    Target = msg.From,\\n    Tags = [\\n        Name = Name,\\n        TotalSuppy = TotalSupply\\n    ]\\n  })\\nend)\\n\\nHandlers.add('balance', Handlers.utils.hasMatchingTag('Action', 'Balance'), function(msg)\\n  local bal = 0\\n\\n  -- If not Recipient is provided, then return the Senders balance\\n  if (msg.Tags.Recipient) then\\n    if (Balances[msg.Tags.Recipient]) then\\n      bal = Balances[msg.Tags.Recipient]\\n    end\\n  elseif Balances[msg.From] then\\n    bal = Balances[msg.From]\\n  end\\n\\n  ao.send({\\n    Target = msg.From,\\n    Tags = [\\n        Balance = bal,\\n        Account = msg.Tags.Recipient or msg.From,\\n    ]\\n    Data = bal\\n  })\\nend)\\n\\nHandlers.add('mint', Handlers.utils.hasMatchingTag('Action', 'Mint'), function(msg)\\n  assert(type(msg.Quantity) == 'string', 'Quantity is required!')\\n  assert(0 < tonumber(msg.Quantity), 'Quantity must be greater than zero!')\\n\\n  if not Balances[ao.id] then Balances[ao.id] = 0 end\\n\\n  -- Add tokens to the token pool, according to Quantity\\n  Balances[msg.From] = Balances[msg.From] + tonumber(msg.Quantity)\\n  TotalSupply = TotalSupply + tonumber(msg.Quantity)\\n\\n  ao.send({\\n    Target = msg.From,\\n    Data = Colors.gray .. \\\"Successfully minted \\\" .. Colors.blue .. msg.Quantity .. Colors.reset\\n  })\\nend)\\n\\nHandlers.add('burn', Handlers.utils.hasMatchingTag('Action', 'Burn'), function(msg)\\n  assert(type(msg.Quantity) == 'string', 'Quantity is required!')\\n  assert(tonumber(msg.Quantity) <= tonumber(Balances[msg.From]), 'Quantity must be less than or equal to the current balance!')\\n\\n  Balances[msg.From] = Balances[msg.From] - tonumber(msg.Quantity)\\n  TotalSupply = TotalSupply - tonumber(msg.Quantity)\\n\\n  ao.send({\\n    Target = msg.From,\\n    Data = Colors.gray .. \\\"Successfully burned \\\" .. Colors.blue .. msg.Quantity .. Colors.reset\\n  })\\nend)\\n```\\n\\n\\n## Process Design Principles\\n\\nWhen designing AO processes, it is essential to follow certain design principles to ensure that the processes are efficient, maintainable, and scalable. Here are some key design principles to keep in mind:\\n\\n### 1. Modularity\\n\\nModularity is the practice of breaking down a system into smaller, independent modules that can be developed, tested, and maintained separately. In the context of AO processes, it is essential to break down the process logic into smaller, reusable components that can be easily combined to create complex processes.\\n\\nWhat we can do is to break down the process into smaller modules, such as `balance`, `transfer`, `mint`, `burn`, etc. This will make the code more organized and easier to maintain and test.\\n\\n:::tip[Handy Tip]\\nThat's why in create-ao-dapp the `process.lua` file is broken down into `process_lib.lua` and the entry point file only contains the `Handlers` and the global variables.\\n:::\\n\\nFor displaying porposes we will only break things into `process_lib.lua` and `process.lua`.\\n\\n::::code-group\\n\\n```lua [process.lua]\\nlocal process_lib = require('process_lib') -- [!code hl] -- [!code focus]\\n\\nVersion = \\\"1.0.0\\\"\\n\\n-- token should be idempotent and not change previous state updates\\nBalances = Balances or { [ao.id] = 1000 }\\nTotalSupply = TotalSupply or 1000\\nName = \\\"test token\\\"\\n\\nHandlers.add('info', \\n    Handlers.utils.hasMatchingTag('Action', 'Info'),\\n    process_lib.getInfo -- [!code hl] -- [!code focus]\\n)\\n\\nHandlers.add('balance', \\n    Handlers.utils.hasMatchingTag('Action', 'Balance'),\\n    process_lib.getBalance -- [!code hl] -- [!code focus]\\n)\\n\\nHandlers.add('mint', \\n    Handlers.utils.hasMatchingTag('Action', 'Mint'),\\n    process_lib.mint -- [!code hl] -- [!code focus]\\n)\\n\\nHandlers.add('burn', \\n    Handlers.utils.hasMatchingTag('Action', 'Burn'),\\n    process_lib.burn -- [!code hl] -- [!code focus]\\n)\\n```\\n\\n```lua [process_lib.lua]\\nlocal ao = require('ao')\\nlocal process_lib = {}\\n\\nfunction process_lib.getInfo(msg)\\n    ao.send({\\n        Target = msg.From,\\n        Tags = {\\n            Name = Name,\\n            TotalSuppy = TotalSupply\\n        }\\n    })\\nend\\n\\nfunction process_lib.getBalance(msg)\\n    local bal = 0\\n\\n    -- If not Recipient is provided, then return the Senders balance\\n    if (msg.Tags.Recipient) then\\n        if (Balances[msg.Tags.Recipient]) then\\n            bal = Balances[msg.Tags.Recipient]\\n        end\\n    elseif Balances[msg.From] then\\n        bal = Balances[msg.From]\\n    end\\n\\n    ao.send({\\n        Target = msg.From,\\n        Tags = {\\n            Balance = bal,\\n            Account = msg.Tags.Recipient or msg.From,\\n        },\\n        Data = bal\\n    })\\nend\\n\\nfunction process_lib.mint(msg)\\n    assert(type(msg.Quantity) == 'string', 'Quantity is required!')\\n    assert(0 < tonumber(msg.Quantity), 'Quantity must be greater than zero!')\\n\\n    if not Balances[ao.id] then Balances[ao.id] = 0 end\\n\\n    -- Add tokens to the token pool, according to Quantity\\n    Balances[msg.From] = Balances[msg.From] + tonumber(msg.Quantity)\\n    TotalSupply = TotalSupply + tonumber(msg.Quantity)\\n\\n    ao.send({\\n        Target = msg.From,\\n        Data = Colors.gray .. \\\"Successfully minted \\\" .. Colors.blue .. msg.Quantity .. Colors.reset\\n    })\\nend\\n\\nfunction process_lib.burn(msg)\\n    assert(type(msg.Quantity) == 'string', 'Quantity is required!')\\n    assert(tonumber(msg.Quantity) <= tonumber(Balances[msg.From]), 'Quantity must be less than or equal to the current balance!')\\n\\n    Balances[msg.From] = Balances[msg.From] - tonumber(msg.Quantity)\\n    TotalSupply = TotalSupply - tonumber(msg.Quantity)\\n\\n    ao.send({\\n        Target = msg.From,\\n        Data = Colors.gray .. \\\"Successfully burned \\\" .. Colors.blue .. msg.Quantity .. Colors.reset\\n    })\\nend\\n\\nreturn process_lib\\n```\\n::::\\n\\n### 2. Separation of Concerns\\n\\nSeparation of concerns is the practice of dividing a system into distinct sections, each responsible for a specific aspect of the system's functionality. In the context of AO processes, it is essential to separate the process logic from other concerns, such as input/output handling, error handling, and logging. This makes the code more organized and easier to maintain, test, and debug.\\n\\nContinuing with the previous example, we can separate the process logic from the input/output handling by creating separate function to handle replying things to the user.\\n\\n:::tip[Handy Tip]\\n To enable testing and also having a better flow to respond to user messages and sending replies, we can create a `sendReply` function that will handle the sending of messages to the user.\\n:::\\n\\n```lua [process_lib.lua]\\nlocal ao = require('ao')\\nlocal process_lib = {}\\n\\nfunction process_lib.getInfo(msg)\\n    process_lib.sendReply(msg, { -- [!code hl] -- [!code focus]\\n        Name = Name, -- [!code hl] -- [!code focus]\\n        TotalSuppy = TotalSupply -- [!code hl] -- [!code focus]\\n    }, \\\"\\\") -- [!code hl] -- [!code focus]\\n\\n    return {\\n        Name = Name,\\n        TotalSuppy = TotalSupply\\n    }\\nend\\n\\nfunction process_lib.getBalance(msg)\\n    local bal = 0\\n\\n    -- If not Recipient is provided, then return the Senders balance\\n    if (msg.Tags.Recipient) then\\n        if (Balances[msg.Tags.Recipient]) then\\n            bal = Balances[msg.Tags.Recipient]\\n        end\\n    elseif Balances[msg.From] then\\n        bal = Balances[msg.From]\\n    end\\n\\n    process_lib.sendReply(msg, { -- [!code hl]\\n        Balance = bal, -- [!code hl]\\n        Account = msg.Tags.Recipient or msg.From, -- [!code hl]\\n    }, bal) -- [!code hl]\\n\\n    return {\\n        Balance = bal,\\n        Account = msg.Tags.Recipient or msg.From\\n    }\\nend\\n\\nfunction process_lib.mint(msg)\\n    assert(type(msg.Quantity) == 'string', 'Quantity is required!')\\n    assert(0 < tonumber(msg.Quantity), 'Quantity must be greater than zero!')\\n\\n    if not Balances[ao.id] then Balances[ao.id] = 0 end\\n\\n    -- Add tokens to the token pool, according to Quantity\\n    Balances[msg.From] = Balances[msg.From] + tonumber(msg.Quantity)\\n    TotalSupply = TotalSupply + tonumber(msg.Quantity)\\n\\n    process_lib.sendReply(msg, {}, Colors.gray .. \\\"Successfully minted \\\" .. Colors.blue .. msg.Quantity .. Colors.reset) -- [!code hl]\\n\\n    return {\\n        Balance = Balances[msg.From],\\n    } -- [!code hl]\\nend\\n\\nfunction process_lib.burn(msg)\\n    assert(type(msg.Quantity) == 'string', 'Quantity is required!')\\n    assert(tonumber(msg.Quantity) <= tonumber(Balances[msg.From]), 'Quantity must be less than or equal to the current balance!')\\n\\n    Balances[msg.From] = Balances[msg.From] - tonumber(msg.Quantity)\\n    TotalSupply = TotalSupply - tonumber(msg.Quantity)\\n\\n    process_lib.sendReply(msg, {}, Colors.gray .. \\\"Successfully burned \\\" .. Colors.blue .. msg.Quantity .. Colors.reset) -- [!code hl]\\n\\n    return {\\n        Balance = Balances[msg.From],\\n    } -- [!code hl]\\nend\\n\\nfunction process_lib.sendReply(msg, tags, data) -- [!code hl] -- [!code focus]\\n    ao.send({ -- [!code hl] -- [!code focus]\\n        Target = msg.From, -- [!code hl] -- [!code focus]\\n        [\\\"Response-For\\\"] = msg.Action, -- [!code hl] -- [!code focus]\\n        Tags = tags, -- [!code hl] -- [!code focus]\\n        Data = data -- [!code hl] -- [!code focus]\\n    }) -- [!code hl] -- [!code focus]\\nend\\n\\nreturn process_lib\\n```\\n\\n\\n`sendReply` is basically just a wrapper around the `ao.send` function, but it makes the code more readable and easier to maintain. It also allows us to easily test the process logic without having to worry about the input/output handling.\\n\\n:::tip[Handy Tip]\\nIt also introduces a new tag `[\\\"Response-For\\\"]` which will be used to identify the action that the response is for. This will help in identifying the action that the response is for in the frontend.\\n:::\\n\\nIn the next section, we will introduce [Ao Process Testing](https://github.com/Autonomous-Finance/ao-process-testing) and discuss how to write unit tests for AO processes to ensure that they are working as expected.\",\"document\":[{\"href\":\"/process-development/process-design#process-design\",\"html\":\"<div role=\\\"doc-subtitle\\\">This section provides an overview of the process design and best practices for writing AO processes.</div></header>\\n<p>In this section, we will discuss the design principles and best practices for writing AO processes. AO processes are written in Lua, a lightweight, high-level, multi-paradigm programming language. Lua is designed to be embedded in other applications, making it an ideal choice for writing AO processes.</p>\\n<p>An over simplified AO token process could look like this, however, try and follow along with the code below. It&#x27;s not really easy to comprehend and follow, but we will break it down and explain how things can be improved in the following sections.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"process.lua\\\" data-lang=\\\"lua\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">local</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> ao </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> require</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;ao&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Version </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;1.0.0&quot;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">-- token should be idempotent and not change previous state updates</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Balances </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">or</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { [ao.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">id</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 1000</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">TotalSupply </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> TotalSupply </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">or</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 1000</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Name </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;test token&quot;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Handlers.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">add</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;info&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, Handlers.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">utils</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">hasMatchingTag</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Action&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Info&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">), </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">function</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  ao.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">send</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    Target </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    Tags </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Name </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Name,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        TotalSuppy </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> TotalSupply</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    ]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  })</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">end</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Handlers.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">add</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;balance&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, Handlers.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">utils</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">hasMatchingTag</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Action&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Balance&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">), </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">function</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">  local</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> bal </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 0</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">  -- If not Recipient is provided, then return the Senders balance</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">  if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Tags</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Recipient</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">then</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Tags</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Recipient</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">then</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      bal </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Tags</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Recipient</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    end</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">  elseif</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">then</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    bal </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">  end</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  ao.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">send</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    Target </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    Tags </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Balance </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> bal,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Account </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Tags</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Recipient</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> or</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    ]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    Data </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> bal</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  })</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">end</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Handlers.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">add</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;mint&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, Handlers.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">utils</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">hasMatchingTag</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Action&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Mint&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">), </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">function</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">  assert</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">type</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">==</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;string&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Quantity is required!&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">  assert</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">0</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> &lt;</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> tonumber</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">), </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Quantity must be greater than zero!&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">  if</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> not</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances[ao.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">id</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">then</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances[ao.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">id</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 0</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> end</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">  -- Add tokens to the token pool, according to Quantity</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">+</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> tonumber</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  TotalSupply </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> TotalSupply </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">+</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> tonumber</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  ao.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">send</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    Target </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    Data </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Colors.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">gray</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> ..</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;Successfully minted &quot; </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">..</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Colors.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">blue</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> ..</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> ..</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Colors.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">reset</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  })</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">end</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Handlers.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">add</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;burn&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, Handlers.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">utils</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">hasMatchingTag</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Action&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Burn&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">), </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">function</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">  assert</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">type</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">==</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;string&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Quantity is required!&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">  assert</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">tonumber</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&lt;=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> tonumber</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]), </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Quantity must be less than or equal to the current balance!&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">-</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> tonumber</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  TotalSupply </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> TotalSupply </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">-</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> tonumber</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  ao.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">send</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    Target </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    Data </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Colors.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">gray</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> ..</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;Successfully burned &quot; </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">..</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Colors.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">blue</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> ..</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> ..</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Colors.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">reset</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  })</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">end</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span></code></pre>\\n\",\"id\":\"site/pages/process-development/process-design.mdx#process-design\",\"isPage\":true,\"text\":\"This section provides an overview of the process design and best practices for writing AO processes.\\nIn this section, we will discuss the design principles and best practices for writing AO processes. AO processes are written in Lua, a lightweight, high-level, multi-paradigm programming language. Lua is designed to be embedded in other applications, making it an ideal choice for writing AO processes.\\nAn over simplified AO token process could look like this, however, try and follow along with the code below. It&#x27;s not really easy to comprehend and follow, but we will break it down and explain how things can be improved in the following sections.\\nlocal ao = require(&#x27;ao&#x27;)\\n \\nVersion = &quot;1.0.0&quot;\\n \\n-- token should be idempotent and not change previous state updates\\nBalances = Balances or { [ao.id] = 1000 }\\nTotalSupply = TotalSupply or 1000\\nName = &quot;test token&quot;\\n \\nHandlers.add(&#x27;info&#x27;, Handlers.utils.hasMatchingTag(&#x27;Action&#x27;, &#x27;Info&#x27;), function(msg)\\n  ao.send({\\n    Target = msg.From,\\n    Tags = [\\n        Name = Name,\\n        TotalSuppy = TotalSupply\\n    ]\\n  })\\nend)\\n \\nHandlers.add(&#x27;balance&#x27;, Handlers.utils.hasMatchingTag(&#x27;Action&#x27;, &#x27;Balance&#x27;), function(msg)\\n  local bal = 0\\n \\n  -- If not Recipient is provided, then return the Senders balance\\n  if (msg.Tags.Recipient) then\\n    if (Balances[msg.Tags.Recipient]) then\\n      bal = Balances[msg.Tags.Recipient]\\n    end\\n  elseif Balances[msg.From] then\\n    bal = Balances[msg.From]\\n  end\\n \\n  ao.send({\\n    Target = msg.From,\\n    Tags = [\\n        Balance = bal,\\n        Account = msg.Tags.Recipient or msg.From,\\n    ]\\n    Data = bal\\n  })\\nend)\\n \\nHandlers.add(&#x27;mint&#x27;, Handlers.utils.hasMatchingTag(&#x27;Action&#x27;, &#x27;Mint&#x27;), function(msg)\\n  assert(type(msg.Quantity) == &#x27;string&#x27;, &#x27;Quantity is required!&#x27;)\\n  assert(0 &lt; tonumber(msg.Quantity), &#x27;Quantity must be greater than zero!&#x27;)\\n \\n  if not Balances[ao.id] then Balances[ao.id] = 0 end\\n \\n  -- Add tokens to the token pool, according to Quantity\\n  Balances[msg.From] = Balances[msg.From] + tonumber(msg.Quantity)\\n  TotalSupply = TotalSupply + tonumber(msg.Quantity)\\n \\n  ao.send({\\n    Target = msg.From,\\n    Data = Colors.gray .. &quot;Successfully minted &quot; .. Colors.blue .. msg.Quantity .. Colors.reset\\n  })\\nend)\\n \\nHandlers.add(&#x27;burn&#x27;, Handlers.utils.hasMatchingTag(&#x27;Action&#x27;, &#x27;Burn&#x27;), function(msg)\\n  assert(type(msg.Quantity) == &#x27;string&#x27;, &#x27;Quantity is required!&#x27;)\\n  assert(tonumber(msg.Quantity) &lt;= tonumber(Balances[msg.From]), &#x27;Quantity must be less than or equal to the current balance!&#x27;)\\n \\n  Balances[msg.From] = Balances[msg.From] - tonumber(msg.Quantity)\\n  TotalSupply = TotalSupply - tonumber(msg.Quantity)\\n \\n  ao.send({\\n    Target = msg.From,\\n    Data = Colors.gray .. &quot;Successfully burned &quot; .. Colors.blue .. msg.Quantity .. Colors.reset\\n  })\\nend)\\n\",\"title\":\"Process Design\",\"titles\":[]},{\"href\":\"/process-development/process-design#process-design-principles\",\"html\":\"\\n<p>When designing AO processes, it is essential to follow certain design principles to ensure that the processes are efficient, maintainable, and scalable. Here are some key design principles to keep in mind:</p>\\n\",\"id\":\"site/pages/process-development/process-design.mdx#process-design-principles\",\"isPage\":false,\"text\":\"\\nWhen designing AO processes, it is essential to follow certain design principles to ensure that the processes are efficient, maintainable, and scalable. Here are some key design principles to keep in mind:\\n\",\"title\":\"Process Design Principles\",\"titles\":[\"Process Design\"]},{\"href\":\"/process-development/process-design#1-modularity\",\"html\":\"\\n<p>Modularity is the practice of breaking down a system into smaller, independent modules that can be developed, tested, and maintained separately. In the context of AO processes, it is essential to break down the process logic into smaller, reusable components that can be easily combined to create complex processes.</p>\\n<p>What we can do is to break down the process into smaller modules, such as <code>balance</code>, <code>transfer</code>, <code>mint</code>, <code>burn</code>, etc. This will make the code more organized and easier to maintain and test.</p>\\n<aside data-callout=\\\"tip\\\"><strong data-callout-title=\\\"true\\\">Handy Tip</strong><p>That&#x27;s why in create-ao-dapp the <code>process.lua</code> file is broken down into <code>process_lib.lua</code> and the entry point file only contains the <code>Handlers</code> and the global variables.</p></aside>\\n<p>For displaying porposes we will only break things into <code>process_lib.lua</code> and <code>process.lua</code>.</p>\\n<div class=\\\"code-group\\\"><div data-title=\\\"process.lua\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused has-highlighted\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"process.lua\\\" data-lang=\\\"lua\\\"><code><span class=\\\"line focused highlighted\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">local</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> process_lib </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> require</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;process_lib&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Version </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;1.0.0&quot;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">-- token should be idempotent and not change previous state updates</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Balances </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">or</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { [ao.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">id</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 1000</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">TotalSupply </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> TotalSupply </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">or</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 1000</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Name </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;test token&quot;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Handlers.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">add</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;info&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    Handlers.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">utils</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">hasMatchingTag</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Action&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Info&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">),</span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    process_lib.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">getInfo</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Handlers.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">add</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;balance&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    Handlers.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">utils</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">hasMatchingTag</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Action&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Balance&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">),</span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    process_lib.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">getBalance</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Handlers.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">add</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;mint&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    Handlers.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">utils</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">hasMatchingTag</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Action&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Mint&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">),</span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    process_lib.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">mint</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Handlers.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">add</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;burn&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    Handlers.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">utils</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">hasMatchingTag</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Action&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Burn&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">),</span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    process_lib.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">burn</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span></code></pre></div><div data-title=\\\"process_lib.lua\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"process_lib.lua\\\" data-lang=\\\"lua\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">local</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> ao </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> require</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;ao&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">local</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> process_lib </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">function</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> process_lib</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">getInfo</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    ao.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">send</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Target </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Tags </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            Name </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Name,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            TotalSuppy </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> TotalSupply</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    })</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">end</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">function</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> process_lib</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">getBalance</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    local</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> bal </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 0</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    -- If not Recipient is provided, then return the Senders balance</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Tags</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Recipient</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">then</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Tags</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Recipient</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">then</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            bal </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Tags</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Recipient</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        end</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    elseif</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">then</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        bal </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    end</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    ao.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">send</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Target </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Tags </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            Balance </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> bal,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            Account </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Tags</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Recipient</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> or</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Data </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> bal</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    })</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">end</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">function</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> process_lib</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">mint</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">    assert</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">type</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">==</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;string&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Quantity is required!&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">    assert</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">0</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> &lt;</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> tonumber</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">), </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Quantity must be greater than zero!&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> not</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances[ao.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">id</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">then</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances[ao.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">id</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 0</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> end</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    -- Add tokens to the token pool, according to Quantity</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">+</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> tonumber</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    TotalSupply </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> TotalSupply </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">+</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> tonumber</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    ao.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">send</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Target </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Data </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Colors.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">gray</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> ..</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;Successfully minted &quot; </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">..</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Colors.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">blue</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> ..</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> ..</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Colors.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">reset</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    })</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">end</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">function</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> process_lib</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">burn</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">    assert</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">type</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">==</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;string&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Quantity is required!&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">    assert</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">tonumber</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&lt;=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> tonumber</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]), </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Quantity must be less than or equal to the current balance!&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">-</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> tonumber</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    TotalSupply </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> TotalSupply </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">-</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> tonumber</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    ao.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">send</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Target </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Data </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Colors.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">gray</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> ..</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;Successfully burned &quot; </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">..</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Colors.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">blue</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> ..</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> ..</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Colors.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">reset</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    })</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">end</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> process_lib</span></span></code></pre></div></div>\\n\",\"id\":\"site/pages/process-development/process-design.mdx#1-modularity\",\"isPage\":false,\"text\":\"\\nModularity is the practice of breaking down a system into smaller, independent modules that can be developed, tested, and maintained separately. In the context of AO processes, it is essential to break down the process logic into smaller, reusable components that can be easily combined to create complex processes.\\nWhat we can do is to break down the process into smaller modules, such as balance, transfer, mint, burn, etc. This will make the code more organized and easier to maintain and test.\\nHandy TipThat&#x27;s why in create-ao-dapp the process.lua file is broken down into process_lib.lua and the entry point file only contains the Handlers and the global variables.\\nFor displaying porposes we will only break things into process_lib.lua and process.lua.\\nlocal process_lib = require(&#x27;process_lib&#x27;) \\n \\nVersion = &quot;1.0.0&quot;\\n \\n-- token should be idempotent and not change previous state updates\\nBalances = Balances or { [ao.id] = 1000 }\\nTotalSupply = TotalSupply or 1000\\nName = &quot;test token&quot;\\n \\nHandlers.add(&#x27;info&#x27;, \\n    Handlers.utils.hasMatchingTag(&#x27;Action&#x27;, &#x27;Info&#x27;),\\n    process_lib.getInfo\\n)\\n \\nHandlers.add(&#x27;balance&#x27;, \\n    Handlers.utils.hasMatchingTag(&#x27;Action&#x27;, &#x27;Balance&#x27;),\\n    process_lib.getBalance\\n)\\n \\nHandlers.add(&#x27;mint&#x27;, \\n    Handlers.utils.hasMatchingTag(&#x27;Action&#x27;, &#x27;Mint&#x27;),\\n    process_lib.mint\\n)\\n \\nHandlers.add(&#x27;burn&#x27;, \\n    Handlers.utils.hasMatchingTag(&#x27;Action&#x27;, &#x27;Burn&#x27;),\\n    process_lib.burn\\n)local ao = require(&#x27;ao&#x27;)\\nlocal process_lib = {}\\n \\nfunction process_lib.getInfo(msg)\\n    ao.send({\\n        Target = msg.From,\\n        Tags = {\\n            Name = Name,\\n            TotalSuppy = TotalSupply\\n        }\\n    })\\nend\\n \\nfunction process_lib.getBalance(msg)\\n    local bal = 0\\n \\n    -- If not Recipient is provided, then return the Senders balance\\n    if (msg.Tags.Recipient) then\\n        if (Balances[msg.Tags.Recipient]) then\\n            bal = Balances[msg.Tags.Recipient]\\n        end\\n    elseif Balances[msg.From] then\\n        bal = Balances[msg.From]\\n    end\\n \\n    ao.send({\\n        Target = msg.From,\\n        Tags = {\\n            Balance = bal,\\n            Account = msg.Tags.Recipient or msg.From,\\n        },\\n        Data = bal\\n    })\\nend\\n \\nfunction process_lib.mint(msg)\\n    assert(type(msg.Quantity) == &#x27;string&#x27;, &#x27;Quantity is required!&#x27;)\\n    assert(0 &lt; tonumber(msg.Quantity), &#x27;Quantity must be greater than zero!&#x27;)\\n \\n    if not Balances[ao.id] then Balances[ao.id] = 0 end\\n \\n    -- Add tokens to the token pool, according to Quantity\\n    Balances[msg.From] = Balances[msg.From] + tonumber(msg.Quantity)\\n    TotalSupply = TotalSupply + tonumber(msg.Quantity)\\n \\n    ao.send({\\n        Target = msg.From,\\n        Data = Colors.gray .. &quot;Successfully minted &quot; .. Colors.blue .. msg.Quantity .. Colors.reset\\n    })\\nend\\n \\nfunction process_lib.burn(msg)\\n    assert(type(msg.Quantity) == &#x27;string&#x27;, &#x27;Quantity is required!&#x27;)\\n    assert(tonumber(msg.Quantity) &lt;= tonumber(Balances[msg.From]), &#x27;Quantity must be less than or equal to the current balance!&#x27;)\\n \\n    Balances[msg.From] = Balances[msg.From] - tonumber(msg.Quantity)\\n    TotalSupply = TotalSupply - tonumber(msg.Quantity)\\n \\n    ao.send({\\n        Target = msg.From,\\n        Data = Colors.gray .. &quot;Successfully burned &quot; .. Colors.blue .. msg.Quantity .. Colors.reset\\n    })\\nend\\n \\nreturn process_lib\\n\",\"title\":\"1. Modularity\",\"titles\":[\"Process Design\",\"Process Design Principles\"]},{\"href\":\"/process-development/process-design#2-separation-of-concerns\",\"html\":\"\\n<p>Separation of concerns is the practice of dividing a system into distinct sections, each responsible for a specific aspect of the system&#x27;s functionality. In the context of AO processes, it is essential to separate the process logic from other concerns, such as input/output handling, error handling, and logging. This makes the code more organized and easier to maintain, test, and debug.</p>\\n<p>Continuing with the previous example, we can separate the process logic from the input/output handling by creating separate function to handle replying things to the user.</p>\\n<aside data-callout=\\\"tip\\\"><strong data-callout-title=\\\"true\\\">Handy Tip</strong><p>To enable testing and also having a better flow to respond to user messages and sending replies, we can create a <code>sendReply</code> function that will handle the sending of messages to the user.</p></aside>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused has-highlighted\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"process_lib.lua\\\" data-lang=\\\"lua\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">local</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> ao </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> require</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;ao&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">local</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> process_lib </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">function</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> process_lib</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">getInfo</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg)</span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    process_lib.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">sendReply</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg, { </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Name </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Name, </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        TotalSuppy </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> TotalSupply </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Name </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Name,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        TotalSuppy </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> TotalSupply</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">end</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">function</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> process_lib</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">getBalance</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    local</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> bal </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 0</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    -- If not Recipient is provided, then return the Senders balance</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Tags</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Recipient</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">then</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Tags</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Recipient</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">then</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            bal </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Tags</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Recipient</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        end</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    elseif</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">then</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        bal </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    end</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    process_lib.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">sendReply</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg, { </span></span>\\n<span class=\\\"line highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Balance </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> bal, </span></span>\\n<span class=\\\"line highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Account </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Tags</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Recipient</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> or</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }, bal) </span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Balance </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> bal,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Account </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Tags</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Recipient</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> or</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">end</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">function</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> process_lib</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">mint</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">    assert</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">type</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">==</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;string&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Quantity is required!&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">    assert</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">0</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> &lt;</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> tonumber</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">), </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Quantity must be greater than zero!&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> not</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances[ao.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">id</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">then</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances[ao.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">id</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 0</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> end</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    -- Add tokens to the token pool, according to Quantity</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">+</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> tonumber</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    TotalSupply </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> TotalSupply </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">+</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> tonumber</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    process_lib.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">sendReply</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg, {}, Colors.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">gray</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> ..</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;Successfully minted &quot; </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">..</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Colors.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">blue</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> ..</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> ..</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Colors.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">reset</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Balance </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">],</span></span>\\n<span class=\\\"line highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    } </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">end</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">function</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> process_lib</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">burn</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">    assert</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">type</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">==</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;string&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Quantity is required!&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">    assert</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">tonumber</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&lt;=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> tonumber</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]), </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Quantity must be less than or equal to the current balance!&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">-</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> tonumber</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    TotalSupply </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> TotalSupply </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">-</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> tonumber</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    process_lib.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">sendReply</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg, {}, Colors.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">gray</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> ..</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;Successfully burned &quot; </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">..</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Colors.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">blue</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> ..</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> ..</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Colors.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">reset</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Balance </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">],</span></span>\\n<span class=\\\"line highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    } </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">end</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">function</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> process_lib</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">sendReply</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg, tags, data) </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    ao.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">send</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({ </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Target </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        [</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;Response-For&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Action</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Tags </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> tags, </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Data </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> data </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }) </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">end</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> process_lib</span></span></code></pre>\\n<p><code>sendReply</code> is basically just a wrapper around the <code>ao.send</code> function, but it makes the code more readable and easier to maintain. It also allows us to easily test the process logic without having to worry about the input/output handling.</p>\\n<aside data-callout=\\\"tip\\\"><strong data-callout-title=\\\"true\\\">Handy Tip</strong><p>It also introduces a new tag <code>[&quot;Response-For&quot;]</code> which will be used to identify the action that the response is for. This will help in identifying the action that the response is for in the frontend.</p></aside>\\n<p>In the next section, we will introduce <a href=\\\"https://github.com/Autonomous-Finance/ao-process-testing\\\">Ao Process Testing</a> and discuss how to write unit tests for AO processes to ensure that they are working as expected.</p>\",\"id\":\"site/pages/process-development/process-design.mdx#2-separation-of-concerns\",\"isPage\":false,\"text\":\"\\nSeparation of concerns is the practice of dividing a system into distinct sections, each responsible for a specific aspect of the system&#x27;s functionality. In the context of AO processes, it is essential to separate the process logic from other concerns, such as input/output handling, error handling, and logging. This makes the code more organized and easier to maintain, test, and debug.\\nContinuing with the previous example, we can separate the process logic from the input/output handling by creating separate function to handle replying things to the user.\\nHandy TipTo enable testing and also having a better flow to respond to user messages and sending replies, we can create a sendReply function that will handle the sending of messages to the user.\\nlocal ao = require(&#x27;ao&#x27;)\\nlocal process_lib = {}\\n \\nfunction process_lib.getInfo(msg)\\n    process_lib.sendReply(msg, { \\n        Name = Name, \\n        TotalSuppy = TotalSupply \\n    }, &quot;&quot;) \\n \\n    return {\\n        Name = Name,\\n        TotalSuppy = TotalSupply\\n    }\\nend\\n \\nfunction process_lib.getBalance(msg)\\n    local bal = 0\\n \\n    -- If not Recipient is provided, then return the Senders balance\\n    if (msg.Tags.Recipient) then\\n        if (Balances[msg.Tags.Recipient]) then\\n            bal = Balances[msg.Tags.Recipient]\\n        end\\n    elseif Balances[msg.From] then\\n        bal = Balances[msg.From]\\n    end\\n \\n    process_lib.sendReply(msg, { \\n        Balance = bal, \\n        Account = msg.Tags.Recipient or msg.From, \\n    }, bal) \\n \\n    return {\\n        Balance = bal,\\n        Account = msg.Tags.Recipient or msg.From\\n    }\\nend\\n \\nfunction process_lib.mint(msg)\\n    assert(type(msg.Quantity) == &#x27;string&#x27;, &#x27;Quantity is required!&#x27;)\\n    assert(0 &lt; tonumber(msg.Quantity), &#x27;Quantity must be greater than zero!&#x27;)\\n \\n    if not Balances[ao.id] then Balances[ao.id] = 0 end\\n \\n    -- Add tokens to the token pool, according to Quantity\\n    Balances[msg.From] = Balances[msg.From] + tonumber(msg.Quantity)\\n    TotalSupply = TotalSupply + tonumber(msg.Quantity)\\n \\n    process_lib.sendReply(msg, {}, Colors.gray .. &quot;Successfully minted &quot; .. Colors.blue .. msg.Quantity .. Colors.reset) \\n \\n    return {\\n        Balance = Balances[msg.From],\\n    } \\nend\\n \\nfunction process_lib.burn(msg)\\n    assert(type(msg.Quantity) == &#x27;string&#x27;, &#x27;Quantity is required!&#x27;)\\n    assert(tonumber(msg.Quantity) &lt;= tonumber(Balances[msg.From]), &#x27;Quantity must be less than or equal to the current balance!&#x27;)\\n \\n    Balances[msg.From] = Balances[msg.From] - tonumber(msg.Quantity)\\n    TotalSupply = TotalSupply - tonumber(msg.Quantity)\\n \\n    process_lib.sendReply(msg, {}, Colors.gray .. &quot;Successfully burned &quot; .. Colors.blue .. msg.Quantity .. Colors.reset) \\n \\n    return {\\n        Balance = Balances[msg.From],\\n    } \\nend\\n \\nfunction process_lib.sendReply(msg, tags, data) \\n    ao.send({ \\n        Target = msg.From, \\n        [&quot;Response-For&quot;] = msg.Action, \\n        Tags = tags, \\n        Data = data \\n    }) \\nend\\n \\nreturn process_lib\\nsendReply is basically just a wrapper around the ao.send function, but it makes the code more readable and easier to maintain. It also allows us to easily test the process logic without having to worry about the input/output handling.\\nHandy TipIt also introduces a new tag [&quot;Response-For&quot;] which will be used to identify the action that the response is for. This will help in identifying the action that the response is for in the frontend.\\nIn the next section, we will introduce Ao Process Testing and discuss how to write unit tests for AO processes to ensure that they are working as expected.\",\"title\":\"2. Separation of Concerns\",\"titles\":[\"Process Design\",\"Process Design Principles\"]}]}],[\"index.3cc371d40379ddc1a61c01c63a9164acf1feb08ac3417552446cff46d9b3022d\",{\"mdx\":\"# Building the frontend\\n\\nThe frontend is a Vite React application. It is a single-page application (SPA) that provides a user interface for the backend services.\\n\\nBuilding the vite frontend is a simple process. You can learn more about building in the official Vite documentation [here](https://vitejs.dev/guide/build.html).\\n\\nTo build the frontend, run the following command:\\n\\n```bash [Terminal]\\nnpm run frontend:build\\n```\\n\\nYou can deploy your frontend to a static hosting service like Vercel, Netlify, or GitHub Pages.\\n\\n:::tip[Handy Tip]\\nWouldn't it be awesome if your frontend could be deployed to the Permaweb? You can do that with permaweb deployment tool that Create Ao dApp provides.\\n\\nCheck out the [Deploying to Permaweb](/frontend-development/permaweb-deployment) guide to learn more.\\n:::\",\"document\":[{\"href\":\"/frontend-development/building#building-the-frontend\",\"html\":\"</header>\\n<p>The frontend is a Vite React application. It is a single-page application (SPA) that provides a user interface for the backend services.</p>\\n<p>Building the vite frontend is a simple process. You can learn more about building in the official Vite documentation <a href=\\\"https://vitejs.dev/guide/build.html\\\">here</a>.</p>\\n<p>To build the frontend, run the following command:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Terminal\\\" data-lang=\\\"bash\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">npm</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> run</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> frontend:build</span></span></code></pre>\\n<p>You can deploy your frontend to a static hosting service like Vercel, Netlify, or GitHub Pages.</p>\\n<aside data-callout=\\\"tip\\\"><strong data-callout-title=\\\"true\\\">Handy Tip</strong><p>Wouldn&#x27;t it be awesome if your frontend could be deployed to the Permaweb? You can do that with permaweb deployment tool that Create Ao dApp provides.</p><p>Check out the <a href=\\\"/frontend-development/permaweb-deployment\\\">Deploying to Permaweb</a> guide to learn more.</p></aside>\",\"id\":\"site/pages/frontend-development/building.mdx#building-the-frontend\",\"isPage\":true,\"text\":\"\\nThe frontend is a Vite React application. It is a single-page application (SPA) that provides a user interface for the backend services.\\nBuilding the vite frontend is a simple process. You can learn more about building in the official Vite documentation here.\\nTo build the frontend, run the following command:\\nnpm run frontend:build\\nYou can deploy your frontend to a static hosting service like Vercel, Netlify, or GitHub Pages.\\nHandy TipWouldn&#x27;t it be awesome if your frontend could be deployed to the Permaweb? You can do that with permaweb deployment tool that Create Ao dApp provides.Check out the Deploying to Permaweb guide to learn more.\",\"title\":\"Building the frontend\",\"titles\":[]}]}],[\"index.d20f0062e1eb6a48f926f844e38f165b1fd24ff42740a9e6640e310abb5e9d38\",{\"mdx\":\"# Permaweb Deployment\\n\\nThe frontend is a Vite React application. It is a single-page application (SPA) that provides a user interface for the backend services.\\n\\nDeploying the frontend to the Permaweb requires the following steps:\\n\\n- Own a arns domain.\\n- Have a wallet with enough AR to deploy the frontend.\\n- Have a funded ArDrive account to deploy the frontend.\\n\\n## arNS Domain\\n\\nYou can purchase an arNS domain from the [arns website](https://arns.app/).\\n\\n## ArDrive Account\\n\\nYou can learn more about how to create an ArDrive account from the [ArDrive documentation](https://docs.ardrive.io/).\\n\\n## Deploying the Frontend\\n\\nAfter building your static frontend, you can deploy it to permaweb by using the provided deploy script.\\n\\nLearn more about deploying to the Permaweb from the [ArDrive documentation](https://docs.ardrive.io/docs/misc/deploy/deploy.html).\\n\\nAlso, you can learn more about Permaweb deploy here: [https://github.com/permaweb/permaweb-deploy](https://github.com/permaweb/permaweb-deploy)\\n\\nIn order to deploy the frontend to the Permaweb, you need to provide the following environment variables:\\n\\n- `DEPLOY_KEY`: The key to deploy the frontend. This is the wallet key that owns the arNS domain and has enough AR.\\n\\n:::warning\\nMake sure your DEPLOY_KEY contains the wallet encrypted in base64 format.\\n\\n```bash\\nbase64 -i wallet.json | pbcopy\\n```\\n\\n:::\\n\\n- `ANT_PROCESS`: The ANT process that the frontend will connect to (This is provided by the arNS domain).\\n- `UNDERNAME`: The undername of the arNS domain that the frontend will be deployed to.\\n\\nTo deploy the frontend to the Permaweb, you need to run the following command:\\n\\n```bash [Terminal]\\nnpm run frontend:deploy\\n```\\n\\nYou can now access the frontend using the arNS domain that you own.\\n\\n:::tip[Handy Tip]\\nYou can use undernames of your arNS domain to deploy multiple environments of the frontend.\\n:::\\n\",\"document\":[{\"href\":\"/frontend-development/permaweb-deployment#permaweb-deployment\",\"html\":\"</header>\\n<p>The frontend is a Vite React application. It is a single-page application (SPA) that provides a user interface for the backend services.</p>\\n<p>Deploying the frontend to the Permaweb requires the following steps:</p>\\n<ul>\\n<li>Own a arns domain.</li>\\n<li>Have a wallet with enough AR to deploy the frontend.</li>\\n<li>Have a funded ArDrive account to deploy the frontend.</li>\\n</ul>\\n\",\"id\":\"site/pages/frontend-development/permaweb-deployment.mdx#permaweb-deployment\",\"isPage\":true,\"text\":\"\\nThe frontend is a Vite React application. It is a single-page application (SPA) that provides a user interface for the backend services.\\nDeploying the frontend to the Permaweb requires the following steps:\\n\\nOwn a arns domain.\\nHave a wallet with enough AR to deploy the frontend.\\nHave a funded ArDrive account to deploy the frontend.\\n\\n\",\"title\":\"Permaweb Deployment\",\"titles\":[]},{\"href\":\"/frontend-development/permaweb-deployment#arns-domain\",\"html\":\"\\n<p>You can purchase an arNS domain from the <a href=\\\"https://arns.app/\\\">arns website</a>.</p>\\n\",\"id\":\"site/pages/frontend-development/permaweb-deployment.mdx#arns-domain\",\"isPage\":false,\"text\":\"\\nYou can purchase an arNS domain from the arns website.\\n\",\"title\":\"arNS Domain\",\"titles\":[\"Permaweb Deployment\"]},{\"href\":\"/frontend-development/permaweb-deployment#ardrive-account\",\"html\":\"\\n<p>You can learn more about how to create an ArDrive account from the <a href=\\\"https://docs.ardrive.io/\\\">ArDrive documentation</a>.</p>\\n\",\"id\":\"site/pages/frontend-development/permaweb-deployment.mdx#ardrive-account\",\"isPage\":false,\"text\":\"\\nYou can learn more about how to create an ArDrive account from the ArDrive documentation.\\n\",\"title\":\"ArDrive Account\",\"titles\":[\"Permaweb Deployment\"]},{\"href\":\"/frontend-development/permaweb-deployment#deploying-the-frontend\",\"html\":\"\\n<p>After building your static frontend, you can deploy it to permaweb by using the provided deploy script.</p>\\n<p>Learn more about deploying to the Permaweb from the <a href=\\\"https://docs.ardrive.io/docs/misc/deploy/deploy.html\\\">ArDrive documentation</a>.</p>\\n<p>Also, you can learn more about Permaweb deploy here: <a href=\\\"https://github.com/permaweb/permaweb-deploy\\\">https://github.com/permaweb/permaweb-deploy</a></p>\\n<p>In order to deploy the frontend to the Permaweb, you need to provide the following environment variables:</p>\\n<ul>\\n<li><code>DEPLOY_KEY</code>: The key to deploy the frontend. This is the wallet key that owns the arNS domain and has enough AR.</li>\\n</ul>\\n<aside data-callout=\\\"warning\\\"><p>Make sure your DEPLOY_KEY contains the wallet encrypted in base64 format.</p><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">base64</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> -i</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> wallet.json</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> |</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> pbcopy</span></span></code></pre></aside>\\n<ul>\\n<li><code>ANT_PROCESS</code>: The ANT process that the frontend will connect to (This is provided by the arNS domain).</li>\\n<li><code>UNDERNAME</code>: The undername of the arNS domain that the frontend will be deployed to.</li>\\n</ul>\\n<p>To deploy the frontend to the Permaweb, you need to run the following command:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Terminal\\\" data-lang=\\\"bash\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">npm</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> run</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> frontend:deploy</span></span></code></pre>\\n<p>You can now access the frontend using the arNS domain that you own.</p>\\n<aside data-callout=\\\"tip\\\"><strong data-callout-title=\\\"true\\\">Handy Tip</strong><p>You can use undernames of your arNS domain to deploy multiple environments of the frontend.</p></aside>\",\"id\":\"site/pages/frontend-development/permaweb-deployment.mdx#deploying-the-frontend\",\"isPage\":false,\"text\":\"\\nAfter building your static frontend, you can deploy it to permaweb by using the provided deploy script.\\nLearn more about deploying to the Permaweb from the ArDrive documentation.\\nAlso, you can learn more about Permaweb deploy here: https://github.com/permaweb/permaweb-deploy\\nIn order to deploy the frontend to the Permaweb, you need to provide the following environment variables:\\n\\nDEPLOY_KEY: The key to deploy the frontend. This is the wallet key that owns the arNS domain and has enough AR.\\n\\nMake sure your DEPLOY_KEY contains the wallet encrypted in base64 format.base64 -i wallet.json | pbcopy\\n\\nANT_PROCESS: The ANT process that the frontend will connect to (This is provided by the arNS domain).\\nUNDERNAME: The undername of the arNS domain that the frontend will be deployed to.\\n\\nTo deploy the frontend to the Permaweb, you need to run the following command:\\nnpm run frontend:deploy\\nYou can now access the frontend using the arNS domain that you own.\\nHandy TipYou can use undernames of your arNS domain to deploy multiple environments of the frontend.\",\"title\":\"Deploying the Frontend\",\"titles\":[\"Permaweb Deployment\"]}]}],[\"index.15ebc305c3ba8dc1390103eae3f803dfd132761a322d95af4e4bd2990fc27eca\",{\"mdx\":\"# Process deployment [using aoform]\\n\\nThis section will guide you through the process of deploying the process using `aoform`. `aoform` is a tool for deploying AO processes to the AO Network. The configuration for `aoform` is stored in the `aoform.yaml` file in the process directory.\\n\\n:::info\\nDeploying processes is done using `aoform`. Ensure you have `aoform` installed on your project.\\n\\nLearn more about [AOForm](https://github.com/Autonomous-Finance/aoform)\\n:::\\n\\n## Configuring AOForm\\n\\nThe `aoform.yaml` file in the process directory contains the configuration for deploying the process using `aoform`. The basic configuration for `aoform` is as follows:\\n\\n```yaml [./ao/my-process/aoform.yaml]\\n## AoForm Configuration\\n## This file is used to configure the AoForm package\\n## For more information, visit\\n\\n- name: my-process\\n  file: build/process.lua\\n  prerun: ./src/reset_modules.lua\\n  scheduler: _GQ33BkPtZrqxA84vM8Zk-N2aO0toNNu_C-l-rawrBA\\n  module: GYrbbe0VbHim_7Hi6zrOpHQXrSQz07XNtwCnfbFo2I0\\n  tags:\\n    - name: Name\\n      value: my-process\\n```\\n\\nThe configuration specifies the name of the process, the entry point for the process, the prerun script, the scheduler, the module, and the tags for the process.\\n\\n## Deploying the Process\\n\\nTo deploy the process, run the following command in the process directory:\\n\\n```bash [Terminal]\\n# Export the wallet JSON\\nexport WALLET_JSON=\\\"$(cat ~/.aos.json)\\\"\\n\\n# Deploy the process\\ncd ao/process-name && npx aoform deploy\\n```\\n\\n:::tip[Handy Tip]\\nCreate Ao dApp provides a script to deploy the process from the root of the project. You can run the following command to deploy the process:\\n\\n```bash [Terminal]\\nnpm run myprocess:deploy\\n```\",\"document\":[{\"href\":\"/process-development/deployment#process-deployment\",\"html\":\"<div role=\\\"doc-subtitle\\\">using aoform</div></header>\\n<p>This section will guide you through the process of deploying the process using <code>aoform</code>. <code>aoform</code> is a tool for deploying AO processes to the AO Network. The configuration for <code>aoform</code> is stored in the <code>aoform.yaml</code> file in the process directory.</p>\\n<aside data-callout=\\\"info\\\"><p>Deploying processes is done using <code>aoform</code>. Ensure you have <code>aoform</code> installed on your project.</p><p>Learn more about <a href=\\\"https://github.com/Autonomous-Finance/aoform\\\">AOForm</a></p></aside>\\n\",\"id\":\"docs/pages/process-development/deployment.mdx#process-deployment\",\"isPage\":true,\"text\":\"using aoform\\nThis section will guide you through the process of deploying the process using aoform. aoform is a tool for deploying AO processes to the AO Network. The configuration for aoform is stored in the aoform.yaml file in the process directory.\\nDeploying processes is done using aoform. Ensure you have aoform installed on your project.Learn more about AOForm\\n\",\"title\":\"Process deployment\",\"titles\":[]},{\"href\":\"/process-development/deployment#configuring-aoform\",\"html\":\"\\n<p>The <code>aoform.yaml</code> file in the process directory contains the configuration for deploying the process using <code>aoform</code>. The basic configuration for <code>aoform</code> is as follows:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"./ao/my-process/aoform.yaml\\\" data-lang=\\\"yaml\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">## AoForm Configuration</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">## This file is used to configure the AoForm package</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">## For more information, visit</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">- </span><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">name</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">my-process</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">  file</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">build/process.lua</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">  prerun</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">./src/reset_modules.lua</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">  scheduler</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">_GQ33BkPtZrqxA84vM8Zk-N2aO0toNNu_C-l-rawrBA</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">  module</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">GYrbbe0VbHim_7Hi6zrOpHQXrSQz07XNtwCnfbFo2I0</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">  tags</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    - </span><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">name</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">Name</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">      value</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">my-process</span></span></code></pre>\\n<p>The configuration specifies the name of the process, the entry point for the process, the prerun script, the scheduler, the module, and the tags for the process.</p>\\n\",\"id\":\"docs/pages/process-development/deployment.mdx#configuring-aoform\",\"isPage\":false,\"text\":\"\\nThe aoform.yaml file in the process directory contains the configuration for deploying the process using aoform. The basic configuration for aoform is as follows:\\n## AoForm Configuration\\n## This file is used to configure the AoForm package\\n## For more information, visit\\n \\n- name: my-process\\n  file: build/process.lua\\n  prerun: ./src/reset_modules.lua\\n  scheduler: _GQ33BkPtZrqxA84vM8Zk-N2aO0toNNu_C-l-rawrBA\\n  module: GYrbbe0VbHim_7Hi6zrOpHQXrSQz07XNtwCnfbFo2I0\\n  tags:\\n    - name: Name\\n      value: my-process\\nThe configuration specifies the name of the process, the entry point for the process, the prerun script, the scheduler, the module, and the tags for the process.\\n\",\"title\":\"Configuring AOForm\",\"titles\":[\"Process deployment\"]},{\"href\":\"/process-development/deployment#deploying-the-process\",\"html\":\"\\n<p>To deploy the process, run the following command in the process directory:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Terminal\\\" data-lang=\\\"bash\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\"># Export the wallet JSON</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> WALLET_JSON</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;$(</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">cat</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> ~/.aos.json)&quot;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\"># Deploy the process</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">cd</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> ao/process-name</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> &amp;&amp; </span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">npx</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> aoform</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> deploy</span></span></code></pre>\\n<aside data-callout=\\\"tip\\\"><strong data-callout-title=\\\"true\\\">Handy Tip</strong><p>Create Ao dApp provides a script to deploy the process from the root of the project. You can run the following command to deploy the process:</p><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Terminal\\\" data-lang=\\\"bash\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">npm</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> run</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> myprocess:deploy</span></span></code></pre></aside>\",\"id\":\"docs/pages/process-development/deployment.mdx#deploying-the-process\",\"isPage\":false,\"text\":\"\\nTo deploy the process, run the following command in the process directory:\\n# Export the wallet JSON\\nexport WALLET_JSON=&quot;$(cat ~/.aos.json)&quot;\\n \\n# Deploy the process\\ncd ao/process-name &amp;&amp; npx aoform deploy\\nHandy TipCreate Ao dApp provides a script to deploy the process from the root of the project. You can run the following command to deploy the process:npm run myprocess:deploy\",\"title\":\"Deploying the Process\",\"titles\":[\"Process deployment\"]}]}],[\"index.7b5c994f61e79236d26c639f90de375bc87a0ccc39152a732d91e1f2354017f3\",{\"mdx\":\"# Permaweb Deployment\\n\\nThe frontend is a Vite React application. It is a single-page application (SPA) that provides a user interface for the backend services.\\n\\nDeploying the frontend to the Permaweb requires the following steps:\\n\\n- Own a arns domain.\\n- Have a wallet with enough AR to deploy the frontend.\\n- Have a funded ArDrive account to deploy the frontend.\\n\\n## arNS Domain\\n\\nYou can purchase an arNS domain from the [arns website](https://arns.app/).\\n\\n## ArDrive Account\\n\\nYou can learn more about how to create an ArDrive account from the [ArDrive documentation](https://docs.ardrive.io/).\\n\\n## Deploying the Frontend\\n\\nAfter building your static frontend, you can deploy it to permaweb by using the provided deploy script.\\n\\nLearn more about deploying to the Permaweb from the [ArDrive documentation](https://docs.ardrive.io/docs/misc/deploy/deploy.html).\\n\\nAlso, you can learn more about Permaweb deploy here: [https://github.com/permaweb/permaweb-deploy](https://github.com/permaweb/permaweb-deploy)\\n\\nIn order to deploy the frontend to the Permaweb, you need to provide the following environment variables:\\n\\n- `DEPLOY_KEY`: The key to deploy the frontend. This is the wallet key that owns the arNS domain and has enough AR.\\n\\n:::warning\\nMake sure your DEPLOY_KEY contains the wallet encrypted in base64 format.\\n\\n```bash\\nbase64 -i wallet.json | pbcopy\\n```\\n\\n:::\\n\\n- `ANT_PROCESS`: The ANT process that the frontend will connect to (This is provided by the arNS domain).\\n- `UNDERNAME`: The undername of the arNS domain that the frontend will be deployed to.\\n\\nTo deploy the frontend to the Permaweb, you need to run the following command:\\n\\n```bash [Terminal]\\nnpm run frontend:deploy\\n```\\n\\nYou can now access the frontend using the arNS domain that you own.\\n\\n:::tip[Handy Tip]\\nYou can use undernames of your arNS domain to deploy multiple environments of the frontend.\\n:::\\n\",\"document\":[{\"href\":\"/frontend-development/permaweb-deployment#permaweb-deployment\",\"html\":\"</header>\\n<p>The frontend is a Vite React application. It is a single-page application (SPA) that provides a user interface for the backend services.</p>\\n<p>Deploying the frontend to the Permaweb requires the following steps:</p>\\n<ul>\\n<li>Own a arns domain.</li>\\n<li>Have a wallet with enough AR to deploy the frontend.</li>\\n<li>Have a funded ArDrive account to deploy the frontend.</li>\\n</ul>\\n\",\"id\":\"docs/pages/frontend-development/permaweb-deployment.mdx#permaweb-deployment\",\"isPage\":true,\"text\":\"\\nThe frontend is a Vite React application. It is a single-page application (SPA) that provides a user interface for the backend services.\\nDeploying the frontend to the Permaweb requires the following steps:\\n\\nOwn a arns domain.\\nHave a wallet with enough AR to deploy the frontend.\\nHave a funded ArDrive account to deploy the frontend.\\n\\n\",\"title\":\"Permaweb Deployment\",\"titles\":[]},{\"href\":\"/frontend-development/permaweb-deployment#arns-domain\",\"html\":\"\\n<p>You can purchase an arNS domain from the <a href=\\\"https://arns.app/\\\">arns website</a>.</p>\\n\",\"id\":\"docs/pages/frontend-development/permaweb-deployment.mdx#arns-domain\",\"isPage\":false,\"text\":\"\\nYou can purchase an arNS domain from the arns website.\\n\",\"title\":\"arNS Domain\",\"titles\":[\"Permaweb Deployment\"]},{\"href\":\"/frontend-development/permaweb-deployment#ardrive-account\",\"html\":\"\\n<p>You can learn more about how to create an ArDrive account from the <a href=\\\"https://docs.ardrive.io/\\\">ArDrive documentation</a>.</p>\\n\",\"id\":\"docs/pages/frontend-development/permaweb-deployment.mdx#ardrive-account\",\"isPage\":false,\"text\":\"\\nYou can learn more about how to create an ArDrive account from the ArDrive documentation.\\n\",\"title\":\"ArDrive Account\",\"titles\":[\"Permaweb Deployment\"]},{\"href\":\"/frontend-development/permaweb-deployment#deploying-the-frontend\",\"html\":\"\\n<p>After building your static frontend, you can deploy it to permaweb by using the provided deploy script.</p>\\n<p>Learn more about deploying to the Permaweb from the <a href=\\\"https://docs.ardrive.io/docs/misc/deploy/deploy.html\\\">ArDrive documentation</a>.</p>\\n<p>Also, you can learn more about Permaweb deploy here: <a href=\\\"https://github.com/permaweb/permaweb-deploy\\\">https://github.com/permaweb/permaweb-deploy</a></p>\\n<p>In order to deploy the frontend to the Permaweb, you need to provide the following environment variables:</p>\\n<ul>\\n<li><code>DEPLOY_KEY</code>: The key to deploy the frontend. This is the wallet key that owns the arNS domain and has enough AR.</li>\\n</ul>\\n<aside data-callout=\\\"warning\\\"><p>Make sure your DEPLOY_KEY contains the wallet encrypted in base64 format.</p><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">base64</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> -i</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> wallet.json</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> |</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> pbcopy</span></span></code></pre></aside>\\n<ul>\\n<li><code>ANT_PROCESS</code>: The ANT process that the frontend will connect to (This is provided by the arNS domain).</li>\\n<li><code>UNDERNAME</code>: The undername of the arNS domain that the frontend will be deployed to.</li>\\n</ul>\\n<p>To deploy the frontend to the Permaweb, you need to run the following command:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Terminal\\\" data-lang=\\\"bash\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">npm</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> run</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> frontend:deploy</span></span></code></pre>\\n<p>You can now access the frontend using the arNS domain that you own.</p>\\n<aside data-callout=\\\"tip\\\"><strong data-callout-title=\\\"true\\\">Handy Tip</strong><p>You can use undernames of your arNS domain to deploy multiple environments of the frontend.</p></aside>\",\"id\":\"docs/pages/frontend-development/permaweb-deployment.mdx#deploying-the-frontend\",\"isPage\":false,\"text\":\"\\nAfter building your static frontend, you can deploy it to permaweb by using the provided deploy script.\\nLearn more about deploying to the Permaweb from the ArDrive documentation.\\nAlso, you can learn more about Permaweb deploy here: https://github.com/permaweb/permaweb-deploy\\nIn order to deploy the frontend to the Permaweb, you need to provide the following environment variables:\\n\\nDEPLOY_KEY: The key to deploy the frontend. This is the wallet key that owns the arNS domain and has enough AR.\\n\\nMake sure your DEPLOY_KEY contains the wallet encrypted in base64 format.base64 -i wallet.json | pbcopy\\n\\nANT_PROCESS: The ANT process that the frontend will connect to (This is provided by the arNS domain).\\nUNDERNAME: The undername of the arNS domain that the frontend will be deployed to.\\n\\nTo deploy the frontend to the Permaweb, you need to run the following command:\\nnpm run frontend:deploy\\nYou can now access the frontend using the arNS domain that you own.\\nHandy TipYou can use undernames of your arNS domain to deploy multiple environments of the frontend.\",\"title\":\"Deploying the Frontend\",\"titles\":[\"Permaweb Deployment\"]}]}],[\"index.3b79a599b9e10500aba5ef1bf5cf7965a5e17b6c175c590dd37b3771f3977231\",{\"mdx\":\"# Building the process using Squishy\\n\\nThis section will guide you through the process of building the process. The process is built using the `build` script in the `process` directory. The `build` script is a simple shell script that uses the `docker` command to build the process.\\n\\n:::info \\nBuilding processes is done using Squish via Docker. Ensure you have Docker installed on your machine.\\n:::\\n\\nLearn more about [Squish](https://github.com/LuaDist/squish).\\n\\n## Configuring Squish\\n\\nSquish is a tool for combining multiple files into a single one. It is used to build the process into a single file. The configuration for Squish is stored in the `squishy` file in the process directory.\\n\\nThe basic configuration for Squish is as follows:\\n\\n```lua [./ao/my-process/squishy]\\nMain \\\"src/process.lua\\\"\\n\\nModule \\\"process_lib\\\" \\\"./src/process_lib.lua\\\"\\n\\nOption \\\"minify-level\\\" \\\"none\\\"\\nOutput 'build/process.lua'\\n```\\n\\nThe configuration specifies the entry point for the process, the modules to include, the minify level, and the output file.\\n\\n## Building the Process\\n\\nTo build the process, run the following command in the process directory:\\n\\n```bash [Terminal]\\ncd ao/process-name && ./scripts/build.sh\\n```\\n\\n:::tip[Handy Tip]\\nCreate Ao dApp provides a script to build the process from the root of the project. You can run the following command to build the process:\\n\\n```bash [Terminal]\\nnpm run myprocess:build\\n```\\n:::\\n\",\"document\":[{\"href\":\"/process-development/building-with-squish#building-the-process-using-squishy\",\"html\":\"</header>\\n<p>This section will guide you through the process of building the process. The process is built using the <code>build</code> script in the <code>process</code> directory. The <code>build</code> script is a simple shell script that uses the <code>docker</code> command to build the process.</p>\\n<aside data-callout=\\\"info\\\"><p>Building processes is done using Squish via Docker. Ensure you have Docker installed on your machine.</p></aside>\\n<p>Learn more about <a href=\\\"https://github.com/LuaDist/squish\\\">Squish</a>.</p>\\n\",\"id\":\"docs/pages/process-development/building-with-squish.mdx#building-the-process-using-squishy\",\"isPage\":true,\"text\":\"\\nThis section will guide you through the process of building the process. The process is built using the build script in the process directory. The build script is a simple shell script that uses the docker command to build the process.\\nBuilding processes is done using Squish via Docker. Ensure you have Docker installed on your machine.\\nLearn more about Squish.\\n\",\"title\":\"Building the process using Squishy\",\"titles\":[]},{\"href\":\"/process-development/building-with-squish#configuring-squish\",\"html\":\"\\n<p>Squish is a tool for combining multiple files into a single one. It is used to build the process into a single file. The configuration for Squish is stored in the <code>squishy</code> file in the process directory.</p>\\n<p>The basic configuration for Squish is as follows:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"./ao/my-process/squishy\\\" data-lang=\\\"lua\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">Main</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;src/process.lua&quot;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">Module</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;process_lib&quot; &quot;./src/process_lib.lua&quot;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">Option</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;minify-level&quot; &quot;none&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">Output</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;build/process.lua&#x27;</span></span></code></pre>\\n<p>The configuration specifies the entry point for the process, the modules to include, the minify level, and the output file.</p>\\n\",\"id\":\"docs/pages/process-development/building-with-squish.mdx#configuring-squish\",\"isPage\":false,\"text\":\"\\nSquish is a tool for combining multiple files into a single one. It is used to build the process into a single file. The configuration for Squish is stored in the squishy file in the process directory.\\nThe basic configuration for Squish is as follows:\\nMain &quot;src/process.lua&quot;\\n \\nModule &quot;process_lib&quot; &quot;./src/process_lib.lua&quot;\\n \\nOption &quot;minify-level&quot; &quot;none&quot;\\nOutput &#x27;build/process.lua&#x27;\\nThe configuration specifies the entry point for the process, the modules to include, the minify level, and the output file.\\n\",\"title\":\"Configuring Squish\",\"titles\":[\"Building the process using Squishy\"]},{\"href\":\"/process-development/building-with-squish#building-the-process\",\"html\":\"\\n<p>To build the process, run the following command in the process directory:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Terminal\\\" data-lang=\\\"bash\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">cd</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> ao/process-name</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> &amp;&amp; </span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">./scripts/build.sh</span></span></code></pre>\\n<aside data-callout=\\\"tip\\\"><strong data-callout-title=\\\"true\\\">Handy Tip</strong><p>Create Ao dApp provides a script to build the process from the root of the project. You can run the following command to build the process:</p><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Terminal\\\" data-lang=\\\"bash\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">npm</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> run</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> myprocess:build</span></span></code></pre></aside>\",\"id\":\"docs/pages/process-development/building-with-squish.mdx#building-the-process\",\"isPage\":false,\"text\":\"\\nTo build the process, run the following command in the process directory:\\ncd ao/process-name &amp;&amp; ./scripts/build.sh\\nHandy TipCreate Ao dApp provides a script to build the process from the root of the project. You can run the following command to build the process:npm run myprocess:build\",\"title\":\"Building the Process\",\"titles\":[\"Building the process using Squishy\"]}]}],[\"index.feac55a242ab3ea29bb48de047235332b77bf999ceb9c3ab0c4e160de312f921\",{\"mdx\":\"# Building the process using amalg.lua\\n\\nThis section will guide you through the process of building the process. The process is built using the `build` script in the `process` directory. The `build` script is a simple shell script that uses the `amalg.lua` script to build the process.\\n\\n:::info \\nDeploying a Lua application that is split among multiple modules is a challenge. A tool that can package a Lua script and its modules into a single file is a valuable help. This is such a tool.\\n:::\\n\\nLearn more about [amalg.lua](https://github.com/siffiejoe/lua-amalg/).\\n\\n## Configuring build script\\n\\nCreate AO dApp provides a script to build the process using `amalg.lua`. The configuration for `amalg.lua` is stored in the `scripts/build.sh` file in the process directory.\\n\\nThe configuration specifies the entry point for the process, the modules to include, the minify level, and the output file.\\n\\n## Building the Process\\n\\nTo build the process, run the following command in the process directory:\\n\\n```bash [Terminal]\\ncd ao/process-name && ./scripts/build.sh\\n```\\n\\n:::tip[Handy Tip]\\nCreate Ao dApp provides a script to build the process from the root of the project. You can run the following command to build the process:\\n\\n```bash [Terminal]\\nnpm run myprocess:build\\n```\\n:::\\n\",\"document\":[{\"href\":\"/process-development/building-with-amalg#building-the-process-using-amalglua\",\"html\":\"</header>\\n<p>This section will guide you through the process of building the process. The process is built using the <code>build</code> script in the <code>process</code> directory. The <code>build</code> script is a simple shell script that uses the <code>amalg.lua</code> script to build the process.</p>\\n<aside data-callout=\\\"info\\\"><p>Deploying a Lua application that is split among multiple modules is a challenge. A tool that can package a Lua script and its modules into a single file is a valuable help. This is such a tool.</p></aside>\\n<p>Learn more about <a href=\\\"https://github.com/siffiejoe/lua-amalg/\\\">amalg.lua</a>.</p>\\n\",\"id\":\"docs/pages/process-development/building-with-amalg.mdx#building-the-process-using-amalglua\",\"isPage\":true,\"text\":\"\\nThis section will guide you through the process of building the process. The process is built using the build script in the process directory. The build script is a simple shell script that uses the amalg.lua script to build the process.\\nDeploying a Lua application that is split among multiple modules is a challenge. A tool that can package a Lua script and its modules into a single file is a valuable help. This is such a tool.\\nLearn more about amalg.lua.\\n\",\"title\":\"Building the process using amalg.lua\",\"titles\":[]},{\"href\":\"/process-development/building-with-amalg#configuring-build-script\",\"html\":\"\\n<p>Create AO dApp provides a script to build the process using <code>amalg.lua</code>. The configuration for <code>amalg.lua</code> is stored in the <code>scripts/build.sh</code> file in the process directory.</p>\\n<p>The configuration specifies the entry point for the process, the modules to include, the minify level, and the output file.</p>\\n\",\"id\":\"docs/pages/process-development/building-with-amalg.mdx#configuring-build-script\",\"isPage\":false,\"text\":\"\\nCreate AO dApp provides a script to build the process using amalg.lua. The configuration for amalg.lua is stored in the scripts/build.sh file in the process directory.\\nThe configuration specifies the entry point for the process, the modules to include, the minify level, and the output file.\\n\",\"title\":\"Configuring build script\",\"titles\":[\"Building the process using amalg.lua\"]},{\"href\":\"/process-development/building-with-amalg#building-the-process\",\"html\":\"\\n<p>To build the process, run the following command in the process directory:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Terminal\\\" data-lang=\\\"bash\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">cd</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> ao/process-name</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> &amp;&amp; </span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">./scripts/build.sh</span></span></code></pre>\\n<aside data-callout=\\\"tip\\\"><strong data-callout-title=\\\"true\\\">Handy Tip</strong><p>Create Ao dApp provides a script to build the process from the root of the project. You can run the following command to build the process:</p><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Terminal\\\" data-lang=\\\"bash\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">npm</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> run</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> myprocess:build</span></span></code></pre></aside>\",\"id\":\"docs/pages/process-development/building-with-amalg.mdx#building-the-process\",\"isPage\":false,\"text\":\"\\nTo build the process, run the following command in the process directory:\\ncd ao/process-name &amp;&amp; ./scripts/build.sh\\nHandy TipCreate Ao dApp provides a script to build the process from the root of the project. You can run the following command to build the process:npm run myprocess:build\",\"title\":\"Building the Process\",\"titles\":[\"Building the process using amalg.lua\"]}]}],[\"index.3523214e10e71a047ee51c1265dfb823fd28fb09c44cca417de24a402342a8db\",{\"mdx\":\"# Developing AO Processes [This section provides an overview of the architecture of AO processes and how they are developed.]\\n\\nIn order to develop AO processes and start using Create Ao dApp, you need to have a basic understanding of the following:\\n\\n- **Lua programming language** - AO processes are written in Lua. If you are not familiar with Lua, you can learn the basics from the [official Lua documentation](https://www.lua.org/manual/5.1/).\\n- **ao + aos** - AO processes are executed by the AO. You need to have a basic understanding of how to use the `ao`. You can learn more about `ao` from the [official documentation](https://cookbook_ao.g8way.io/welcome/index.html)\\n\\n## Process Directory Structure\\nA recommended project structure for developing AO processes is as follows:\\n\\n```\\nproject-name/             # Your project's root directory.\\n├── ao/                   # The root directory of your ao processes.\\n│   └── process-name/          # Process Directory. // [!code hl] // [!code focus]\\n│       ├── scripts/           # Utility scripts for the process. // [!code hl] // [!code focus]\\n|       |   ├── build.sh       # Build script for the process. // [!code hl] // [!code focus]\\n│       │   ├── deploy.sh      # Deploy script for the process. // [!code hl] // [!code focus]\\n|       |   └── test.sh        # Test script for the process. // [!code hl] // [!code focus]\\n│       ├── src/               # Source code for the process. // [!code hl] // [!code focus]\\n│       │   ├── test/                   # Entry point for the process. // [!code hl] // [!code focus]\\n│       │   │   ├── mocked-env          # Mocked env files to test the process. // [!code hl] // [!code focus]\\n|       |   |   ├── setup.lua           # AO Testing Suite setup file. // [!code hl] // [!code focus]\\n│       │   │   └── process_test.lua    # Test script for the process. // [!code hl] // [!code focus]\\n│       |   ├── process_lib.lua         # Library for the process. // [!code hl] // [!code focus]\\n│       |   ├── process.lua             # Entry point for the process. // [!code hl] // [!code focus]\\n│       │   └── reset_modules.lua       # Reset preloaded modules // [!code hl] // [!code focus]\\n│       ├── aoform.yaml        # Configuration for ao-form deployment. // [!code hl] // [!code focus]\\n│       └── squishy            # Squishy configuration for build. // [!code hl] // [!code focus]\\n├── apps/             # The root directory of your frontend applications.\\n│   └── frontend/     # React Vite App connected to ao process.\\n├── utils             # Directory for utility functions.\\n│   └── inject-process.ts # Script to inject process Ids from ao to frontend \\n├── node_modules/\\n├── .gitignore\\n├── package.json\\n├── README.md\\n└── tsconfig.json\\n```\\n\\nDon't be overwhelmed by the structure. We will go through each of the directories and files in detail in the following sections.\",\"document\":[{\"href\":\"/process-development/architecture#developing-ao-processes\",\"html\":\"<div role=\\\"doc-subtitle\\\">This section provides an overview of the architecture of AO processes and how they are developed.</div></header>\\n<p>In order to develop AO processes and start using Create Ao dApp, you need to have a basic understanding of the following:</p>\\n<ul>\\n<li><strong>Lua programming language</strong> - AO processes are written in Lua. If you are not familiar with Lua, you can learn the basics from the <a href=\\\"https://www.lua.org/manual/5.1/\\\">official Lua documentation</a>.</li>\\n<li><strong>ao + aos</strong> - AO processes are executed by the AO. You need to have a basic understanding of how to use the <code>ao</code>. You can learn more about <code>ao</code> from the <a href=\\\"https://cookbook_ao.g8way.io/welcome/index.html\\\">official documentation</a></li>\\n</ul>\\n\",\"id\":\"docs/pages/process-development/architecture.mdx#developing-ao-processes\",\"isPage\":true,\"text\":\"This section provides an overview of the architecture of AO processes and how they are developed.\\nIn order to develop AO processes and start using Create Ao dApp, you need to have a basic understanding of the following:\\n\\nLua programming language - AO processes are written in Lua. If you are not familiar with Lua, you can learn the basics from the official Lua documentation.\\nao + aos - AO processes are executed by the AO. You need to have a basic understanding of how to use the ao. You can learn more about ao from the official documentation\\n\\n\",\"title\":\"Developing AO Processes\",\"titles\":[]},{\"href\":\"/process-development/architecture#process-directory-structure\",\"html\":\"\\n<p>A recommended project structure for developing AO processes is as follows:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused has-highlighted\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span>project-name/             # Your project&#x27;s root directory.</span></span>\\n<span class=\\\"line\\\"><span>├── ao/                   # The root directory of your ao processes.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│   └── process-name/          # Process Directory.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│       ├── scripts/           # Utility scripts for the process.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>|       |   ├── build.sh       # Build script for the process.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│       │   ├── deploy.sh      # Deploy script for the process.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>|       |   └── test.sh        # Test script for the process.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│       ├── src/               # Source code for the process.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│       │   ├── test/                   # Entry point for the process.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│       │   │   ├── mocked-env          # Mocked env files to test the process.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>|       |   |   ├── setup.lua           # AO Testing Suite setup file.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│       │   │   └── process_test.lua    # Test script for the process.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│       |   ├── process_lib.lua         # Library for the process.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│       |   ├── process.lua             # Entry point for the process.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│       │   └── reset_modules.lua       # Reset preloaded modules</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│       ├── aoform.yaml        # Configuration for ao-form deployment.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│       └── squishy            # Squishy configuration for build.</span></span>\\n<span class=\\\"line\\\"><span>├── apps/             # The root directory of your frontend applications.</span></span>\\n<span class=\\\"line\\\"><span>│   └── frontend/     # React Vite App connected to ao process.</span></span>\\n<span class=\\\"line\\\"><span>├── utils             # Directory for utility functions.</span></span>\\n<span class=\\\"line\\\"><span>│   └── inject-process.ts # Script to inject process Ids from ao to frontend </span></span>\\n<span class=\\\"line\\\"><span>├── node_modules/</span></span>\\n<span class=\\\"line\\\"><span>├── .gitignore</span></span>\\n<span class=\\\"line\\\"><span>├── package.json</span></span>\\n<span class=\\\"line\\\"><span>├── README.md</span></span>\\n<span class=\\\"line\\\"><span>└── tsconfig.json</span></span></code></pre>\\n<p>Don&#x27;t be overwhelmed by the structure. We will go through each of the directories and files in detail in the following sections.</p>\",\"id\":\"docs/pages/process-development/architecture.mdx#process-directory-structure\",\"isPage\":false,\"text\":\"\\nA recommended project structure for developing AO processes is as follows:\\nproject-name/             # Your project&#x27;s root directory.\\n├── ao/                   # The root directory of your ao processes.\\n│   └── process-name/          # Process Directory.\\n│       ├── scripts/           # Utility scripts for the process.\\n|       |   ├── build.sh       # Build script for the process.\\n│       │   ├── deploy.sh      # Deploy script for the process.\\n|       |   └── test.sh        # Test script for the process.\\n│       ├── src/               # Source code for the process.\\n│       │   ├── test/                   # Entry point for the process.\\n│       │   │   ├── mocked-env          # Mocked env files to test the process.\\n|       |   |   ├── setup.lua           # AO Testing Suite setup file.\\n│       │   │   └── process_test.lua    # Test script for the process.\\n│       |   ├── process_lib.lua         # Library for the process.\\n│       |   ├── process.lua             # Entry point for the process.\\n│       │   └── reset_modules.lua       # Reset preloaded modules\\n│       ├── aoform.yaml        # Configuration for ao-form deployment.\\n│       └── squishy            # Squishy configuration for build.\\n├── apps/             # The root directory of your frontend applications.\\n│   └── frontend/     # React Vite App connected to ao process.\\n├── utils             # Directory for utility functions.\\n│   └── inject-process.ts # Script to inject process Ids from ao to frontend \\n├── node_modules/\\n├── .gitignore\\n├── package.json\\n├── README.md\\n└── tsconfig.json\\nDon&#x27;t be overwhelmed by the structure. We will go through each of the directories and files in detail in the following sections.\",\"title\":\"Process Directory Structure\",\"titles\":[\"Developing AO Processes\"]}]}],[\"index.ff44d06cac98ff87c9f8edec9a8847ad7e5bb472f400bc7cf8e7f82bcce53bbb\",{\"mdx\":\"# Frontend Development\\n\\nThe provided frontend is a Vite React application. It is a single-page application (SPA) that provides a user interface for the backend services. The frontend is built using the following technologies:\\n\\n- [React](https://reactjs.org/)\\n- [Vite](https://vitejs.dev/)\\n- [TypeScript](https://www.typescriptlang.org/)\\n\\nExtra libraries used in the frontend that we recommend you use:\\n- [Permaweb AoConnect](https://www.npmjs.com/package/@permaweb/aoconnect)\\n- [Arweave Wallet Kit](https://github.com/labscommunity/arweave-wallet-kit)\\n- [TanStack Query](https://tanstack.com/query/latest)\\n\\n:::tip[Handy Tip]\\nTanStack Query is a powerful and flexible data fetching library for React. It is highly recommended to use TanStack Query for data fetching in your frontend. This will enable caching, pagination, and other features out of the box.\\n:::\\n\\n## Directory Structure\\n\\nThe frontend codebase is present in the `apps/frontend` directory. The frontend codebase is structured as follows:\\n\\n```\\napps/frontend/         # Your frontend application.\\n├──public/             # Your project's public assets.\\n├──src/                # Your project's source code.\\n│  ├── components/    # React components.\\n│  │  └── counter.tsx # Example of a React component.\\n│  ├── constants/         # Constants used in the frontend. This will include injected backend process.\\n|  |   └── counter_process.ts # Example of a backend process.\\n|  ├── App.css       # CSS file for the App component.\\n│  ├── App.tsx       # The main React component.\\n│  ├── index.css     # CSS file for the index.html file.\\n│  ├── main.tsx     # The main entry point for the React application.\\n|  └── vite-env.d.ts    # Vite environment types.\\n├── .eslintrc.cjs\\n├── .gitignore\\n├── index.html        # The main HTML file.\\n├── package.json\\n├── README.md\\n├── vite.config.ts   # Vite configuration file.\\n└── tsconfig.json\\n```\\n\\n:::info\\nThe frontend codebase comes with a sample `counter` component that demonstrates how to use the backend process in the frontend. You can use this as a reference to build your own components.\\n:::\",\"document\":[{\"href\":\"/frontend-development/architecture#frontend-development\",\"html\":\"</header>\\n<p>The provided frontend is a Vite React application. It is a single-page application (SPA) that provides a user interface for the backend services. The frontend is built using the following technologies:</p>\\n<ul>\\n<li><a href=\\\"https://reactjs.org/\\\">React</a></li>\\n<li><a href=\\\"https://vitejs.dev/\\\">Vite</a></li>\\n<li><a href=\\\"https://www.typescriptlang.org/\\\">TypeScript</a></li>\\n</ul>\\n<p>Extra libraries used in the frontend that we recommend you use:</p>\\n<ul>\\n<li><a href=\\\"https://www.npmjs.com/package/@permaweb/aoconnect\\\">Permaweb AoConnect</a></li>\\n<li><a href=\\\"https://github.com/labscommunity/arweave-wallet-kit\\\">Arweave Wallet Kit</a></li>\\n<li><a href=\\\"https://tanstack.com/query/latest\\\">TanStack Query</a></li>\\n</ul>\\n<aside data-callout=\\\"tip\\\"><strong data-callout-title=\\\"true\\\">Handy Tip</strong><p>TanStack Query is a powerful and flexible data fetching library for React. It is highly recommended to use TanStack Query for data fetching in your frontend. This will enable caching, pagination, and other features out of the box.</p></aside>\\n\",\"id\":\"docs/pages/frontend-development/architecture.mdx#frontend-development\",\"isPage\":true,\"text\":\"\\nThe provided frontend is a Vite React application. It is a single-page application (SPA) that provides a user interface for the backend services. The frontend is built using the following technologies:\\n\\nReact\\nVite\\nTypeScript\\n\\nExtra libraries used in the frontend that we recommend you use:\\n\\nPermaweb AoConnect\\nArweave Wallet Kit\\nTanStack Query\\n\\nHandy TipTanStack Query is a powerful and flexible data fetching library for React. It is highly recommended to use TanStack Query for data fetching in your frontend. This will enable caching, pagination, and other features out of the box.\\n\",\"title\":\"Frontend Development\",\"titles\":[]},{\"href\":\"/frontend-development/architecture#directory-structure\",\"html\":\"\\n<p>The frontend codebase is present in the <code>apps/frontend</code> directory. The frontend codebase is structured as follows:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span>apps/frontend/         # Your frontend application.</span></span>\\n<span class=\\\"line\\\"><span>├──public/             # Your project&#x27;s public assets.</span></span>\\n<span class=\\\"line\\\"><span>├──src/                # Your project&#x27;s source code.</span></span>\\n<span class=\\\"line\\\"><span>│  ├── components/    # React components.</span></span>\\n<span class=\\\"line\\\"><span>│  │  └── counter.tsx # Example of a React component.</span></span>\\n<span class=\\\"line\\\"><span>│  ├── constants/         # Constants used in the frontend. This will include injected backend process.</span></span>\\n<span class=\\\"line\\\"><span>|  |   └── counter_process.ts # Example of a backend process.</span></span>\\n<span class=\\\"line\\\"><span>|  ├── App.css       # CSS file for the App component.</span></span>\\n<span class=\\\"line\\\"><span>│  ├── App.tsx       # The main React component.</span></span>\\n<span class=\\\"line\\\"><span>│  ├── index.css     # CSS file for the index.html file.</span></span>\\n<span class=\\\"line\\\"><span>│  ├── main.tsx     # The main entry point for the React application.</span></span>\\n<span class=\\\"line\\\"><span>|  └── vite-env.d.ts    # Vite environment types.</span></span>\\n<span class=\\\"line\\\"><span>├── .eslintrc.cjs</span></span>\\n<span class=\\\"line\\\"><span>├── .gitignore</span></span>\\n<span class=\\\"line\\\"><span>├── index.html        # The main HTML file.</span></span>\\n<span class=\\\"line\\\"><span>├── package.json</span></span>\\n<span class=\\\"line\\\"><span>├── README.md</span></span>\\n<span class=\\\"line\\\"><span>├── vite.config.ts   # Vite configuration file.</span></span>\\n<span class=\\\"line\\\"><span>└── tsconfig.json</span></span></code></pre>\\n<aside data-callout=\\\"info\\\"><p>The frontend codebase comes with a sample <code>counter</code> component that demonstrates how to use the backend process in the frontend. You can use this as a reference to build your own components.</p></aside>\",\"id\":\"docs/pages/frontend-development/architecture.mdx#directory-structure\",\"isPage\":false,\"text\":\"\\nThe frontend codebase is present in the apps/frontend directory. The frontend codebase is structured as follows:\\napps/frontend/         # Your frontend application.\\n├──public/             # Your project&#x27;s public assets.\\n├──src/                # Your project&#x27;s source code.\\n│  ├── components/    # React components.\\n│  │  └── counter.tsx # Example of a React component.\\n│  ├── constants/         # Constants used in the frontend. This will include injected backend process.\\n|  |   └── counter_process.ts # Example of a backend process.\\n|  ├── App.css       # CSS file for the App component.\\n│  ├── App.tsx       # The main React component.\\n│  ├── index.css     # CSS file for the index.html file.\\n│  ├── main.tsx     # The main entry point for the React application.\\n|  └── vite-env.d.ts    # Vite environment types.\\n├── .eslintrc.cjs\\n├── .gitignore\\n├── index.html        # The main HTML file.\\n├── package.json\\n├── README.md\\n├── vite.config.ts   # Vite configuration file.\\n└── tsconfig.json\\nThe frontend codebase comes with a sample counter component that demonstrates how to use the backend process in the frontend. You can use this as a reference to build your own components.\",\"title\":\"Directory Structure\",\"titles\":[\"Frontend Development\"]}]}],[\"index.09e94c4cf932e052bbbec7294e6d97646296f5c6ba2998700d7d9bcc6b8fb195\",{\"mdx\":\"# Process Design [This section provides an overview of the process design and best practices for writing AO processes.]\\n\\nIn this section, we will discuss the design principles and best practices for writing AO processes. AO processes are written in Lua, a lightweight, high-level, multi-paradigm programming language. Lua is designed to be embedded in other applications, making it an ideal choice for writing AO processes.\\n\\nAn over simplified AO token process could look like this, however, try and follow along with the code below. It's not really easy to comprehend and follow, but we will break it down and explain how things can be improved in the following sections.\\n\\n```lua [process.lua]\\nlocal ao = require('ao')\\n\\nVersion = \\\"1.0.0\\\"\\n\\n-- token should be idempotent and not change previous state updates\\nBalances = Balances or { [ao.id] = 1000 }\\nTotalSupply = TotalSupply or 1000\\nName = \\\"test token\\\"\\n\\nHandlers.add('info', Handlers.utils.hasMatchingTag('Action', 'Info'), function(msg)\\n  ao.send({\\n    Target = msg.From,\\n    Tags = [\\n        Name = Name,\\n        TotalSuppy = TotalSupply\\n    ]\\n  })\\nend)\\n\\nHandlers.add('balance', Handlers.utils.hasMatchingTag('Action', 'Balance'), function(msg)\\n  local bal = 0\\n\\n  -- If not Recipient is provided, then return the Senders balance\\n  if (msg.Tags.Recipient) then\\n    if (Balances[msg.Tags.Recipient]) then\\n      bal = Balances[msg.Tags.Recipient]\\n    end\\n  elseif Balances[msg.From] then\\n    bal = Balances[msg.From]\\n  end\\n\\n  ao.send({\\n    Target = msg.From,\\n    Tags = [\\n        Balance = bal,\\n        Account = msg.Tags.Recipient or msg.From,\\n    ]\\n    Data = bal\\n  })\\nend)\\n\\nHandlers.add('mint', Handlers.utils.hasMatchingTag('Action', 'Mint'), function(msg)\\n  assert(type(msg.Quantity) == 'string', 'Quantity is required!')\\n  assert(0 < tonumber(msg.Quantity), 'Quantity must be greater than zero!')\\n\\n  if not Balances[ao.id] then Balances[ao.id] = 0 end\\n\\n  -- Add tokens to the token pool, according to Quantity\\n  Balances[msg.From] = Balances[msg.From] + tonumber(msg.Quantity)\\n  TotalSupply = TotalSupply + tonumber(msg.Quantity)\\n\\n  ao.send({\\n    Target = msg.From,\\n    Data = Colors.gray .. \\\"Successfully minted \\\" .. Colors.blue .. msg.Quantity .. Colors.reset\\n  })\\nend)\\n\\nHandlers.add('burn', Handlers.utils.hasMatchingTag('Action', 'Burn'), function(msg)\\n  assert(type(msg.Quantity) == 'string', 'Quantity is required!')\\n  assert(tonumber(msg.Quantity) <= tonumber(Balances[msg.From]), 'Quantity must be less than or equal to the current balance!')\\n\\n  Balances[msg.From] = Balances[msg.From] - tonumber(msg.Quantity)\\n  TotalSupply = TotalSupply - tonumber(msg.Quantity)\\n\\n  ao.send({\\n    Target = msg.From,\\n    Data = Colors.gray .. \\\"Successfully burned \\\" .. Colors.blue .. msg.Quantity .. Colors.reset\\n  })\\nend)\\n```\\n\\n\\n## Process Design Principles\\n\\nWhen designing AO processes, it is essential to follow certain design principles to ensure that the processes are efficient, maintainable, and scalable. Here are some key design principles to keep in mind:\\n\\n### 1. Modularity\\n\\nModularity is the practice of breaking down a system into smaller, independent modules that can be developed, tested, and maintained separately. In the context of AO processes, it is essential to break down the process logic into smaller, reusable components that can be easily combined to create complex processes.\\n\\nWhat we can do is to break down the process into smaller modules, such as `balance`, `transfer`, `mint`, `burn`, etc. This will make the code more organized and easier to maintain and test.\\n\\n:::tip[Handy Tip]\\nThat's why in create-ao-dapp the `process.lua` file is broken down into `process_lib.lua` and the entry point file only contains the `Handlers` and the global variables.\\n:::\\n\\nFor displaying porposes we will only break things into `process_lib.lua` and `process.lua`.\\n\\n::::code-group\\n\\n```lua [process.lua]\\nlocal process_lib = require('process_lib') -- [!code hl] -- [!code focus]\\n\\nVersion = \\\"1.0.0\\\"\\n\\n-- token should be idempotent and not change previous state updates\\nBalances = Balances or { [ao.id] = 1000 }\\nTotalSupply = TotalSupply or 1000\\nName = \\\"test token\\\"\\n\\nHandlers.add('info', \\n    Handlers.utils.hasMatchingTag('Action', 'Info'),\\n    process_lib.getInfo -- [!code hl] -- [!code focus]\\n)\\n\\nHandlers.add('balance', \\n    Handlers.utils.hasMatchingTag('Action', 'Balance'),\\n    process_lib.getBalance -- [!code hl] -- [!code focus]\\n)\\n\\nHandlers.add('mint', \\n    Handlers.utils.hasMatchingTag('Action', 'Mint'),\\n    process_lib.mint -- [!code hl] -- [!code focus]\\n)\\n\\nHandlers.add('burn', \\n    Handlers.utils.hasMatchingTag('Action', 'Burn'),\\n    process_lib.burn -- [!code hl] -- [!code focus]\\n)\\n```\\n\\n```lua [process_lib.lua]\\nlocal ao = require('ao')\\nlocal process_lib = {}\\n\\nfunction process_lib.getInfo(msg)\\n    ao.send({\\n        Target = msg.From,\\n        Tags = {\\n            Name = Name,\\n            TotalSuppy = TotalSupply\\n        }\\n    })\\nend\\n\\nfunction process_lib.getBalance(msg)\\n    local bal = 0\\n\\n    -- If not Recipient is provided, then return the Senders balance\\n    if (msg.Tags.Recipient) then\\n        if (Balances[msg.Tags.Recipient]) then\\n            bal = Balances[msg.Tags.Recipient]\\n        end\\n    elseif Balances[msg.From] then\\n        bal = Balances[msg.From]\\n    end\\n\\n    ao.send({\\n        Target = msg.From,\\n        Tags = {\\n            Balance = bal,\\n            Account = msg.Tags.Recipient or msg.From,\\n        },\\n        Data = bal\\n    })\\nend\\n\\nfunction process_lib.mint(msg)\\n    assert(type(msg.Quantity) == 'string', 'Quantity is required!')\\n    assert(0 < tonumber(msg.Quantity), 'Quantity must be greater than zero!')\\n\\n    if not Balances[ao.id] then Balances[ao.id] = 0 end\\n\\n    -- Add tokens to the token pool, according to Quantity\\n    Balances[msg.From] = Balances[msg.From] + tonumber(msg.Quantity)\\n    TotalSupply = TotalSupply + tonumber(msg.Quantity)\\n\\n    ao.send({\\n        Target = msg.From,\\n        Data = Colors.gray .. \\\"Successfully minted \\\" .. Colors.blue .. msg.Quantity .. Colors.reset\\n    })\\nend\\n\\nfunction process_lib.burn(msg)\\n    assert(type(msg.Quantity) == 'string', 'Quantity is required!')\\n    assert(tonumber(msg.Quantity) <= tonumber(Balances[msg.From]), 'Quantity must be less than or equal to the current balance!')\\n\\n    Balances[msg.From] = Balances[msg.From] - tonumber(msg.Quantity)\\n    TotalSupply = TotalSupply - tonumber(msg.Quantity)\\n\\n    ao.send({\\n        Target = msg.From,\\n        Data = Colors.gray .. \\\"Successfully burned \\\" .. Colors.blue .. msg.Quantity .. Colors.reset\\n    })\\nend\\n\\nreturn process_lib\\n```\\n::::\\n\\n### 2. Separation of Concerns\\n\\nSeparation of concerns is the practice of dividing a system into distinct sections, each responsible for a specific aspect of the system's functionality. In the context of AO processes, it is essential to separate the process logic from other concerns, such as input/output handling, error handling, and logging. This makes the code more organized and easier to maintain, test, and debug.\\n\\nContinuing with the previous example, we can separate the process logic from the input/output handling by creating separate function to handle replying things to the user.\\n\\n:::tip[Handy Tip]\\n To enable testing and also having a better flow to respond to user messages and sending replies, we can create a `sendReply` function that will handle the sending of messages to the user.\\n:::\\n\\n```lua [process_lib.lua]\\nlocal ao = require('ao')\\nlocal process_lib = {}\\n\\nfunction process_lib.getInfo(msg)\\n    process_lib.sendReply(msg, { -- [!code hl] -- [!code focus]\\n        Name = Name, -- [!code hl] -- [!code focus]\\n        TotalSuppy = TotalSupply -- [!code hl] -- [!code focus]\\n    }, \\\"\\\") -- [!code hl] -- [!code focus]\\n\\n    return {\\n        Name = Name,\\n        TotalSuppy = TotalSupply\\n    }\\nend\\n\\nfunction process_lib.getBalance(msg)\\n    local bal = 0\\n\\n    -- If not Recipient is provided, then return the Senders balance\\n    if (msg.Tags.Recipient) then\\n        if (Balances[msg.Tags.Recipient]) then\\n            bal = Balances[msg.Tags.Recipient]\\n        end\\n    elseif Balances[msg.From] then\\n        bal = Balances[msg.From]\\n    end\\n\\n    process_lib.sendReply(msg, { -- [!code hl]\\n        Balance = bal, -- [!code hl]\\n        Account = msg.Tags.Recipient or msg.From, -- [!code hl]\\n    }, bal) -- [!code hl]\\n\\n    return {\\n        Balance = bal,\\n        Account = msg.Tags.Recipient or msg.From\\n    }\\nend\\n\\nfunction process_lib.mint(msg)\\n    assert(type(msg.Quantity) == 'string', 'Quantity is required!')\\n    assert(0 < tonumber(msg.Quantity), 'Quantity must be greater than zero!')\\n\\n    if not Balances[ao.id] then Balances[ao.id] = 0 end\\n\\n    -- Add tokens to the token pool, according to Quantity\\n    Balances[msg.From] = Balances[msg.From] + tonumber(msg.Quantity)\\n    TotalSupply = TotalSupply + tonumber(msg.Quantity)\\n\\n    process_lib.sendReply(msg, {}, Colors.gray .. \\\"Successfully minted \\\" .. Colors.blue .. msg.Quantity .. Colors.reset) -- [!code hl]\\n\\n    return {\\n        Balance = Balances[msg.From],\\n    } -- [!code hl]\\nend\\n\\nfunction process_lib.burn(msg)\\n    assert(type(msg.Quantity) == 'string', 'Quantity is required!')\\n    assert(tonumber(msg.Quantity) <= tonumber(Balances[msg.From]), 'Quantity must be less than or equal to the current balance!')\\n\\n    Balances[msg.From] = Balances[msg.From] - tonumber(msg.Quantity)\\n    TotalSupply = TotalSupply - tonumber(msg.Quantity)\\n\\n    process_lib.sendReply(msg, {}, Colors.gray .. \\\"Successfully burned \\\" .. Colors.blue .. msg.Quantity .. Colors.reset) -- [!code hl]\\n\\n    return {\\n        Balance = Balances[msg.From],\\n    } -- [!code hl]\\nend\\n\\nfunction process_lib.sendReply(msg, tags, data) -- [!code hl] -- [!code focus]\\n    ao.send({ -- [!code hl] -- [!code focus]\\n        Target = msg.From, -- [!code hl] -- [!code focus]\\n        [\\\"Response-For\\\"] = msg.Action, -- [!code hl] -- [!code focus]\\n        Tags = tags, -- [!code hl] -- [!code focus]\\n        Data = data -- [!code hl] -- [!code focus]\\n    }) -- [!code hl] -- [!code focus]\\nend\\n\\nreturn process_lib\\n```\\n\\n\\n`sendReply` is basically just a wrapper around the `ao.send` function, but it makes the code more readable and easier to maintain. It also allows us to easily test the process logic without having to worry about the input/output handling.\\n\\n:::tip[Handy Tip]\\nIt also introduces a new tag `[\\\"Response-For\\\"]` which will be used to identify the action that the response is for. This will help in identifying the action that the response is for in the frontend.\\n:::\\n\\nIn the next section, we will introduce [Ao Process Testing](https://github.com/Autonomous-Finance/ao-process-testing) and discuss how to write unit tests for AO processes to ensure that they are working as expected.\",\"document\":[{\"href\":\"/process-development/process-design#process-design\",\"html\":\"<div role=\\\"doc-subtitle\\\">This section provides an overview of the process design and best practices for writing AO processes.</div></header>\\n<p>In this section, we will discuss the design principles and best practices for writing AO processes. AO processes are written in Lua, a lightweight, high-level, multi-paradigm programming language. Lua is designed to be embedded in other applications, making it an ideal choice for writing AO processes.</p>\\n<p>An over simplified AO token process could look like this, however, try and follow along with the code below. It&#x27;s not really easy to comprehend and follow, but we will break it down and explain how things can be improved in the following sections.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"process.lua\\\" data-lang=\\\"lua\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">local</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> ao </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> require</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;ao&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Version </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;1.0.0&quot;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">-- token should be idempotent and not change previous state updates</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Balances </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">or</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { [ao.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">id</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 1000</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">TotalSupply </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> TotalSupply </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">or</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 1000</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Name </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;test token&quot;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Handlers.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">add</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;info&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, Handlers.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">utils</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">hasMatchingTag</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Action&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Info&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">), </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">function</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  ao.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">send</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    Target </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    Tags </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Name </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Name,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        TotalSuppy </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> TotalSupply</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    ]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  })</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">end</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Handlers.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">add</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;balance&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, Handlers.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">utils</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">hasMatchingTag</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Action&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Balance&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">), </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">function</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">  local</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> bal </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 0</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">  -- If not Recipient is provided, then return the Senders balance</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">  if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Tags</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Recipient</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">then</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Tags</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Recipient</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">then</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      bal </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Tags</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Recipient</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    end</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">  elseif</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">then</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    bal </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">  end</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  ao.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">send</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    Target </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    Tags </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Balance </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> bal,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Account </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Tags</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Recipient</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> or</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    ]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    Data </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> bal</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  })</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">end</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Handlers.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">add</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;mint&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, Handlers.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">utils</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">hasMatchingTag</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Action&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Mint&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">), </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">function</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">  assert</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">type</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">==</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;string&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Quantity is required!&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">  assert</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">0</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> &lt;</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> tonumber</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">), </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Quantity must be greater than zero!&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">  if</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> not</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances[ao.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">id</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">then</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances[ao.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">id</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 0</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> end</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">  -- Add tokens to the token pool, according to Quantity</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">+</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> tonumber</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  TotalSupply </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> TotalSupply </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">+</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> tonumber</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  ao.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">send</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    Target </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    Data </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Colors.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">gray</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> ..</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;Successfully minted &quot; </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">..</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Colors.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">blue</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> ..</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> ..</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Colors.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">reset</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  })</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">end</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Handlers.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">add</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;burn&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, Handlers.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">utils</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">hasMatchingTag</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Action&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Burn&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">), </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">function</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">  assert</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">type</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">==</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;string&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Quantity is required!&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">  assert</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">tonumber</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&lt;=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> tonumber</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]), </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Quantity must be less than or equal to the current balance!&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">-</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> tonumber</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  TotalSupply </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> TotalSupply </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">-</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> tonumber</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  ao.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">send</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    Target </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    Data </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Colors.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">gray</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> ..</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;Successfully burned &quot; </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">..</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Colors.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">blue</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> ..</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> ..</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Colors.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">reset</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  })</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">end</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span></code></pre>\\n\",\"id\":\"docs/pages/process-development/process-design.mdx#process-design\",\"isPage\":true,\"text\":\"This section provides an overview of the process design and best practices for writing AO processes.\\nIn this section, we will discuss the design principles and best practices for writing AO processes. AO processes are written in Lua, a lightweight, high-level, multi-paradigm programming language. Lua is designed to be embedded in other applications, making it an ideal choice for writing AO processes.\\nAn over simplified AO token process could look like this, however, try and follow along with the code below. It&#x27;s not really easy to comprehend and follow, but we will break it down and explain how things can be improved in the following sections.\\nlocal ao = require(&#x27;ao&#x27;)\\n \\nVersion = &quot;1.0.0&quot;\\n \\n-- token should be idempotent and not change previous state updates\\nBalances = Balances or { [ao.id] = 1000 }\\nTotalSupply = TotalSupply or 1000\\nName = &quot;test token&quot;\\n \\nHandlers.add(&#x27;info&#x27;, Handlers.utils.hasMatchingTag(&#x27;Action&#x27;, &#x27;Info&#x27;), function(msg)\\n  ao.send({\\n    Target = msg.From,\\n    Tags = [\\n        Name = Name,\\n        TotalSuppy = TotalSupply\\n    ]\\n  })\\nend)\\n \\nHandlers.add(&#x27;balance&#x27;, Handlers.utils.hasMatchingTag(&#x27;Action&#x27;, &#x27;Balance&#x27;), function(msg)\\n  local bal = 0\\n \\n  -- If not Recipient is provided, then return the Senders balance\\n  if (msg.Tags.Recipient) then\\n    if (Balances[msg.Tags.Recipient]) then\\n      bal = Balances[msg.Tags.Recipient]\\n    end\\n  elseif Balances[msg.From] then\\n    bal = Balances[msg.From]\\n  end\\n \\n  ao.send({\\n    Target = msg.From,\\n    Tags = [\\n        Balance = bal,\\n        Account = msg.Tags.Recipient or msg.From,\\n    ]\\n    Data = bal\\n  })\\nend)\\n \\nHandlers.add(&#x27;mint&#x27;, Handlers.utils.hasMatchingTag(&#x27;Action&#x27;, &#x27;Mint&#x27;), function(msg)\\n  assert(type(msg.Quantity) == &#x27;string&#x27;, &#x27;Quantity is required!&#x27;)\\n  assert(0 &lt; tonumber(msg.Quantity), &#x27;Quantity must be greater than zero!&#x27;)\\n \\n  if not Balances[ao.id] then Balances[ao.id] = 0 end\\n \\n  -- Add tokens to the token pool, according to Quantity\\n  Balances[msg.From] = Balances[msg.From] + tonumber(msg.Quantity)\\n  TotalSupply = TotalSupply + tonumber(msg.Quantity)\\n \\n  ao.send({\\n    Target = msg.From,\\n    Data = Colors.gray .. &quot;Successfully minted &quot; .. Colors.blue .. msg.Quantity .. Colors.reset\\n  })\\nend)\\n \\nHandlers.add(&#x27;burn&#x27;, Handlers.utils.hasMatchingTag(&#x27;Action&#x27;, &#x27;Burn&#x27;), function(msg)\\n  assert(type(msg.Quantity) == &#x27;string&#x27;, &#x27;Quantity is required!&#x27;)\\n  assert(tonumber(msg.Quantity) &lt;= tonumber(Balances[msg.From]), &#x27;Quantity must be less than or equal to the current balance!&#x27;)\\n \\n  Balances[msg.From] = Balances[msg.From] - tonumber(msg.Quantity)\\n  TotalSupply = TotalSupply - tonumber(msg.Quantity)\\n \\n  ao.send({\\n    Target = msg.From,\\n    Data = Colors.gray .. &quot;Successfully burned &quot; .. Colors.blue .. msg.Quantity .. Colors.reset\\n  })\\nend)\\n\",\"title\":\"Process Design\",\"titles\":[]},{\"href\":\"/process-development/process-design#process-design-principles\",\"html\":\"\\n<p>When designing AO processes, it is essential to follow certain design principles to ensure that the processes are efficient, maintainable, and scalable. Here are some key design principles to keep in mind:</p>\\n\",\"id\":\"docs/pages/process-development/process-design.mdx#process-design-principles\",\"isPage\":false,\"text\":\"\\nWhen designing AO processes, it is essential to follow certain design principles to ensure that the processes are efficient, maintainable, and scalable. Here are some key design principles to keep in mind:\\n\",\"title\":\"Process Design Principles\",\"titles\":[\"Process Design\"]},{\"href\":\"/process-development/process-design#1-modularity\",\"html\":\"\\n<p>Modularity is the practice of breaking down a system into smaller, independent modules that can be developed, tested, and maintained separately. In the context of AO processes, it is essential to break down the process logic into smaller, reusable components that can be easily combined to create complex processes.</p>\\n<p>What we can do is to break down the process into smaller modules, such as <code>balance</code>, <code>transfer</code>, <code>mint</code>, <code>burn</code>, etc. This will make the code more organized and easier to maintain and test.</p>\\n<aside data-callout=\\\"tip\\\"><strong data-callout-title=\\\"true\\\">Handy Tip</strong><p>That&#x27;s why in create-ao-dapp the <code>process.lua</code> file is broken down into <code>process_lib.lua</code> and the entry point file only contains the <code>Handlers</code> and the global variables.</p></aside>\\n<p>For displaying porposes we will only break things into <code>process_lib.lua</code> and <code>process.lua</code>.</p>\\n<div class=\\\"code-group\\\"><div data-title=\\\"process.lua\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused has-highlighted\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"process.lua\\\" data-lang=\\\"lua\\\"><code><span class=\\\"line focused highlighted\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">local</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> process_lib </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> require</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;process_lib&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Version </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;1.0.0&quot;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">-- token should be idempotent and not change previous state updates</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Balances </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">or</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { [ao.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">id</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 1000</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">TotalSupply </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> TotalSupply </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">or</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 1000</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Name </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;test token&quot;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Handlers.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">add</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;info&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    Handlers.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">utils</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">hasMatchingTag</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Action&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Info&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">),</span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    process_lib.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">getInfo</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Handlers.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">add</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;balance&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    Handlers.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">utils</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">hasMatchingTag</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Action&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Balance&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">),</span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    process_lib.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">getBalance</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Handlers.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">add</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;mint&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    Handlers.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">utils</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">hasMatchingTag</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Action&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Mint&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">),</span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    process_lib.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">mint</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Handlers.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">add</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;burn&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    Handlers.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">utils</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">hasMatchingTag</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Action&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Burn&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">),</span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    process_lib.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">burn</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span></code></pre></div><div data-title=\\\"process_lib.lua\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"process_lib.lua\\\" data-lang=\\\"lua\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">local</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> ao </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> require</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;ao&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">local</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> process_lib </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">function</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> process_lib</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">getInfo</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    ao.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">send</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Target </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Tags </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            Name </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Name,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            TotalSuppy </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> TotalSupply</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    })</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">end</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">function</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> process_lib</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">getBalance</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    local</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> bal </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 0</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    -- If not Recipient is provided, then return the Senders balance</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Tags</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Recipient</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">then</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Tags</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Recipient</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">then</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            bal </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Tags</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Recipient</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        end</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    elseif</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">then</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        bal </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    end</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    ao.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">send</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Target </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Tags </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            Balance </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> bal,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            Account </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Tags</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Recipient</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> or</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Data </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> bal</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    })</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">end</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">function</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> process_lib</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">mint</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">    assert</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">type</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">==</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;string&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Quantity is required!&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">    assert</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">0</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> &lt;</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> tonumber</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">), </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Quantity must be greater than zero!&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> not</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances[ao.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">id</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">then</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances[ao.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">id</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 0</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> end</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    -- Add tokens to the token pool, according to Quantity</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">+</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> tonumber</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    TotalSupply </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> TotalSupply </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">+</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> tonumber</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    ao.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">send</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Target </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Data </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Colors.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">gray</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> ..</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;Successfully minted &quot; </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">..</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Colors.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">blue</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> ..</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> ..</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Colors.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">reset</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    })</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">end</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">function</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> process_lib</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">burn</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">    assert</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">type</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">==</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;string&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Quantity is required!&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">    assert</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">tonumber</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&lt;=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> tonumber</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]), </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Quantity must be less than or equal to the current balance!&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">-</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> tonumber</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    TotalSupply </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> TotalSupply </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">-</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> tonumber</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    ao.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">send</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Target </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Data </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Colors.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">gray</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> ..</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;Successfully burned &quot; </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">..</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Colors.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">blue</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> ..</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> ..</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Colors.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">reset</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    })</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">end</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> process_lib</span></span></code></pre></div></div>\\n\",\"id\":\"docs/pages/process-development/process-design.mdx#1-modularity\",\"isPage\":false,\"text\":\"\\nModularity is the practice of breaking down a system into smaller, independent modules that can be developed, tested, and maintained separately. In the context of AO processes, it is essential to break down the process logic into smaller, reusable components that can be easily combined to create complex processes.\\nWhat we can do is to break down the process into smaller modules, such as balance, transfer, mint, burn, etc. This will make the code more organized and easier to maintain and test.\\nHandy TipThat&#x27;s why in create-ao-dapp the process.lua file is broken down into process_lib.lua and the entry point file only contains the Handlers and the global variables.\\nFor displaying porposes we will only break things into process_lib.lua and process.lua.\\nlocal process_lib = require(&#x27;process_lib&#x27;) \\n \\nVersion = &quot;1.0.0&quot;\\n \\n-- token should be idempotent and not change previous state updates\\nBalances = Balances or { [ao.id] = 1000 }\\nTotalSupply = TotalSupply or 1000\\nName = &quot;test token&quot;\\n \\nHandlers.add(&#x27;info&#x27;, \\n    Handlers.utils.hasMatchingTag(&#x27;Action&#x27;, &#x27;Info&#x27;),\\n    process_lib.getInfo\\n)\\n \\nHandlers.add(&#x27;balance&#x27;, \\n    Handlers.utils.hasMatchingTag(&#x27;Action&#x27;, &#x27;Balance&#x27;),\\n    process_lib.getBalance\\n)\\n \\nHandlers.add(&#x27;mint&#x27;, \\n    Handlers.utils.hasMatchingTag(&#x27;Action&#x27;, &#x27;Mint&#x27;),\\n    process_lib.mint\\n)\\n \\nHandlers.add(&#x27;burn&#x27;, \\n    Handlers.utils.hasMatchingTag(&#x27;Action&#x27;, &#x27;Burn&#x27;),\\n    process_lib.burn\\n)local ao = require(&#x27;ao&#x27;)\\nlocal process_lib = {}\\n \\nfunction process_lib.getInfo(msg)\\n    ao.send({\\n        Target = msg.From,\\n        Tags = {\\n            Name = Name,\\n            TotalSuppy = TotalSupply\\n        }\\n    })\\nend\\n \\nfunction process_lib.getBalance(msg)\\n    local bal = 0\\n \\n    -- If not Recipient is provided, then return the Senders balance\\n    if (msg.Tags.Recipient) then\\n        if (Balances[msg.Tags.Recipient]) then\\n            bal = Balances[msg.Tags.Recipient]\\n        end\\n    elseif Balances[msg.From] then\\n        bal = Balances[msg.From]\\n    end\\n \\n    ao.send({\\n        Target = msg.From,\\n        Tags = {\\n            Balance = bal,\\n            Account = msg.Tags.Recipient or msg.From,\\n        },\\n        Data = bal\\n    })\\nend\\n \\nfunction process_lib.mint(msg)\\n    assert(type(msg.Quantity) == &#x27;string&#x27;, &#x27;Quantity is required!&#x27;)\\n    assert(0 &lt; tonumber(msg.Quantity), &#x27;Quantity must be greater than zero!&#x27;)\\n \\n    if not Balances[ao.id] then Balances[ao.id] = 0 end\\n \\n    -- Add tokens to the token pool, according to Quantity\\n    Balances[msg.From] = Balances[msg.From] + tonumber(msg.Quantity)\\n    TotalSupply = TotalSupply + tonumber(msg.Quantity)\\n \\n    ao.send({\\n        Target = msg.From,\\n        Data = Colors.gray .. &quot;Successfully minted &quot; .. Colors.blue .. msg.Quantity .. Colors.reset\\n    })\\nend\\n \\nfunction process_lib.burn(msg)\\n    assert(type(msg.Quantity) == &#x27;string&#x27;, &#x27;Quantity is required!&#x27;)\\n    assert(tonumber(msg.Quantity) &lt;= tonumber(Balances[msg.From]), &#x27;Quantity must be less than or equal to the current balance!&#x27;)\\n \\n    Balances[msg.From] = Balances[msg.From] - tonumber(msg.Quantity)\\n    TotalSupply = TotalSupply - tonumber(msg.Quantity)\\n \\n    ao.send({\\n        Target = msg.From,\\n        Data = Colors.gray .. &quot;Successfully burned &quot; .. Colors.blue .. msg.Quantity .. Colors.reset\\n    })\\nend\\n \\nreturn process_lib\\n\",\"title\":\"1. Modularity\",\"titles\":[\"Process Design\",\"Process Design Principles\"]},{\"href\":\"/process-development/process-design#2-separation-of-concerns\",\"html\":\"\\n<p>Separation of concerns is the practice of dividing a system into distinct sections, each responsible for a specific aspect of the system&#x27;s functionality. In the context of AO processes, it is essential to separate the process logic from other concerns, such as input/output handling, error handling, and logging. This makes the code more organized and easier to maintain, test, and debug.</p>\\n<p>Continuing with the previous example, we can separate the process logic from the input/output handling by creating separate function to handle replying things to the user.</p>\\n<aside data-callout=\\\"tip\\\"><strong data-callout-title=\\\"true\\\">Handy Tip</strong><p>To enable testing and also having a better flow to respond to user messages and sending replies, we can create a <code>sendReply</code> function that will handle the sending of messages to the user.</p></aside>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused has-highlighted\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"process_lib.lua\\\" data-lang=\\\"lua\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">local</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> ao </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> require</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;ao&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">local</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> process_lib </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">function</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> process_lib</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">getInfo</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg)</span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    process_lib.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">sendReply</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg, { </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Name </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Name, </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        TotalSuppy </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> TotalSupply </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Name </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Name,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        TotalSuppy </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> TotalSupply</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">end</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">function</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> process_lib</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">getBalance</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    local</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> bal </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 0</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    -- If not Recipient is provided, then return the Senders balance</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Tags</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Recipient</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">then</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Tags</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Recipient</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">then</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            bal </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Tags</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Recipient</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        end</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    elseif</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">then</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        bal </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    end</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    process_lib.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">sendReply</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg, { </span></span>\\n<span class=\\\"line highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Balance </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> bal, </span></span>\\n<span class=\\\"line highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Account </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Tags</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Recipient</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> or</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }, bal) </span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Balance </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> bal,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Account </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Tags</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Recipient</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> or</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">end</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">function</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> process_lib</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">mint</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">    assert</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">type</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">==</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;string&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Quantity is required!&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">    assert</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">0</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> &lt;</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> tonumber</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">), </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Quantity must be greater than zero!&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> not</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances[ao.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">id</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">then</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances[ao.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">id</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 0</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> end</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    -- Add tokens to the token pool, according to Quantity</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">+</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> tonumber</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    TotalSupply </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> TotalSupply </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">+</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> tonumber</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    process_lib.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">sendReply</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg, {}, Colors.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">gray</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> ..</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;Successfully minted &quot; </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">..</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Colors.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">blue</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> ..</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> ..</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Colors.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">reset</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Balance </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">],</span></span>\\n<span class=\\\"line highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    } </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">end</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">function</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> process_lib</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">burn</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">    assert</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">type</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">==</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;string&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Quantity is required!&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">    assert</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">tonumber</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&lt;=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> tonumber</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]), </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Quantity must be less than or equal to the current balance!&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">-</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> tonumber</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    TotalSupply </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> TotalSupply </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">-</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> tonumber</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    process_lib.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">sendReply</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg, {}, Colors.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">gray</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> ..</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;Successfully burned &quot; </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">..</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Colors.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">blue</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> ..</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Quantity</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> ..</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Colors.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">reset</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Balance </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Balances[msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">],</span></span>\\n<span class=\\\"line highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    } </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">end</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">function</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> process_lib</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">sendReply</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg, tags, data) </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    ao.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">send</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({ </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Target </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">From</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        [</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;Response-For&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Action</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Tags </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> tags, </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Data </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> data </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }) </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">end</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> process_lib</span></span></code></pre>\\n<p><code>sendReply</code> is basically just a wrapper around the <code>ao.send</code> function, but it makes the code more readable and easier to maintain. It also allows us to easily test the process logic without having to worry about the input/output handling.</p>\\n<aside data-callout=\\\"tip\\\"><strong data-callout-title=\\\"true\\\">Handy Tip</strong><p>It also introduces a new tag <code>[&quot;Response-For&quot;]</code> which will be used to identify the action that the response is for. This will help in identifying the action that the response is for in the frontend.</p></aside>\\n<p>In the next section, we will introduce <a href=\\\"https://github.com/Autonomous-Finance/ao-process-testing\\\">Ao Process Testing</a> and discuss how to write unit tests for AO processes to ensure that they are working as expected.</p>\",\"id\":\"docs/pages/process-development/process-design.mdx#2-separation-of-concerns\",\"isPage\":false,\"text\":\"\\nSeparation of concerns is the practice of dividing a system into distinct sections, each responsible for a specific aspect of the system&#x27;s functionality. In the context of AO processes, it is essential to separate the process logic from other concerns, such as input/output handling, error handling, and logging. This makes the code more organized and easier to maintain, test, and debug.\\nContinuing with the previous example, we can separate the process logic from the input/output handling by creating separate function to handle replying things to the user.\\nHandy TipTo enable testing and also having a better flow to respond to user messages and sending replies, we can create a sendReply function that will handle the sending of messages to the user.\\nlocal ao = require(&#x27;ao&#x27;)\\nlocal process_lib = {}\\n \\nfunction process_lib.getInfo(msg)\\n    process_lib.sendReply(msg, { \\n        Name = Name, \\n        TotalSuppy = TotalSupply \\n    }, &quot;&quot;) \\n \\n    return {\\n        Name = Name,\\n        TotalSuppy = TotalSupply\\n    }\\nend\\n \\nfunction process_lib.getBalance(msg)\\n    local bal = 0\\n \\n    -- If not Recipient is provided, then return the Senders balance\\n    if (msg.Tags.Recipient) then\\n        if (Balances[msg.Tags.Recipient]) then\\n            bal = Balances[msg.Tags.Recipient]\\n        end\\n    elseif Balances[msg.From] then\\n        bal = Balances[msg.From]\\n    end\\n \\n    process_lib.sendReply(msg, { \\n        Balance = bal, \\n        Account = msg.Tags.Recipient or msg.From, \\n    }, bal) \\n \\n    return {\\n        Balance = bal,\\n        Account = msg.Tags.Recipient or msg.From\\n    }\\nend\\n \\nfunction process_lib.mint(msg)\\n    assert(type(msg.Quantity) == &#x27;string&#x27;, &#x27;Quantity is required!&#x27;)\\n    assert(0 &lt; tonumber(msg.Quantity), &#x27;Quantity must be greater than zero!&#x27;)\\n \\n    if not Balances[ao.id] then Balances[ao.id] = 0 end\\n \\n    -- Add tokens to the token pool, according to Quantity\\n    Balances[msg.From] = Balances[msg.From] + tonumber(msg.Quantity)\\n    TotalSupply = TotalSupply + tonumber(msg.Quantity)\\n \\n    process_lib.sendReply(msg, {}, Colors.gray .. &quot;Successfully minted &quot; .. Colors.blue .. msg.Quantity .. Colors.reset) \\n \\n    return {\\n        Balance = Balances[msg.From],\\n    } \\nend\\n \\nfunction process_lib.burn(msg)\\n    assert(type(msg.Quantity) == &#x27;string&#x27;, &#x27;Quantity is required!&#x27;)\\n    assert(tonumber(msg.Quantity) &lt;= tonumber(Balances[msg.From]), &#x27;Quantity must be less than or equal to the current balance!&#x27;)\\n \\n    Balances[msg.From] = Balances[msg.From] - tonumber(msg.Quantity)\\n    TotalSupply = TotalSupply - tonumber(msg.Quantity)\\n \\n    process_lib.sendReply(msg, {}, Colors.gray .. &quot;Successfully burned &quot; .. Colors.blue .. msg.Quantity .. Colors.reset) \\n \\n    return {\\n        Balance = Balances[msg.From],\\n    } \\nend\\n \\nfunction process_lib.sendReply(msg, tags, data) \\n    ao.send({ \\n        Target = msg.From, \\n        [&quot;Response-For&quot;] = msg.Action, \\n        Tags = tags, \\n        Data = data \\n    }) \\nend\\n \\nreturn process_lib\\nsendReply is basically just a wrapper around the ao.send function, but it makes the code more readable and easier to maintain. It also allows us to easily test the process logic without having to worry about the input/output handling.\\nHandy TipIt also introduces a new tag [&quot;Response-For&quot;] which will be used to identify the action that the response is for. This will help in identifying the action that the response is for in the frontend.\\nIn the next section, we will introduce Ao Process Testing and discuss how to write unit tests for AO processes to ensure that they are working as expected.\",\"title\":\"2. Separation of Concerns\",\"titles\":[\"Process Design\",\"Process Design Principles\"]}]}],[\"index.fa3afaa29e0f81f60b6edbcd1366831e67da13e36ec2d39700ebd700c26b3761\",{\"mdx\":\"# AO Process Testing [This section provides an overview of how to test AO processes.]\\n\\nIn order to test AO processes, you need to have a basic understanding of the following:\\n\\n- **busted** - Busted is a unit testing framework for Lua. You can learn more about Busted from the [official documentation](https://lunarmodules.github.io/busted/)\\n- **Ao Process Testing Suite** - AO processes are tested using the AO Testing Suite. You can learn more about the AO Testing Suite from the [official documentation](https://github.com/Autonomous-Finance/ao-process-testing)\\n\\n## Process Testing Directory Structure\\n\\nIf you generate a new process using the Create Ao dApp, the directory structure of the process will look somewhat like this:\\n\\n```\\nprocess-name/             # Your process's root directory.\\n├── scripts/              # Utility scripts for the process.\\n│   ├── build.sh          # Build script for the process.\\n│   ├── deploy.sh         # Deploy script for the process.\\n│   └── test.sh           # Test script for the process. // [!code hl] // [!code focus]\\n└── src/                  # Source code for the process.\\n    ├── test/             # Test directory for the process. // [!code hl] // [!code focus]\\n    │   ├── mocked-env    # Mocked env files to test the process. // [!code hl] // [!code focus]\\n    │   ├── setup.lua     # AO Testing Suite setup file. // [!code hl] // [!code focus]\\n    │   └── process_test.lua # Test script for the process. // [!code hl] // [!code focus]\\n    ├── process_lib.lua   # Library for the process.\\n    ├── process.lua       # Entry point for the process.\\n    └── reset_modules.lua # Reset preloaded modules.\\n```\\n\\nWe will now discuss the contents of the `test` directory in detail.\\n\\n## Test Directory\\nThe `test` directory contains the following files:\\n\\n- **mocked-env** - This directory contains the mocked environment files that are used to test the process. The mocked environment files are used to mock the environment variables that are used in the process. The mocked environment files are used to test the process in different environments.\\n- **setup.lua** - This file is used to set up the AO Testing Suite. The setup file is used to set up the AO Testing Suite before running the tests. The setup file is used to set up the environment variables that are used in the process.\\n- **process_test.lua** - This file contains the actual test script and cases for the process.\\n\\n## Writing tests\\n\\nNow that you have a basic understanding of the directory structure of the process, let's write some tests for the process.\\n\\n### Writing a test case\\n\\nTo write a test case for the process, you need to create a new test case in the `process_test.lua` file. The test case should be written using the Busted syntax.\\n\\n:::tip\\nCreate Ao dApp generates a sample test case for the process. You can modify the sample test case to write your own test cases.\\n:::\\n\\n```lua [process-name/src/test/process_test.lua]\\n---@diagnostic disable: duplicate-set-field\\nrequire(\\\"test.setup\\\")()\\n\\n_G.IsInUnitTest    = true -- set this per test file to keep ao.send() from doing anything\\n_G.VerboseTests    = 2    -- how much logging to see (0 - none at all, 1 - important ones, 2 - everything)\\n-- optional logging function that allows for different verbosity levels\\n_G.printVerb       = function(level)\\n    level = level or 2\\n    return function(...) -- define here as global so we can use it in application code too\\n        if _G.VerboseTests >= level then print(table.unpack({ ... })) end\\n    end\\nend\\n\\n\\n-- Require the process library and the process file\\nlocal process      = require \\\"process_lib\\\" -- [!code hl] -- [!code focus]\\n\\n-- Define initial state\\n_G.Version = \\\"1.0.0\\\" -- [!code hl] -- [!code focus]\\n_G.Balances = _G.Balances or { [\\\"0x123\\\"] = 1000 } -- [!code hl] -- [!code focus]\\n_G.TotalSupply = _G.TotalSupply or 1000 -- [!code hl] -- [!code focus]\\n_G.Name = \\\"test token\\\" -- [!code hl] -- [!code focus]\\n\\n-- This function resets the global variables to their initial state\\nlocal resetGlobals = function() -- [!code hl] -- [!code focus]\\n  _G.Version = \\\"1.0.0\\\" -- [!code hl] -- [!code focus]\\n  _G.Balances = _G.Balances or { [\\\"0x123\\\"] = 1000 } -- [!code hl] -- [!code focus]\\n  _G.TotalSupply = _G.TotalSupply or 1000 -- [!code hl] -- [!code focus]\\n  _G.Name = \\\"test token\\\" -- [!code hl] -- [!code focus]\\nend -- [!code hl] -- [!code focus]\\n\\ndescribe(\\\"token process\\\", function() -- [!code hl] -- [!code focus]\\n    setup(function() -- [!code hl] -- [!code focus]\\n        -- Mock the sendReply function -- [!code hl] -- [!code focus]\\n        process.sendReply = function(message) -- [!code hl] -- [!code focus]\\n            return message -- [!code hl] -- [!code focus]\\n        end -- [!code hl] -- [!code focus]\\n    end) -- [!code hl] -- [!code focus]\\n\\n    describe(\\\"getBalance\\\", function() -- [!code hl] -- [!code focus]\\n        it(\\\"should return correct Balance\\\", function() -- [!code hl] -- [!code focus]\\n            local message = { -- [!code hl] -- [!code focus]\\n                From = \\\"0x123\\\", -- [!code hl] -- [!code focus]\\n                Action = \\\"Balance\\\", -- [!code hl] -- [!code focus]\\n                Tags = {} -- [!code hl] -- [!code focus]\\n            } -- [!code hl] -- [!code focus]\\n\\n            local response = process.getBalance(message) -- [!code hl] -- [!code focus]\\n            assert.are.same(1000, response.Balance) -- [!code hl] -- [!code focus]\\n\\n            -- reset globals\\n            resetGlobals() -- [!code hl] -- [!code focus]\\n        end) -- [!code hl] -- [!code focus]\\n    end) -- [!code hl] -- [!code focus]\\nend) -- [!code hl] -- [!code focus]\\n```\\n\\n\\n### Running the tests\\n:::warning[Busted is required]\\nIn order to write tests for AO processes, you need to have a basic understanding of Busted. You can learn more about Busted from the [official documentation](https://lunarmodules.github.io/busted/).\\n\\nInstalling busted can be done using luarocks by running the following command:\\n\\n```bash [Terminal]\\nluarocks install busted\\n```\\n:::\\n\\nCreate Ao dApp provides a test script that can be used to run the tests for the process. The test script is located in the `./ao/process-name/scripts` directory of the process.\\n\\nTo run the tests for the process, you need to run the test script using the following command from the project root:\\n\\n```bash [Terminal]\\ncd ao/process-name && ./scripts/test.sh\\n```\\n\\n:::tip[Handy Tip]\\nCreate Ao dApp provides a shortcut to run the tests for the process. You can run the tests for the process using the following command from the project root:\\n\\n```bash [Terminal]\\nnpm run myprocess:test\\n```\\n:::\",\"document\":[{\"href\":\"/process-development/testing#ao-process-testing\",\"html\":\"<div role=\\\"doc-subtitle\\\">This section provides an overview of how to test AO processes.</div></header>\\n<p>In order to test AO processes, you need to have a basic understanding of the following:</p>\\n<ul>\\n<li><strong>busted</strong> - Busted is a unit testing framework for Lua. You can learn more about Busted from the <a href=\\\"https://lunarmodules.github.io/busted/\\\">official documentation</a></li>\\n<li><strong>Ao Process Testing Suite</strong> - AO processes are tested using the AO Testing Suite. You can learn more about the AO Testing Suite from the <a href=\\\"https://github.com/Autonomous-Finance/ao-process-testing\\\">official documentation</a></li>\\n</ul>\\n\",\"id\":\"docs/pages/process-development/testing.mdx#ao-process-testing\",\"isPage\":true,\"text\":\"This section provides an overview of how to test AO processes.\\nIn order to test AO processes, you need to have a basic understanding of the following:\\n\\nbusted - Busted is a unit testing framework for Lua. You can learn more about Busted from the official documentation\\nAo Process Testing Suite - AO processes are tested using the AO Testing Suite. You can learn more about the AO Testing Suite from the official documentation\\n\\n\",\"title\":\"AO Process Testing\",\"titles\":[]},{\"href\":\"/process-development/testing#process-testing-directory-structure\",\"html\":\"\\n<p>If you generate a new process using the Create Ao dApp, the directory structure of the process will look somewhat like this:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused has-highlighted\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span>process-name/             # Your process&#x27;s root directory.</span></span>\\n<span class=\\\"line\\\"><span>├── scripts/              # Utility scripts for the process.</span></span>\\n<span class=\\\"line\\\"><span>│   ├── build.sh          # Build script for the process.</span></span>\\n<span class=\\\"line\\\"><span>│   ├── deploy.sh         # Deploy script for the process.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│   └── test.sh           # Test script for the process.</span></span>\\n<span class=\\\"line\\\"><span>└── src/                  # Source code for the process.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>    ├── test/             # Test directory for the process.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>    │   ├── mocked-env    # Mocked env files to test the process.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>    │   ├── setup.lua     # AO Testing Suite setup file.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>    │   └── process_test.lua # Test script for the process.</span></span>\\n<span class=\\\"line\\\"><span>    ├── process_lib.lua   # Library for the process.</span></span>\\n<span class=\\\"line\\\"><span>    ├── process.lua       # Entry point for the process.</span></span>\\n<span class=\\\"line\\\"><span>    └── reset_modules.lua # Reset preloaded modules.</span></span></code></pre>\\n<p>We will now discuss the contents of the <code>test</code> directory in detail.</p>\\n\",\"id\":\"docs/pages/process-development/testing.mdx#process-testing-directory-structure\",\"isPage\":false,\"text\":\"\\nIf you generate a new process using the Create Ao dApp, the directory structure of the process will look somewhat like this:\\nprocess-name/             # Your process&#x27;s root directory.\\n├── scripts/              # Utility scripts for the process.\\n│   ├── build.sh          # Build script for the process.\\n│   ├── deploy.sh         # Deploy script for the process.\\n│   └── test.sh           # Test script for the process.\\n└── src/                  # Source code for the process.\\n    ├── test/             # Test directory for the process.\\n    │   ├── mocked-env    # Mocked env files to test the process.\\n    │   ├── setup.lua     # AO Testing Suite setup file.\\n    │   └── process_test.lua # Test script for the process.\\n    ├── process_lib.lua   # Library for the process.\\n    ├── process.lua       # Entry point for the process.\\n    └── reset_modules.lua # Reset preloaded modules.\\nWe will now discuss the contents of the test directory in detail.\\n\",\"title\":\"Process Testing Directory Structure\",\"titles\":[\"AO Process Testing\"]},{\"href\":\"/process-development/testing#test-directory\",\"html\":\"\\n<p>The <code>test</code> directory contains the following files:</p>\\n<ul>\\n<li><strong>mocked-env</strong> - This directory contains the mocked environment files that are used to test the process. The mocked environment files are used to mock the environment variables that are used in the process. The mocked environment files are used to test the process in different environments.</li>\\n<li><strong>setup.lua</strong> - This file is used to set up the AO Testing Suite. The setup file is used to set up the AO Testing Suite before running the tests. The setup file is used to set up the environment variables that are used in the process.</li>\\n<li><strong>process_test.lua</strong> - This file contains the actual test script and cases for the process.</li>\\n</ul>\\n\",\"id\":\"docs/pages/process-development/testing.mdx#test-directory\",\"isPage\":false,\"text\":\"\\nThe test directory contains the following files:\\n\\nmocked-env - This directory contains the mocked environment files that are used to test the process. The mocked environment files are used to mock the environment variables that are used in the process. The mocked environment files are used to test the process in different environments.\\nsetup.lua - This file is used to set up the AO Testing Suite. The setup file is used to set up the AO Testing Suite before running the tests. The setup file is used to set up the environment variables that are used in the process.\\nprocess_test.lua - This file contains the actual test script and cases for the process.\\n\\n\",\"title\":\"Test Directory\",\"titles\":[\"AO Process Testing\"]},{\"href\":\"/process-development/testing#writing-tests\",\"html\":\"\\n<p>Now that you have a basic understanding of the directory structure of the process, let&#x27;s write some tests for the process.</p>\\n\",\"id\":\"docs/pages/process-development/testing.mdx#writing-tests\",\"isPage\":false,\"text\":\"\\nNow that you have a basic understanding of the directory structure of the process, let&#x27;s write some tests for the process.\\n\",\"title\":\"Writing tests\",\"titles\":[\"AO Process Testing\"]},{\"href\":\"/process-development/testing#writing-a-test-case\",\"html\":\"\\n<p>To write a test case for the process, you need to create a new test case in the <code>process_test.lua</code> file. The test case should be written using the Busted syntax.</p>\\n<aside data-callout=\\\"tip\\\"><p>Create Ao dApp generates a sample test case for the process. You can modify the sample test case to write your own test cases.</p></aside>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused has-highlighted\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"process-name/src/test/process_test.lua\\\" data-lang=\\\"lua\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">---</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">@diagnostic</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> disable:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> duplicate-set-field</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">require</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;test.setup&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)()</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">_G</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">IsInUnitTest</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    =</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> true</span><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\"> -- set this per test file to keep ao.send() from doing anything</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">_G</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">VerboseTests</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    =</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 2</span><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    -- how much logging to see (0 - none at all, 1 - important ones, 2 - everything)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">-- optional logging function that allows for different verbosity levels</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">_G</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">printVerb</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">       =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> function</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(level)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    level </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> level </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">or</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 2</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> function</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(...) </span><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">-- define here as global so we can use it in application code too</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        if</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> _G</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">VerboseTests</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> &gt;=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> level </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">then</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> print</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">table.unpack</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({ </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">...</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> })) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">end</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    end</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">end</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">-- Require the process library and the process file</span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">local</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> process      </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> require</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;process_lib&quot; </span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">-- Define initial state</span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">_G</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Version</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;1.0.0&quot; </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">_G</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Balances</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> _G</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Balances</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> or</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { [</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;0x123&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 1000</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> } </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">_G</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">TotalSupply</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> _G</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">TotalSupply</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> or</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 1000</span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">_G</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Name</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;test token&quot; </span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">-- This function resets the global variables to their initial state</span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">local</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> resetGlobals</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> function</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">  _G</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Version</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;1.0.0&quot; </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">  _G</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Balances</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> _G</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Balances</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> or</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { [</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;0x123&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 1000</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> } </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">  _G</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">TotalSupply</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> _G</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">TotalSupply</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> or</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 1000</span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">  _G</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Name</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;test token&quot; </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">end</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">describe</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;token process&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">function</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">    setup</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">function</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">        -- Mock the sendReply function</span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        process.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">sendReply</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> function</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(message) </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> message </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        end</span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    end</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">    describe</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;getBalance&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">function</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">        it</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;should return correct Balance&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">function</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            local</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> message </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                From </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;0x123&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                Action </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;Balance&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                Tags </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {} </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            } </span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            local</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> response </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> process.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">getBalance</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(message) </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">            assert</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">are</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">same</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">1000</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, response.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">Balance</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">            -- reset globals</span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">            resetGlobals</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        end</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    end</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">end</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span></span></code></pre>\\n\",\"id\":\"docs/pages/process-development/testing.mdx#writing-a-test-case\",\"isPage\":false,\"text\":\"\\nTo write a test case for the process, you need to create a new test case in the process_test.lua file. The test case should be written using the Busted syntax.\\nCreate Ao dApp generates a sample test case for the process. You can modify the sample test case to write your own test cases.\\n---@diagnostic disable: duplicate-set-field\\nrequire(&quot;test.setup&quot;)()\\n \\n_G.IsInUnitTest    = true -- set this per test file to keep ao.send() from doing anything\\n_G.VerboseTests    = 2    -- how much logging to see (0 - none at all, 1 - important ones, 2 - everything)\\n-- optional logging function that allows for different verbosity levels\\n_G.printVerb       = function(level)\\n    level = level or 2\\n    return function(...) -- define here as global so we can use it in application code too\\n        if _G.VerboseTests &gt;= level then print(table.unpack({ ... })) end\\n    end\\nend\\n \\n \\n-- Require the process library and the process file\\nlocal process      = require &quot;process_lib&quot; \\n \\n-- Define initial state\\n_G.Version = &quot;1.0.0&quot; \\n_G.Balances = _G.Balances or { [&quot;0x123&quot;] = 1000 } \\n_G.TotalSupply = _G.TotalSupply or 1000\\n_G.Name = &quot;test token&quot; \\n \\n-- This function resets the global variables to their initial state\\nlocal resetGlobals = function() \\n  _G.Version = &quot;1.0.0&quot; \\n  _G.Balances = _G.Balances or { [&quot;0x123&quot;] = 1000 } \\n  _G.TotalSupply = _G.TotalSupply or 1000\\n  _G.Name = &quot;test token&quot; \\nend\\n \\ndescribe(&quot;token process&quot;, function() \\n    setup(function() \\n        -- Mock the sendReply function\\n        process.sendReply = function(message) \\n            return message \\n        end\\n    end) \\n \\n    describe(&quot;getBalance&quot;, function() \\n        it(&quot;should return correct Balance&quot;, function() \\n            local message = { \\n                From = &quot;0x123&quot;, \\n                Action = &quot;Balance&quot;, \\n                Tags = {} \\n            } \\n \\n            local response = process.getBalance(message) \\n            assert.are.same(1000, response.Balance) \\n \\n            -- reset globals\\n            resetGlobals() \\n        end) \\n    end) \\nend) \\n\",\"title\":\"Writing a test case\",\"titles\":[\"AO Process Testing\",\"Writing tests\"]},{\"href\":\"/process-development/testing#running-the-tests\",\"html\":\"\\n<aside data-callout=\\\"warning\\\"><strong data-callout-title=\\\"true\\\">Busted is required</strong><p>In order to write tests for AO processes, you need to have a basic understanding of Busted. You can learn more about Busted from the <a href=\\\"https://lunarmodules.github.io/busted/\\\">official documentation</a>.</p><p>Installing busted can be done using luarocks by running the following command:</p><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Terminal\\\" data-lang=\\\"bash\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">luarocks</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> install</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> busted</span></span></code></pre></aside>\\n<p>Create Ao dApp provides a test script that can be used to run the tests for the process. The test script is located in the <code>./ao/process-name/scripts</code> directory of the process.</p>\\n<p>To run the tests for the process, you need to run the test script using the following command from the project root:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Terminal\\\" data-lang=\\\"bash\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">cd</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> ao/process-name</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> &amp;&amp; </span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">./scripts/test.sh</span></span></code></pre>\\n<aside data-callout=\\\"tip\\\"><strong data-callout-title=\\\"true\\\">Handy Tip</strong><p>Create Ao dApp provides a shortcut to run the tests for the process. You can run the tests for the process using the following command from the project root:</p><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Terminal\\\" data-lang=\\\"bash\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">npm</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> run</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> myprocess:test</span></span></code></pre></aside>\",\"id\":\"docs/pages/process-development/testing.mdx#running-the-tests\",\"isPage\":false,\"text\":\"\\nBusted is requiredIn order to write tests for AO processes, you need to have a basic understanding of Busted. You can learn more about Busted from the official documentation.Installing busted can be done using luarocks by running the following command:luarocks install busted\\nCreate Ao dApp provides a test script that can be used to run the tests for the process. The test script is located in the ./ao/process-name/scripts directory of the process.\\nTo run the tests for the process, you need to run the test script using the following command from the project root:\\ncd ao/process-name &amp;&amp; ./scripts/test.sh\\nHandy TipCreate Ao dApp provides a shortcut to run the tests for the process. You can run the tests for the process using the following command from the project root:npm run myprocess:test\",\"title\":\"Running the tests\",\"titles\":[\"AO Process Testing\",\"Writing tests\"]}]}],[\"index.1d29b4f8b5b510b411f91878b202ac2d9845d47445e1885336f3c87c0480c50d\",{\"mdx\":\"# Connecting to Backend [In this section, we will learn how to connect the frontend to the backend processes.]\\n\\n## Arweave Wallet Kit\\n\\n- [Arweave Wallet Kit](https://github.com/labscommunity/arweave-wallet-kit)\\n\\nReact Hooks and Components for better interaction with Arweave wallets. Modular, can support any Arweave-based wallet.\\n\\nBy default, Create Ao dApp comes with Arweave Wallet Kit pre-installed. You can use it to interact with Arweave wallets in your frontend.\\n\\nConfiguration of the Arweave Wallet Kit is present in `apps/frontend/src/main.tsx`. You can modify the configuration as per your requirements.\\n\\n```tsx [apps/frontend/src/main.tsx]\\nimport { QueryClient, QueryClientProvider } from \\\"@tanstack/react-query\\\";\\nimport { ArweaveWalletKit } from \\\"arweave-wallet-kit\\\"; // [!code hl] // [!code focus]\\nimport React from \\\"react\\\";\\nimport ReactDOM from \\\"react-dom/client\\\";\\nimport App from \\\"./App.tsx\\\";\\nimport \\\"./index.css\\\";\\n\\n// Create a React Query client \\nconst queryClient = new QueryClient();\\n\\n// biome-ignore lint/style/noNonNullAssertion: <explanation>\\nReactDOM.createRoot(document.getElementById(\\\"root\\\")!).render(\\n\\t<React.StrictMode>\\n\\t\\t<ArweaveWalletKit // [!code hl] // [!code focus]\\n\\t\\t\\tconfig={{// [!code hl] // [!code focus]\\n\\t\\t\\t\\tpermissions: [\\\"SIGN_TRANSACTION\\\", \\\"ACCESS_ADDRESS\\\"], // [!code hl] // [!code focus]\\n\\t\\t\\t\\tensurePermissions: true, // [!code hl] // [!code focus]\\n\\t\\t\\t}} // [!code hl] // [!code focus]\\n\\t\\t\\ttheme={{ // [!code hl] // [!code focus]\\n\\t\\t\\t\\tdisplayTheme: \\\"light\\\", // [!code hl] // [!code focus]\\n\\t\\t\\t}} // [!code hl] // [!code focus]\\n\\t\\t> // [!code hl] // [!code focus]\\n\\t\\t\\t<QueryClientProvider client={queryClient}>\\n\\t\\t\\t\\t<App />\\n\\t\\t\\t</QueryClientProvider>\\n\\t\\t</ArweaveWalletKit> // [!code hl] // [!code focus]\\n\\t</React.StrictMode>,\\n);\\n```\\n\\n## TanStack Query\\n\\n[TanStack Query](https://tanstack.com/query/latest) is a powerful and flexible data fetching library for React. It is highly recommended to use TanStack Query for data fetching in your frontend. This will enable caching, pagination, and other features out of the box.\\n\\nBy default, Create Ao dApp comes with TanStack Query pre-installed. You can use it to fetch data from the backend processes.\\n\\nConfiguration of the QueryClient is present in `apps/frontend/src/main.tsx`. You can modify the configuration as per your requirements.\\n\\n```tsx [apps/frontend/src/main.tsx]\\nimport { QueryClient, QueryClientProvider } from \\\"@tanstack/react-query\\\"; // [!code hl] // [!code focus]\\nimport { ArweaveWalletKit } from \\\"arweave-wallet-kit\\\";\\nimport React from \\\"react\\\";\\nimport ReactDOM from \\\"react-dom/client\\\";\\nimport App from \\\"./App.tsx\\\";\\nimport \\\"./index.css\\\";\\n\\n// Create a React Query client // [!code hl] // [!code focus]\\nconst queryClient = new QueryClient(); // [!code hl] // [!code focus]\\n\\n// biome-ignore lint/style/noNonNullAssertion: <explanation>\\nReactDOM.createRoot(document.getElementById(\\\"root\\\")!).render(\\n\\t<React.StrictMode>\\n\\t\\t<ArweaveWalletKit\\n\\t\\t\\tconfig={{\\n\\t\\t\\t\\tpermissions: [\\\"SIGN_TRANSACTION\\\", \\\"ACCESS_ADDRESS\\\"],\\n\\t\\t\\t\\tensurePermissions: true,\\n\\t\\t\\t}}\\n\\t\\t\\ttheme={{\\n\\t\\t\\t\\tdisplayTheme: \\\"light\\\",\\n\\t\\t\\t}}\\n\\t\\t>\\n\\t\\t\\t<QueryClientProvider client={queryClient}> // [!code hl] // [!code focus]\\n\\t\\t\\t\\t<App />\\n\\t\\t\\t</QueryClientProvider> // [!code hl] // [!code focus]\\n\\t\\t</ArweaveWalletKit>\\n\\t</React.StrictMode>,\\n);\\n```\\n\\n## Interacting with Backend Processes\\n\\n:::tip[Handy Tip]\\nThe backend processes are injected into the frontend as constants. You can access these processes in the frontend by importing them from the `constants` directory.\\n:::\\n\\nBy default the Create Ao dApp comes with a sample `counter` component that demonstrates how to use the backend process in the frontend. You can use this as a reference to build your own components.\\n\\n- The backend process address is present in `apps/frontend/src/constants/counter_process.ts`. You can import this process in your components and use it as per your requirements.\\n\\n- The counter component is present in `apps/frontend/src/components/counter.tsx`. You can check out this component to understand how to use the backend process in the frontend.\\n\\n## Reading Data from Backend Process\\n\\n- It imports the backend process from the `constants` directory.\\n- It uses the `useQuery` hook from TanStack Query to fetch the counter value from the backend process.\\n\\n```tsx [apps/frontend/src/components/counter.tsx]\\nimport { COUNTER } from \\\"../constants/counter_process\\\";\\nimport { useMutation, useQuery, useQueryClient } from \\\"@tanstack/react-query\\\";\\n\\nconst {\\n\\t\\tdata: counter,\\n\\t\\terror,\\n\\t\\tisLoading,\\n\\t\\tisFetching,\\n\\t} = useQuery({\\n\\t\\tqueryKey: [\\\"counter\\\"],\\n\\t\\tqueryFn: async () => {\\n\\t\\t\\tconst dryrunResult = await dryrun({\\n\\t\\t\\t\\tprocess: COUNTER,\\n\\t\\t\\t\\ttags: [\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tname: \\\"Action\\\",\\n\\t\\t\\t\\t\\t\\tvalue: \\\"Info\\\",\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t],\\n\\t\\t\\t});\\n\\n\\t\\t\\tif (dryrunResult.Messages[0].Data) {\\n\\t\\t\\t\\treturn JSON.parse(dryrunResult.Messages[0].Data);\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn undefined;\\n\\t\\t},\\n\\t});\\n```\\n\\nUsing react-query hooks, you can fetch data from the backend processes and update the UI based on the fetched data. The `queryFn` function is calling the `dryrun` function from the `@permaweb/aoconnect` library to fetch the counter value from the backend process and then returns the counter value.\\n\\n:::tip[Handy Tip]\\nSome cool features of TanStack Query:\\n- **Caching**: Automatically cache data and keep it up to date.\\n- **isLoading**: A boolean that is `true` when the query is in a loading state.\\n- **isFetching**: A boolean that is `true` when the query is fetching data.\\n- **error**: An error object if the query failed.\\n:::\\n\\n## Sending Data to Backend Process\\n\\nYou can always send messages using `useMutation` hook provided by TanStack Query. The `useMutation` hook is used to send messages to the backend processes. You can use this hook to send messages to the backend processes and update the UI based on the response.\\n\\nAn example is the Increase button in the `counter` component. When the Increase button is clicked, it sends a message to the backend process to increase the counter value.\\n\\n```tsx [apps/frontend/src/components/counter.tsx]\\nconst increaseCounter = useMutation({\\n\\t\\tmutationKey: [\\\"IncreaseCounter\\\"],\\n\\t\\tmutationFn: async () => {\\n\\t\\t\\tconst messageId = await message({\\n\\t\\t\\t\\tprocess: COUNTER,\\n\\t\\t\\t\\ttags: [\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tname: \\\"Action\\\",\\n\\t\\t\\t\\t\\t\\tvalue: \\\"IncreaseCounter\\\",\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t],\\n\\t\\t\\t\\tdata: \\\"\\\",\\n\\t\\t\\t\\tsigner: createDataItemSigner(window.arweaveWallet),\\n\\t\\t\\t});\\n\\n\\t\\t\\tconst messageResult = await result({\\n\\t\\t\\t\\tprocess: COUNTER,\\n\\t\\t\\t\\tmessage: messageId,\\n\\t\\t\\t});\\n\\n\\t\\t\\tif (messageResult.Messages[0].Data) {\\n\\t\\t\\t\\treturn JSON.parse(messageResult.Messages[0].Data);\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn undefined;\\n\\t\\t},\\n\\t\\tonSuccess: () => {\\n\\t\\t\\tqueryClient.invalidateQueries();\\n\\t\\t},\\n\\t});\\n```\\n\\nThe `mutationFn` function is calling the `message` function from the `@permaweb/aoconnect` library to send a message to the backend process to increase the counter value. The `onSuccess` function is used to invalidate the query cache so that the UI can be updated with the new counter value.\\n\\n:::tip[Handy Tip]\\nSome cool features of TanStack Query:\\n- **mutationFn**: A function that sends a message to the backend process.\\n- **onSuccess**: A function that is called when the mutation is successful.\\n- **invalidateQueries**: A function that invalidates the query cache and re-fetches the data.\\n:::\",\"document\":[{\"href\":\"/frontend-development/connecting-to-backend#connecting-to-backend\",\"html\":\"<div role=\\\"doc-subtitle\\\">In this section, we will learn how to connect the frontend to the backend processes.</div></header>\\n\",\"id\":\"docs/pages/frontend-development/connecting-to-backend.mdx#connecting-to-backend\",\"isPage\":true,\"text\":\"In this section, we will learn how to connect the frontend to the backend processes.\\n\",\"title\":\"Connecting to Backend\",\"titles\":[]},{\"href\":\"/frontend-development/connecting-to-backend#arweave-wallet-kit\",\"html\":\"\\n<ul>\\n<li><a href=\\\"https://github.com/labscommunity/arweave-wallet-kit\\\">Arweave Wallet Kit</a></li>\\n</ul>\\n<p>React Hooks and Components for better interaction with Arweave wallets. Modular, can support any Arweave-based wallet.</p>\\n<p>By default, Create Ao dApp comes with Arweave Wallet Kit pre-installed. You can use it to interact with Arweave wallets in your frontend.</p>\\n<p>Configuration of the Arweave Wallet Kit is present in <code>apps/frontend/src/main.tsx</code>. You can modify the configuration as per your requirements.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused has-highlighted\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"apps/frontend/src/main.tsx\\\" data-lang=\\\"tsx\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { QueryClient, QueryClientProvider } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;@tanstack/react-query&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { ArweaveWalletKit } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;arweave-wallet-kit&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">; </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> React </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;react&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> ReactDOM </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;react-dom/client&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> App </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;./App.tsx&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;./index.css&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Create a React Query client </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> queryClient</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> new</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> QueryClient</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">();</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// biome-ignore lint/style/noNonNullAssertion: &lt;explanation&gt;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">ReactDOM.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">createRoot</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(document.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">getElementById</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;root&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">!</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">).</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">render</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t&lt;</span><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">React.StrictMode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">&gt;</span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t&lt;</span><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">ArweaveWalletKit</span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">\\t\\t\\tconfig</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#F47067\\\">{</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\tpermissions: [</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;SIGN_TRANSACTION&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;ACCESS_ADDRESS&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">], </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\tensurePermissions: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">true</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t}</span><span style=\\\"color:#24292E;--shiki-dark:#F47067\\\">}</span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">\\t\\t\\ttheme</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#F47067\\\">{</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{ </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\tdisplayTheme: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;light&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t}</span><span style=\\\"color:#24292E;--shiki-dark:#F47067\\\">}</span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t&gt;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t&lt;</span><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">QueryClientProvider</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\"> client</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#F47067\\\">{</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">queryClient</span><span style=\\\"color:#24292E;--shiki-dark:#F47067\\\">}</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">&gt;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\t&lt;</span><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">App</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> /&gt;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t&lt;/</span><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">QueryClientProvider</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">&gt;</span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t&lt;/</span><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">ArweaveWalletKit</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">&gt;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t&lt;/</span><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">React.StrictMode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">&gt;,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">);</span></span></code></pre>\\n\",\"id\":\"docs/pages/frontend-development/connecting-to-backend.mdx#arweave-wallet-kit\",\"isPage\":false,\"text\":\"\\n\\nArweave Wallet Kit\\n\\nReact Hooks and Components for better interaction with Arweave wallets. Modular, can support any Arweave-based wallet.\\nBy default, Create Ao dApp comes with Arweave Wallet Kit pre-installed. You can use it to interact with Arweave wallets in your frontend.\\nConfiguration of the Arweave Wallet Kit is present in apps/frontend/src/main.tsx. You can modify the configuration as per your requirements.\\nimport { QueryClient, QueryClientProvider } from &quot;@tanstack/react-query&quot;;\\nimport { ArweaveWalletKit } from &quot;arweave-wallet-kit&quot;; \\nimport React from &quot;react&quot;;\\nimport ReactDOM from &quot;react-dom/client&quot;;\\nimport App from &quot;./App.tsx&quot;;\\nimport &quot;./index.css&quot;;\\n \\n// Create a React Query client \\nconst queryClient = new QueryClient();\\n \\n// biome-ignore lint/style/noNonNullAssertion: &lt;explanation&gt;\\nReactDOM.createRoot(document.getElementById(&quot;root&quot;)!).render(\\n\\t&lt;React.StrictMode&gt;\\n\\t\\t&lt;ArweaveWalletKit\\n\\t\\t\\tconfig={{\\n\\t\\t\\t\\tpermissions: [&quot;SIGN_TRANSACTION&quot;, &quot;ACCESS_ADDRESS&quot;], \\n\\t\\t\\t\\tensurePermissions: true, \\n\\t\\t\\t}}\\n\\t\\t\\ttheme={{ \\n\\t\\t\\t\\tdisplayTheme: &quot;light&quot;, \\n\\t\\t\\t}}\\n\\t\\t&gt;\\n\\t\\t\\t&lt;QueryClientProvider client={queryClient}&gt;\\n\\t\\t\\t\\t&lt;App /&gt;\\n\\t\\t\\t&lt;/QueryClientProvider&gt;\\n\\t\\t&lt;/ArweaveWalletKit&gt;\\n\\t&lt;/React.StrictMode&gt;,\\n);\\n\",\"title\":\"Arweave Wallet Kit\",\"titles\":[\"Connecting to Backend\"]},{\"href\":\"/frontend-development/connecting-to-backend#tanstack-query\",\"html\":\"\\n<p><a href=\\\"https://tanstack.com/query/latest\\\">TanStack Query</a> is a powerful and flexible data fetching library for React. It is highly recommended to use TanStack Query for data fetching in your frontend. This will enable caching, pagination, and other features out of the box.</p>\\n<p>By default, Create Ao dApp comes with TanStack Query pre-installed. You can use it to fetch data from the backend processes.</p>\\n<p>Configuration of the QueryClient is present in <code>apps/frontend/src/main.tsx</code>. You can modify the configuration as per your requirements.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused has-highlighted\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"apps/frontend/src/main.tsx\\\" data-lang=\\\"tsx\\\"><code><span class=\\\"line focused highlighted\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { QueryClient, QueryClientProvider } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;@tanstack/react-query&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">; </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { ArweaveWalletKit } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;arweave-wallet-kit&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> React </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;react&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> ReactDOM </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;react-dom/client&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> App </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;./App.tsx&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;./index.css&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Create a React Query client</span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> queryClient</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> new</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> QueryClient</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(); </span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// biome-ignore lint/style/noNonNullAssertion: &lt;explanation&gt;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">ReactDOM.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">createRoot</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(document.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">getElementById</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;root&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">!</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">).</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">render</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t&lt;</span><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">React.StrictMode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">&gt;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t&lt;</span><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">ArweaveWalletKit</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">\\t\\t\\tconfig</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#F47067\\\">{</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\tpermissions: [</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;SIGN_TRANSACTION&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;ACCESS_ADDRESS&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\tensurePermissions: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">true</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t}</span><span style=\\\"color:#24292E;--shiki-dark:#F47067\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">\\t\\t\\ttheme</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#F47067\\\">{</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\tdisplayTheme: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;light&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t}</span><span style=\\\"color:#24292E;--shiki-dark:#F47067\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t&gt;</span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t&lt;</span><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">QueryClientProvider</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\"> client</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#F47067\\\">{</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">queryClient</span><span style=\\\"color:#24292E;--shiki-dark:#F47067\\\">}</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">&gt;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\t&lt;</span><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">App</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> /&gt;</span></span>\\n<span class=\\\"line focused highlighted\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t&lt;/</span><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">QueryClientProvider</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">&gt;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t&lt;/</span><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">ArweaveWalletKit</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">&gt;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t&lt;/</span><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">React.StrictMode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">&gt;,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">);</span></span></code></pre>\\n\",\"id\":\"docs/pages/frontend-development/connecting-to-backend.mdx#tanstack-query\",\"isPage\":false,\"text\":\"\\nTanStack Query is a powerful and flexible data fetching library for React. It is highly recommended to use TanStack Query for data fetching in your frontend. This will enable caching, pagination, and other features out of the box.\\nBy default, Create Ao dApp comes with TanStack Query pre-installed. You can use it to fetch data from the backend processes.\\nConfiguration of the QueryClient is present in apps/frontend/src/main.tsx. You can modify the configuration as per your requirements.\\nimport { QueryClient, QueryClientProvider } from &quot;@tanstack/react-query&quot;; \\nimport { ArweaveWalletKit } from &quot;arweave-wallet-kit&quot;;\\nimport React from &quot;react&quot;;\\nimport ReactDOM from &quot;react-dom/client&quot;;\\nimport App from &quot;./App.tsx&quot;;\\nimport &quot;./index.css&quot;;\\n \\n// Create a React Query client\\nconst queryClient = new QueryClient(); \\n \\n// biome-ignore lint/style/noNonNullAssertion: &lt;explanation&gt;\\nReactDOM.createRoot(document.getElementById(&quot;root&quot;)!).render(\\n\\t&lt;React.StrictMode&gt;\\n\\t\\t&lt;ArweaveWalletKit\\n\\t\\t\\tconfig={{\\n\\t\\t\\t\\tpermissions: [&quot;SIGN_TRANSACTION&quot;, &quot;ACCESS_ADDRESS&quot;],\\n\\t\\t\\t\\tensurePermissions: true,\\n\\t\\t\\t}}\\n\\t\\t\\ttheme={{\\n\\t\\t\\t\\tdisplayTheme: &quot;light&quot;,\\n\\t\\t\\t}}\\n\\t\\t&gt;\\n\\t\\t\\t&lt;QueryClientProvider client={queryClient}&gt;\\n\\t\\t\\t\\t&lt;App /&gt;\\n\\t\\t\\t&lt;/QueryClientProvider&gt;\\n\\t\\t&lt;/ArweaveWalletKit&gt;\\n\\t&lt;/React.StrictMode&gt;,\\n);\\n\",\"title\":\"TanStack Query\",\"titles\":[\"Connecting to Backend\"]},{\"href\":\"/frontend-development/connecting-to-backend#interacting-with-backend-processes\",\"html\":\"\\n<aside data-callout=\\\"tip\\\"><strong data-callout-title=\\\"true\\\">Handy Tip</strong><p>The backend processes are injected into the frontend as constants. You can access these processes in the frontend by importing them from the <code>constants</code> directory.</p></aside>\\n<p>By default the Create Ao dApp comes with a sample <code>counter</code> component that demonstrates how to use the backend process in the frontend. You can use this as a reference to build your own components.</p>\\n<ul>\\n<li>\\n<p>The backend process address is present in <code>apps/frontend/src/constants/counter_process.ts</code>. You can import this process in your components and use it as per your requirements.</p>\\n</li>\\n<li>\\n<p>The counter component is present in <code>apps/frontend/src/components/counter.tsx</code>. You can check out this component to understand how to use the backend process in the frontend.</p>\\n</li>\\n</ul>\\n\",\"id\":\"docs/pages/frontend-development/connecting-to-backend.mdx#interacting-with-backend-processes\",\"isPage\":false,\"text\":\"\\nHandy TipThe backend processes are injected into the frontend as constants. You can access these processes in the frontend by importing them from the constants directory.\\nBy default the Create Ao dApp comes with a sample counter component that demonstrates how to use the backend process in the frontend. You can use this as a reference to build your own components.\\n\\n\\nThe backend process address is present in apps/frontend/src/constants/counter_process.ts. You can import this process in your components and use it as per your requirements.\\n\\n\\nThe counter component is present in apps/frontend/src/components/counter.tsx. You can check out this component to understand how to use the backend process in the frontend.\\n\\n\\n\",\"title\":\"Interacting with Backend Processes\",\"titles\":[\"Connecting to Backend\"]},{\"href\":\"/frontend-development/connecting-to-backend#reading-data-from-backend-process\",\"html\":\"\\n<ul>\\n<li>It imports the backend process from the <code>constants</code> directory.</li>\\n<li>It uses the <code>useQuery</code> hook from TanStack Query to fetch the counter value from the backend process.</li>\\n</ul>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"apps/frontend/src/components/counter.tsx\\\" data-lang=\\\"tsx\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { COUNTER } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;../constants/counter_process&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { useMutation, useQuery, useQueryClient } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;@tanstack/react-query&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">\\t\\tdata</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">counter</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">\\t\\terror</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">\\t\\tisLoading</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">\\t\\tisFetching</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t} </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> useQuery</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\tqueryKey: [</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;counter&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">\\t\\tqueryFn</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">async</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> () </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=&gt;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">\\t\\t\\tconst</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> dryrunResult</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> dryrun</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\tprocess: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">COUNTER</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\ttags: [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\t\\t{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\t\\t\\tname: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;Action&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\t\\t\\tvalue: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;Info&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\t\\t},</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\t],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t});</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">\\t\\t\\tif</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (dryrunResult.Messages[</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">0</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">].Data) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">\\t\\t\\t\\treturn</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> JSON</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">parse</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(dryrunResult.Messages[</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">0</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">].Data);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">\\t\\t\\treturn</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> undefined</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t},</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t});</span></span></code></pre>\\n<p>Using react-query hooks, you can fetch data from the backend processes and update the UI based on the fetched data. The <code>queryFn</code> function is calling the <code>dryrun</code> function from the <code>@permaweb/aoconnect</code> library to fetch the counter value from the backend process and then returns the counter value.</p>\\n<aside data-callout=\\\"tip\\\"><strong data-callout-title=\\\"true\\\">Handy Tip</strong><p>Some cool features of TanStack Query:</p><ul>\\n<li><strong>Caching</strong>: Automatically cache data and keep it up to date.</li>\\n<li><strong>isLoading</strong>: A boolean that is <code>true</code> when the query is in a loading state.</li>\\n<li><strong>isFetching</strong>: A boolean that is <code>true</code> when the query is fetching data.</li>\\n<li><strong>error</strong>: An error object if the query failed.</li>\\n</ul></aside>\\n\",\"id\":\"docs/pages/frontend-development/connecting-to-backend.mdx#reading-data-from-backend-process\",\"isPage\":false,\"text\":\"\\n\\nIt imports the backend process from the constants directory.\\nIt uses the useQuery hook from TanStack Query to fetch the counter value from the backend process.\\n\\nimport { COUNTER } from &quot;../constants/counter_process&quot;;\\nimport { useMutation, useQuery, useQueryClient } from &quot;@tanstack/react-query&quot;;\\n \\nconst {\\n\\t\\tdata: counter,\\n\\t\\terror,\\n\\t\\tisLoading,\\n\\t\\tisFetching,\\n\\t} = useQuery({\\n\\t\\tqueryKey: [&quot;counter&quot;],\\n\\t\\tqueryFn: async () =&gt; {\\n\\t\\t\\tconst dryrunResult = await dryrun({\\n\\t\\t\\t\\tprocess: COUNTER,\\n\\t\\t\\t\\ttags: [\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tname: &quot;Action&quot;,\\n\\t\\t\\t\\t\\t\\tvalue: &quot;Info&quot;,\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t],\\n\\t\\t\\t});\\n \\n\\t\\t\\tif (dryrunResult.Messages[0].Data) {\\n\\t\\t\\t\\treturn JSON.parse(dryrunResult.Messages[0].Data);\\n\\t\\t\\t}\\n \\n\\t\\t\\treturn undefined;\\n\\t\\t},\\n\\t});\\nUsing react-query hooks, you can fetch data from the backend processes and update the UI based on the fetched data. The queryFn function is calling the dryrun function from the @permaweb/aoconnect library to fetch the counter value from the backend process and then returns the counter value.\\nHandy TipSome cool features of TanStack Query:\\nCaching: Automatically cache data and keep it up to date.\\nisLoading: A boolean that is true when the query is in a loading state.\\nisFetching: A boolean that is true when the query is fetching data.\\nerror: An error object if the query failed.\\n\\n\",\"title\":\"Reading Data from Backend Process\",\"titles\":[\"Connecting to Backend\"]},{\"href\":\"/frontend-development/connecting-to-backend#sending-data-to-backend-process\",\"html\":\"\\n<p>You can always send messages using <code>useMutation</code> hook provided by TanStack Query. The <code>useMutation</code> hook is used to send messages to the backend processes. You can use this hook to send messages to the backend processes and update the UI based on the response.</p>\\n<p>An example is the Increase button in the <code>counter</code> component. When the Increase button is clicked, it sends a message to the backend process to increase the counter value.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"apps/frontend/src/components/counter.tsx\\\" data-lang=\\\"tsx\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> increaseCounter</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> useMutation</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\tmutationKey: [</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;IncreaseCounter&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">\\t\\tmutationFn</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">async</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> () </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=&gt;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">\\t\\t\\tconst</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> messageId</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> message</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\tprocess: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">COUNTER</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\ttags: [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\t\\t{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\t\\t\\tname: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;Action&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\t\\t\\tvalue: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;IncreaseCounter&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\t\\t},</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\t],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\tdata: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\tsigner: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">createDataItemSigner</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(window.arweaveWallet),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t});</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">\\t\\t\\tconst</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> messageResult</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> result</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\tprocess: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">COUNTER</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t\\tmessage: messageId,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t});</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">\\t\\t\\tif</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (messageResult.Messages[</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">0</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">].Data) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">\\t\\t\\t\\treturn</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> JSON</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">parse</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(messageResult.Messages[</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">0</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">].Data);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\t}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">\\t\\t\\treturn</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> undefined</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t},</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">\\t\\tonSuccess</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: () </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=&gt;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t\\tqueryClient.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">invalidateQueries</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t\\t},</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">\\t});</span></span></code></pre>\\n<p>The <code>mutationFn</code> function is calling the <code>message</code> function from the <code>@permaweb/aoconnect</code> library to send a message to the backend process to increase the counter value. The <code>onSuccess</code> function is used to invalidate the query cache so that the UI can be updated with the new counter value.</p>\\n<aside data-callout=\\\"tip\\\"><strong data-callout-title=\\\"true\\\">Handy Tip</strong><p>Some cool features of TanStack Query:</p><ul>\\n<li><strong>mutationFn</strong>: A function that sends a message to the backend process.</li>\\n<li><strong>onSuccess</strong>: A function that is called when the mutation is successful.</li>\\n<li><strong>invalidateQueries</strong>: A function that invalidates the query cache and re-fetches the data.</li>\\n</ul></aside>\",\"id\":\"docs/pages/frontend-development/connecting-to-backend.mdx#sending-data-to-backend-process\",\"isPage\":false,\"text\":\"\\nYou can always send messages using useMutation hook provided by TanStack Query. The useMutation hook is used to send messages to the backend processes. You can use this hook to send messages to the backend processes and update the UI based on the response.\\nAn example is the Increase button in the counter component. When the Increase button is clicked, it sends a message to the backend process to increase the counter value.\\nconst increaseCounter = useMutation({\\n\\t\\tmutationKey: [&quot;IncreaseCounter&quot;],\\n\\t\\tmutationFn: async () =&gt; {\\n\\t\\t\\tconst messageId = await message({\\n\\t\\t\\t\\tprocess: COUNTER,\\n\\t\\t\\t\\ttags: [\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tname: &quot;Action&quot;,\\n\\t\\t\\t\\t\\t\\tvalue: &quot;IncreaseCounter&quot;,\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t],\\n\\t\\t\\t\\tdata: &quot;&quot;,\\n\\t\\t\\t\\tsigner: createDataItemSigner(window.arweaveWallet),\\n\\t\\t\\t});\\n \\n\\t\\t\\tconst messageResult = await result({\\n\\t\\t\\t\\tprocess: COUNTER,\\n\\t\\t\\t\\tmessage: messageId,\\n\\t\\t\\t});\\n \\n\\t\\t\\tif (messageResult.Messages[0].Data) {\\n\\t\\t\\t\\treturn JSON.parse(messageResult.Messages[0].Data);\\n\\t\\t\\t}\\n \\n\\t\\t\\treturn undefined;\\n\\t\\t},\\n\\t\\tonSuccess: () =&gt; {\\n\\t\\t\\tqueryClient.invalidateQueries();\\n\\t\\t},\\n\\t});\\nThe mutationFn function is calling the message function from the @permaweb/aoconnect library to send a message to the backend process to increase the counter value. The onSuccess function is used to invalidate the query cache so that the UI can be updated with the new counter value.\\nHandy TipSome cool features of TanStack Query:\\nmutationFn: A function that sends a message to the backend process.\\nonSuccess: A function that is called when the mutation is successful.\\ninvalidateQueries: A function that invalidates the query cache and re-fetches the data.\\n\",\"title\":\"Sending Data to Backend Process\",\"titles\":[\"Connecting to Backend\"]}]}],[\"index.a261d47869896f9bd8d426caee2e29aec094f0fce8ef01d6a95038726685715d\",{\"mdx\":\"# Building the frontend\\n\\nThe frontend is a Vite React application. It is a single-page application (SPA) that provides a user interface for the backend services.\\n\\nBuilding the vite frontend is a simple process. You can learn more about building in the official Vite documentation [here](https://vitejs.dev/guide/build.html).\\n\\nTo build the frontend, run the following command:\\n\\n```bash [Terminal]\\nnpm run frontend:build\\n```\\n\\nYou can deploy your frontend to a static hosting service like Vercel, Netlify, or GitHub Pages.\\n\\n:::tip[Handy Tip]\\nWouldn't it be awesome if your frontend could be deployed to the Permaweb? You can do that with permaweb deployment tool that Create Ao dApp provides.\\n\\nCheck out the [Deploying to Permaweb](/frontend-development/permaweb-deployment) guide to learn more.\\n:::\",\"document\":[{\"href\":\"/frontend-development/building#building-the-frontend\",\"html\":\"</header>\\n<p>The frontend is a Vite React application. It is a single-page application (SPA) that provides a user interface for the backend services.</p>\\n<p>Building the vite frontend is a simple process. You can learn more about building in the official Vite documentation <a href=\\\"https://vitejs.dev/guide/build.html\\\">here</a>.</p>\\n<p>To build the frontend, run the following command:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"Terminal\\\" data-lang=\\\"bash\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">npm</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> run</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> frontend:build</span></span></code></pre>\\n<p>You can deploy your frontend to a static hosting service like Vercel, Netlify, or GitHub Pages.</p>\\n<aside data-callout=\\\"tip\\\"><strong data-callout-title=\\\"true\\\">Handy Tip</strong><p>Wouldn&#x27;t it be awesome if your frontend could be deployed to the Permaweb? You can do that with permaweb deployment tool that Create Ao dApp provides.</p><p>Check out the <a href=\\\"/frontend-development/permaweb-deployment\\\">Deploying to Permaweb</a> guide to learn more.</p></aside>\",\"id\":\"docs/pages/frontend-development/building.mdx#building-the-frontend\",\"isPage\":true,\"text\":\"\\nThe frontend is a Vite React application. It is a single-page application (SPA) that provides a user interface for the backend services.\\nBuilding the vite frontend is a simple process. You can learn more about building in the official Vite documentation here.\\nTo build the frontend, run the following command:\\nnpm run frontend:build\\nYou can deploy your frontend to a static hosting service like Vercel, Netlify, or GitHub Pages.\\nHandy TipWouldn&#x27;t it be awesome if your frontend could be deployed to the Permaweb? You can do that with permaweb deployment tool that Create Ao dApp provides.Check out the Deploying to Permaweb guide to learn more.\",\"title\":\"Building the frontend\",\"titles\":[]}]}],[\"index.042a6567300d4018181cb402a548b23fe329818976e0c6b2ed9330a83fd21c03\",{\"mdx\":\"# Getting Started\\n\\nTo get started with the create-ao-dapp, you can run the following command:\\n\\n:::code-group\\n```bash [bun]\\nbun create ao-dapp\\n```\\n\\n```bash [pnpm]\\npnpm create ao-dapp\\n```\\n\\n```bash [yarn]\\nyarn create ao-dapp\\n```\\n\\n```bash [npm]\\nnpm init ao-dapp\\n```\\n:::\\n\\n\\n## Project Setup\\n\\nRunning the above command will prompt you to complete multiple steps to set up your project. The steps include:\\n\\n::::steps\\n### Enter the name of your project\\n\\nThis will be used as the root directory for your project, relative to the current directory. (eg: my-project)\\n \\n### What should we name the backend process?\\n \\nYou can name your backend process anything you like. The name you provide will be used to create the process \\ndirectory and files. (eg: myprocess)\\n\\n:::warning\\nNaming your process is important, as it will be used to create the process directory and files. Only valid lua identifier names are allowed.\\n:::\\n \\n### Pick a process type within myprocess\\n\\nYou can choose from the following process types:\\n- `lua`: A simple Lua process.\\n- `teal`: Lua process using the [Teal language](https://github.com/teal-language/tl).\\n\\n### Select the features you want to include\\n\\nYou can choose from the following features:\\n- `testing`: Include AO Process Testing suite for your process. [AO Process Testing](https://github.com/Autonomous-Finance/ao-process-testing)\\n- `squishy`: Tool for combining multiple files into a single one. [Squish](https://github.com/LuaDist/squish)\\n- `aoform`: Include AO Form for deploying your process. [AOForm](https://github.com/Autonomous-Finance/aoform)\\n\\n### Pick a frontend framework within my-project\\n\\nYou can choose from the following frontend frameworks:\\n- `vite-react`: A React application using Vite.\\n\\n::::\\n\\n## Project Structure\\n\\nBy selecting all the options, you will have a project structure similar to the following:\\n\\n```\\nproject-name/             # Your project's root directory.\\n├── ao/                   # The root directory of your ao processes. // [!code hl] // [!code focus]\\n│   └── process-name/          # Process Directory. // [!code hl] // [!code focus]\\n│       ├── scripts/           # Utility scripts for the process. // [!code hl] // [!code focus]\\n│       ├── src/               # Source code for the process. // [!code hl] // [!code focus]\\n│       │   ├── test/                   # Entry point for the process. // [!code hl] // [!code focus]\\n│       │   │   └── process_test.lua    # Test script for the process. // [!code hl] // [!code focus]\\n│       │   └── process.lua             # Entry point for the process. // [!code hl] // [!code focus]\\n│       ├── aoform.yaml        # Configuration for ao-form deployment. // [!code hl] // [!code focus]\\n│       └── squishy            # Squishy configuration for build. // [!code hl] // [!code focus]\\n├── apps/             # The root directory of your frontend applications. // [!code hl] // [!code focus]\\n│   └── frontend/     # React Vite App connected to ao process. // [!code hl] // [!code focus]\\n├── utils             # Directory for utility functions. // [!code hl] // [!code focus]\\n│   └── inject-process.ts # Script to inject process Ids from ao to frontend // [!code hl] // [!code focus]\\n├── node_modules/\\n├── .gitignore\\n├── package.json\\n├── README.md\\n└── tsconfig.json\\n```\\n\\nThis structure includes the following directories:\\n\\n- `ao/`: The root directory of your ao processes.\\n- `apps/`: The root directory of your frontend applications.\\n- `utils/`: Directory for utility functions.\\n\\n## Preconfigured Scripts\\n\\nThe `package.json` file in the root directory of your project includes the following preconfigured scripts:\\n\\n- `myprocess:deploy`: Deploys the process using aoform.\\n- `myprocess:test`: Runs the test script for the process.\\n- `myprocess:build`: Builds the process using squishy.\\n- `frontend:dev`: Starts the development server for the frontend application.\\n- `frontend:build`: Builds the frontend application.\\n\\n\\n## Next Steps\\n\\nYou can now start developing your ao processes and frontend applications. For more information on how to use the create-ao-dapp, follow along with the rest of the documentation. If you have any questions or need help, feel free to reach out to us on dedicated channels.\\n\",\"document\":[{\"href\":\"/getting-started#getting-started\",\"html\":\"</header>\\n<p>To get started with the create-ao-dapp, you can run the following command:</p>\\n<div class=\\\"code-group\\\"><div data-title=\\\"bun\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"bun\\\" data-lang=\\\"bash\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">bun</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> create</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> ao-dapp</span></span></code></pre></div><div data-title=\\\"pnpm\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"pnpm\\\" data-lang=\\\"bash\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">pnpm</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> create</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> ao-dapp</span></span></code></pre></div><div data-title=\\\"yarn\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"yarn\\\" data-lang=\\\"bash\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">yarn</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> create</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> ao-dapp</span></span></code></pre></div><div data-title=\\\"npm\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"npm\\\" data-lang=\\\"bash\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">npm</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> init</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> ao-dapp</span></span></code></pre></div></div>\\n\",\"id\":\"docs/pages/getting-started.mdx#getting-started\",\"isPage\":true,\"text\":\"\\nTo get started with the create-ao-dapp, you can run the following command:\\nbun create ao-dapppnpm create ao-dappyarn create ao-dappnpm init ao-dapp\\n\",\"title\":\"Getting Started\",\"titles\":[]},{\"href\":\"/getting-started#project-setup\",\"html\":\"\\n<p>Running the above command will prompt you to complete multiple steps to set up your project. The steps include:</p>\\n<div data-vocs-steps=\\\"true\\\"><div data-depth=\\\"3\\\">\",\"id\":\"docs/pages/getting-started.mdx#project-setup\",\"isPage\":false,\"text\":\"\\nRunning the above command will prompt you to complete multiple steps to set up your project. The steps include:\\n\",\"title\":\"Project Setup\",\"titles\":[\"Getting Started\"]},{\"href\":\"/getting-started#enter-the-name-of-your-project\",\"html\":\"<p>This will be used as the root directory for your project, relative to the current directory. (eg: my-project)</p></div><div data-depth=\\\"3\\\">\",\"id\":\"docs/pages/getting-started.mdx#enter-the-name-of-your-project\",\"isPage\":false,\"text\":\"This will be used as the root directory for your project, relative to the current directory. (eg: my-project)\",\"title\":\"Enter the name of your project\",\"titles\":[\"Getting Started\",\"Project Setup\"]},{\"href\":\"/getting-started#what-should-we-name-the-backend-process\",\"html\":\"<p>You can name your backend process anything you like. The name you provide will be used to create the process\\ndirectory and files. (eg: myprocess)</p><aside data-callout=\\\"warning\\\"><p>Naming your process is important, as it will be used to create the process directory and files. Only valid lua identifier names are allowed.</p></aside></div><div data-depth=\\\"3\\\">\",\"id\":\"docs/pages/getting-started.mdx#what-should-we-name-the-backend-process\",\"isPage\":false,\"text\":\"You can name your backend process anything you like. The name you provide will be used to create the process\\ndirectory and files. (eg: myprocess)Naming your process is important, as it will be used to create the process directory and files. Only valid lua identifier names are allowed.\",\"title\":\"What should we name the backend process?\",\"titles\":[\"Getting Started\",\"Project Setup\"]},{\"href\":\"/getting-started#pick-a-process-type-within-myprocess\",\"html\":\"<p>You can choose from the following process types:</p><ul>\\n<li><code>lua</code>: A simple Lua process.</li>\\n<li><code>teal</code>: Lua process using the <a href=\\\"https://github.com/teal-language/tl\\\">Teal language</a>.</li>\\n</ul></div><div data-depth=\\\"3\\\">\",\"id\":\"docs/pages/getting-started.mdx#pick-a-process-type-within-myprocess\",\"isPage\":false,\"text\":\"You can choose from the following process types:\\nlua: A simple Lua process.\\nteal: Lua process using the Teal language.\\n\",\"title\":\"Pick a process type within myprocess\",\"titles\":[\"Getting Started\",\"Project Setup\"]},{\"href\":\"/getting-started#select-the-features-you-want-to-include\",\"html\":\"<p>You can choose from the following features:</p><ul>\\n<li><code>testing</code>: Include AO Process Testing suite for your process. <a href=\\\"https://github.com/Autonomous-Finance/ao-process-testing\\\">AO Process Testing</a></li>\\n<li><code>squishy</code>: Tool for combining multiple files into a single one. <a href=\\\"https://github.com/LuaDist/squish\\\">Squish</a></li>\\n<li><code>aoform</code>: Include AO Form for deploying your process. <a href=\\\"https://github.com/Autonomous-Finance/aoform\\\">AOForm</a></li>\\n</ul></div><div data-depth=\\\"3\\\">\",\"id\":\"docs/pages/getting-started.mdx#select-the-features-you-want-to-include\",\"isPage\":false,\"text\":\"You can choose from the following features:\\ntesting: Include AO Process Testing suite for your process. AO Process Testing\\nsquishy: Tool for combining multiple files into a single one. Squish\\naoform: Include AO Form for deploying your process. AOForm\\n\",\"title\":\"Select the features you want to include\",\"titles\":[\"Getting Started\",\"Project Setup\"]},{\"href\":\"/getting-started#pick-a-frontend-framework-within-my-project\",\"html\":\"<p>You can choose from the following frontend frameworks:</p><ul>\\n<li><code>vite-react</code>: A React application using Vite.</li>\\n</ul></div></div>\\n\",\"id\":\"docs/pages/getting-started.mdx#pick-a-frontend-framework-within-my-project\",\"isPage\":false,\"text\":\"You can choose from the following frontend frameworks:\\nvite-react: A React application using Vite.\\n\\n\",\"title\":\"Pick a frontend framework within my-project\",\"titles\":[\"Getting Started\",\"Project Setup\"]},{\"href\":\"/getting-started#project-structure\",\"html\":\"\\n<p>By selecting all the options, you will have a project structure similar to the following:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused has-highlighted\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span>project-name/             # Your project&#x27;s root directory.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>├── ao/                   # The root directory of your ao processes.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│   └── process-name/          # Process Directory.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│       ├── scripts/           # Utility scripts for the process.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│       ├── src/               # Source code for the process.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│       │   ├── test/                   # Entry point for the process.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│       │   │   └── process_test.lua    # Test script for the process.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│       │   └── process.lua             # Entry point for the process.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│       ├── aoform.yaml        # Configuration for ao-form deployment.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│       └── squishy            # Squishy configuration for build.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>├── apps/             # The root directory of your frontend applications.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│   └── frontend/     # React Vite App connected to ao process.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>├── utils             # Directory for utility functions.</span></span>\\n<span class=\\\"line focused highlighted\\\"><span>│   └── inject-process.ts # Script to inject process Ids from ao to frontend</span></span>\\n<span class=\\\"line\\\"><span>├── node_modules/</span></span>\\n<span class=\\\"line\\\"><span>├── .gitignore</span></span>\\n<span class=\\\"line\\\"><span>├── package.json</span></span>\\n<span class=\\\"line\\\"><span>├── README.md</span></span>\\n<span class=\\\"line\\\"><span>└── tsconfig.json</span></span></code></pre>\\n<p>This structure includes the following directories:</p>\\n<ul>\\n<li><code>ao/</code>: The root directory of your ao processes.</li>\\n<li><code>apps/</code>: The root directory of your frontend applications.</li>\\n<li><code>utils/</code>: Directory for utility functions.</li>\\n</ul>\\n\",\"id\":\"docs/pages/getting-started.mdx#project-structure\",\"isPage\":false,\"text\":\"\\nBy selecting all the options, you will have a project structure similar to the following:\\nproject-name/             # Your project&#x27;s root directory.\\n├── ao/                   # The root directory of your ao processes.\\n│   └── process-name/          # Process Directory.\\n│       ├── scripts/           # Utility scripts for the process.\\n│       ├── src/               # Source code for the process.\\n│       │   ├── test/                   # Entry point for the process.\\n│       │   │   └── process_test.lua    # Test script for the process.\\n│       │   └── process.lua             # Entry point for the process.\\n│       ├── aoform.yaml        # Configuration for ao-form deployment.\\n│       └── squishy            # Squishy configuration for build.\\n├── apps/             # The root directory of your frontend applications.\\n│   └── frontend/     # React Vite App connected to ao process.\\n├── utils             # Directory for utility functions.\\n│   └── inject-process.ts # Script to inject process Ids from ao to frontend\\n├── node_modules/\\n├── .gitignore\\n├── package.json\\n├── README.md\\n└── tsconfig.json\\nThis structure includes the following directories:\\n\\nao/: The root directory of your ao processes.\\napps/: The root directory of your frontend applications.\\nutils/: Directory for utility functions.\\n\\n\",\"title\":\"Project Structure\",\"titles\":[\"Getting Started\"]},{\"href\":\"/getting-started#preconfigured-scripts\",\"html\":\"\\n<p>The <code>package.json</code> file in the root directory of your project includes the following preconfigured scripts:</p>\\n<ul>\\n<li><code>myprocess:deploy</code>: Deploys the process using aoform.</li>\\n<li><code>myprocess:test</code>: Runs the test script for the process.</li>\\n<li><code>myprocess:build</code>: Builds the process using squishy.</li>\\n<li><code>frontend:dev</code>: Starts the development server for the frontend application.</li>\\n<li><code>frontend:build</code>: Builds the frontend application.</li>\\n</ul>\\n\",\"id\":\"docs/pages/getting-started.mdx#preconfigured-scripts\",\"isPage\":false,\"text\":\"\\nThe package.json file in the root directory of your project includes the following preconfigured scripts:\\n\\nmyprocess:deploy: Deploys the process using aoform.\\nmyprocess:test: Runs the test script for the process.\\nmyprocess:build: Builds the process using squishy.\\nfrontend:dev: Starts the development server for the frontend application.\\nfrontend:build: Builds the frontend application.\\n\\n\",\"title\":\"Preconfigured Scripts\",\"titles\":[\"Getting Started\"]},{\"href\":\"/getting-started#next-steps\",\"html\":\"\\n<p>You can now start developing your ao processes and frontend applications. For more information on how to use the create-ao-dapp, follow along with the rest of the documentation. If you have any questions or need help, feel free to reach out to us on dedicated channels.</p>\",\"id\":\"docs/pages/getting-started.mdx#next-steps\",\"isPage\":false,\"text\":\"\\nYou can now start developing your ao processes and frontend applications. For more information on how to use the create-ao-dapp, follow along with the rest of the documentation. If you have any questions or need help, feel free to reach out to us on dedicated channels.\",\"title\":\"Next Steps\",\"titles\":[\"Getting Started\"]}]}],[\"index.f14bbe6be93d94654dafc7d76b8c6e41fb45a92613a7f6c32eee740654580b8e\",{\"mdx\":\"# Project Structure\\n\",\"document\":[{\"href\":\"/project-structure#project-structure\",\"html\":\"</header>\",\"id\":\"docs/pages/project-structure.mdx#project-structure\",\"isPage\":true,\"text\":\"\",\"title\":\"Project Structure\",\"titles\":[]}]}],[\"index.8b4c9e93e02adeeb3501779551a66c358ce060a1061c34f9c71e6409d5e91adf\",{\"mdx\":\"# Create Ao dApp\\n\\nThe create-ao-dapp provides a comprehensive boilerplate for setting up an AO process, including testing, modules, and amalgamation alongside a React application. This starter kit aims to simplify the development and deployment of AO processes by providing pre-configured setups and example processes.\\n\\n## Features\\n\\n- **Modular**: The create-ao-dapp is designed to be modular, allowing you to easily add and remove modules as needed.\\n- **Testing**: The create-ao-dapp includes a comprehensive testing suite, allowing you to test your AO processes with ease.\\n- **Amalgamation**: The create-ao-dapp includes an amalgamation tool, allowing you to easily combine multiple AO processes into a single process.\\n- **Permaweb Deployment**: The create-ao-dapp includes a deployment script that allows you to deploy your AO processes to the Permaweb with ease.\",\"document\":[{\"href\":\"/introduction#create-ao-dapp\",\"html\":\"</header>\\n<p>The create-ao-dapp provides a comprehensive boilerplate for setting up an AO process, including testing, modules, and amalgamation alongside a React application. This starter kit aims to simplify the development and deployment of AO processes by providing pre-configured setups and example processes.</p>\\n\",\"id\":\"docs/pages/introduction.mdx#create-ao-dapp\",\"isPage\":true,\"text\":\"\\nThe create-ao-dapp provides a comprehensive boilerplate for setting up an AO process, including testing, modules, and amalgamation alongside a React application. This starter kit aims to simplify the development and deployment of AO processes by providing pre-configured setups and example processes.\\n\",\"title\":\"Create Ao dApp\",\"titles\":[]},{\"href\":\"/introduction#features\",\"html\":\"\\n<ul>\\n<li><strong>Modular</strong>: The create-ao-dapp is designed to be modular, allowing you to easily add and remove modules as needed.</li>\\n<li><strong>Testing</strong>: The create-ao-dapp includes a comprehensive testing suite, allowing you to test your AO processes with ease.</li>\\n<li><strong>Amalgamation</strong>: The create-ao-dapp includes an amalgamation tool, allowing you to easily combine multiple AO processes into a single process.</li>\\n<li><strong>Permaweb Deployment</strong>: The create-ao-dapp includes a deployment script that allows you to deploy your AO processes to the Permaweb with ease.</li>\\n</ul>\",\"id\":\"docs/pages/introduction.mdx#features\",\"isPage\":false,\"text\":\"\\n\\nModular: The create-ao-dapp is designed to be modular, allowing you to easily add and remove modules as needed.\\nTesting: The create-ao-dapp includes a comprehensive testing suite, allowing you to test your AO processes with ease.\\nAmalgamation: The create-ao-dapp includes an amalgamation tool, allowing you to easily combine multiple AO processes into a single process.\\nPermaweb Deployment: The create-ao-dapp includes a deployment script that allows you to deploy your AO processes to the Permaweb with ease.\\n\",\"title\":\"Features\",\"titles\":[\"Create Ao dApp\"]}]}],[\"index.4594708aa23043210394c8909ee6b13d2e2dd87f127e0ccce6b3ad4f197050c4\",{\"mdx\":\"---\\nlayout: landing\\n---\\n\\nimport { HomePage } from \\\"vocs/components\\\";\\nimport { Hero } from \\\"../components/Hero\\\";\\nimport { Downloads } from \\\"../components/Downloads\\\";\\n\\n<HomePage.Root style={{\\n  maxWidth:\\\"60%\\\"\\n}}>\\n  <div style={{\\n    fontSize: \\\"1.75rem\\\",\\n  }}>\\n  Effortlessly launch your fullstack permadApp with one command and unlock limitless potential of AO and Arweave\\n  </div>\\n  <Hero />\\n<HomePage.Description>\\n  Create-ao-dapp provides a robust boilerplate that integrates React, Typed Lua\\n  (Teal) for type-safe development, and a pre-configured CRUD template with\\n  SQL—all the essentials for testing, modules, and deployment.\\n</HomePage.Description>\\n\\n```bash [Get Started]\\nnpx create-ao-dapp@latest\\n```\\n\\n  <Downloads />\\n\\n  <HomePage.Buttons>\\n  <HomePage.Button href=\\\"/getting-started\\\" variant=\\\"accent\\\">\\n    Documentation\\n  </HomePage.Button>\\n  <HomePage.Button href=\\\"https://github.com/Autonomous-Finance/ao-starter-kit\\\">\\n    GitHub\\n  </HomePage.Button>\\n</HomePage.Buttons>\\n</HomePage.Root>\\n\",\"document\":[]}],[\"buildSearchIndex\",true],[\"hash\",\"9dfb0ff7\"]]"
